/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(const char *str, int location);
static PGNode *makeStringConstCast(const char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGNode *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_SINGLE_ARROW = 17,              /* SINGLE_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_SINGLE_COLON = 19,              /* SINGLE_COLON  */
  YYSYMBOL_LESS_EQUALS = 20,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 21,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 22,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 23,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 24,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 25,                    /* ACCESS  */
  YYSYMBOL_ACTION = 26,                    /* ACTION  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARRAY = 40,                     /* ARRAY  */
  YYSYMBOL_AS = 41,                        /* AS  */
  YYSYMBOL_ASC_P = 42,                     /* ASC_P  */
  YYSYMBOL_ASOF = 43,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 44,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 45,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 46,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 47,                        /* AT  */
  YYSYMBOL_ATTACH = 48,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 49,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 50,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 51,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 52,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 53,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 54,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 55,                    /* BIGINT  */
  YYSYMBOL_BINARY = 56,                    /* BINARY  */
  YYSYMBOL_BIT = 57,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 58,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 59,                      /* BOTH  */
  YYSYMBOL_BY = 60,                        /* BY  */
  YYSYMBOL_CACHE = 61,                     /* CACHE  */
  YYSYMBOL_CALL_P = 62,                    /* CALL_P  */
  YYSYMBOL_CALLED = 63,                    /* CALLED  */
  YYSYMBOL_CASCADE = 64,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 65,                  /* CASCADED  */
  YYSYMBOL_CASE = 66,                      /* CASE  */
  YYSYMBOL_CAST = 67,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 68,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 69,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 70,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 71,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 72,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 73,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 74,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 75,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 76,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 77,                     /* CLASS  */
  YYSYMBOL_CLOSE = 78,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 79,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 80,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 81,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 82,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 83,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 84,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 85,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 86,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 87,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 88,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 89,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 90,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 91,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 92,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 93,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 94,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 95,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 96,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 97,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 98,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 99,                      /* COPY  */
  YYSYMBOL_COST = 100,                     /* COST  */
  YYSYMBOL_CREATE_P = 101,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 102,                    /* CROSS  */
  YYSYMBOL_CSV = 103,                      /* CSV  */
  YYSYMBOL_CUBE = 104,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 105,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 106,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 107,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 108,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 109,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 110,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 111,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 112,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 113,                      /* DEC  */
  YYSYMBOL_DECADE_P = 114,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 115,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 116,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 117,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 118,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 119,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 120,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 121,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 122,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 123,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 124,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 125,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 126,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 127,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 128,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 129,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 130,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 131,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 132,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 133,                 /* DISTINCT  */
  YYSYMBOL_DO = 134,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 135,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 136,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 137,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 138,                     /* DROP  */
  YYSYMBOL_EACH = 139,                     /* EACH  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ERROR_P = 146,                  /* ERROR_P  */
  YYSYMBOL_ESCAPE = 147,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 148,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 149,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 150,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 151,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 152,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 153,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 154,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 155,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 156,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 157,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 158,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 159,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 160,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 161,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 162,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 163,                   /* FAMILY  */
  YYSYMBOL_FETCH = 164,                    /* FETCH  */
  YYSYMBOL_FILTER = 165,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 166,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 167,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 168,                /* FOLLOWING  */
  YYSYMBOL_FOR = 169,                      /* FOR  */
  YYSYMBOL_FORCE = 170,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 171,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 172,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 173,                   /* FREEZE  */
  YYSYMBOL_FROM = 174,                     /* FROM  */
  YYSYMBOL_FULL = 175,                     /* FULL  */
  YYSYMBOL_FUNCTION = 176,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 177,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 178,                /* GENERATED  */
  YYSYMBOL_GLOB = 179,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 180,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 181,                    /* GRANT  */
  YYSYMBOL_GRANTED = 182,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEY = 229,                      /* KEY  */
  YYSYMBOL_LABEL = 230,                    /* LABEL  */
  YYSYMBOL_LAMBDA = 231,                   /* LAMBDA  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATCHED = 253,                  /* MATCHED  */
  YYSYMBOL_MATERIALIZED = 254,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 255,                 /* MAXVALUE  */
  YYSYMBOL_MERGE = 256,                    /* MERGE  */
  YYSYMBOL_METHOD = 257,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 258,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 259,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 260,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 261,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 262,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 263,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 264,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 265,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 266,                 /* MINVALUE  */
  YYSYMBOL_MODE = 267,                     /* MODE  */
  YYSYMBOL_MONTH_P = 268,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 269,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 270,                     /* MOVE  */
  YYSYMBOL_NAME_P = 271,                   /* NAME_P  */
  YYSYMBOL_NAMES = 272,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 273,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 274,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 275,                    /* NCHAR  */
  YYSYMBOL_NEW = 276,                      /* NEW  */
  YYSYMBOL_NEXT = 277,                     /* NEXT  */
  YYSYMBOL_NO = 278,                       /* NO  */
  YYSYMBOL_NONE = 279,                     /* NONE  */
  YYSYMBOL_NOT = 280,                      /* NOT  */
  YYSYMBOL_NOTHING = 281,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 282,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 283,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 284,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 285,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 286,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 287,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 288,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 289,                 /* OBJECT_P  */
  YYSYMBOL_OF = 290,                       /* OF  */
  YYSYMBOL_OFF = 291,                      /* OFF  */
  YYSYMBOL_OFFSET = 292,                   /* OFFSET  */
  YYSYMBOL_OIDS = 293,                     /* OIDS  */
  YYSYMBOL_OLD = 294,                      /* OLD  */
  YYSYMBOL_ON = 295,                       /* ON  */
  YYSYMBOL_ONLY = 296,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 297,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 298,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 299,                  /* OPTIONS  */
  YYSYMBOL_OR = 300,                       /* OR  */
  YYSYMBOL_ORDER = 301,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 302,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 303,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 304,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 305,                  /* OUTER_P  */
  YYSYMBOL_OVER = 306,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 307,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 308,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 309,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 310,                    /* OWNED  */
  YYSYMBOL_OWNER = 311,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 312,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 313,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 314,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 315,                /* PARTITION  */
  YYSYMBOL_PARTITIONED = 316,              /* PARTITIONED  */
  YYSYMBOL_PASSING = 317,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 318,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 319,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 320,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 321,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 322,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 323,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 324,                  /* PLACING  */
  YYSYMBOL_PLANS = 325,                    /* PLANS  */
  YYSYMBOL_POLICY = 326,                   /* POLICY  */
  YYSYMBOL_POSITION = 327,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 328,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 329,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 330,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 331,                /* PRECISION  */
  YYSYMBOL_PREPARE = 332,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 333,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 334,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 335,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 336,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 337,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 338,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 339,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 340,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 341,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 342,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 343,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 344,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 345,                    /* QUOTE  */
  YYSYMBOL_RANGE = 346,                    /* RANGE  */
  YYSYMBOL_READ_P = 347,                   /* READ_P  */
  YYSYMBOL_REAL = 348,                     /* REAL  */
  YYSYMBOL_REASSIGN = 349,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 350,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 351,                /* RECURSIVE  */
  YYSYMBOL_REF = 352,                      /* REF  */
  YYSYMBOL_REFERENCES = 353,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 354,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 355,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 356,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 357,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 358,                  /* RELEASE  */
  YYSYMBOL_RENAME = 359,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 360,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 361,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 362,                  /* REPLICA  */
  YYSYMBOL_RESET = 363,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 364,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 365,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 366,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 367,                /* RETURNING  */
  YYSYMBOL_RETURNS = 368,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 369,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 370,                    /* RIGHT  */
  YYSYMBOL_ROLE = 371,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 372,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 373,                   /* ROLLUP  */
  YYSYMBOL_ROW = 374,                      /* ROW  */
  YYSYMBOL_ROWS = 375,                     /* ROWS  */
  YYSYMBOL_RULE = 376,                     /* RULE  */
  YYSYMBOL_SAMPLE = 377,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 378,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 379,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 380,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 381,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 382,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 383,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 384,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 385,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 386,                   /* SECRET  */
  YYSYMBOL_SECURITY = 387,                 /* SECURITY  */
  YYSYMBOL_SELECT = 388,                   /* SELECT  */
  YYSYMBOL_SEMI = 389,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 390,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 391,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 392,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 393,                   /* SERVER  */
  YYSYMBOL_SESSION = 394,                  /* SESSION  */
  YYSYMBOL_SET = 395,                      /* SET  */
  YYSYMBOL_SETOF = 396,                    /* SETOF  */
  YYSYMBOL_SETS = 397,                     /* SETS  */
  YYSYMBOL_SHARE = 398,                    /* SHARE  */
  YYSYMBOL_SHOW = 399,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 400,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 401,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 402,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 403,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 404,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 405,                     /* SOME  */
  YYSYMBOL_SORTED = 406,                   /* SORTED  */
  YYSYMBOL_SOURCE_P = 407,                 /* SOURCE_P  */
  YYSYMBOL_SQL_P = 408,                    /* SQL_P  */
  YYSYMBOL_STABLE = 409,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 410,             /* STANDALONE_P  */
  YYSYMBOL_START = 411,                    /* START  */
  YYSYMBOL_STATEMENT = 412,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 413,               /* STATISTICS  */
  YYSYMBOL_STDIN = 414,                    /* STDIN  */
  YYSYMBOL_STDOUT = 415,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 416,                  /* STORAGE  */
  YYSYMBOL_STORED = 417,                   /* STORED  */
  YYSYMBOL_STRICT_P = 418,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 419,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 420,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 421,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 422,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 423,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 424,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 425,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 426,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 427,                    /* TABLE  */
  YYSYMBOL_TABLES = 428,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 429,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 430,               /* TABLESPACE  */
  YYSYMBOL_TARGET_P = 431,                 /* TARGET_P  */
  YYSYMBOL_TEMP = 432,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 433,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 434,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 435,                   /* TEXT_P  */
  YYSYMBOL_THEN = 436,                     /* THEN  */
  YYSYMBOL_TIES = 437,                     /* TIES  */
  YYSYMBOL_TIME = 438,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 439,                /* TIMESTAMP  */
  YYSYMBOL_TO = 440,                       /* TO  */
  YYSYMBOL_TRAILING = 441,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 442,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 443,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 444,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 445,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 446,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 447,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 448,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 449,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 450,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 451,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 452,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 453,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 454,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 455,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 456,                    /* UNION  */
  YYSYMBOL_UNIQUE = 457,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 458,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 459,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 460,                 /* UNLOGGED  */
  YYSYMBOL_UNPACK = 461,                   /* UNPACK  */
  YYSYMBOL_UNPIVOT = 462,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 463,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 464,                   /* UPDATE  */
  YYSYMBOL_USE_P = 465,                    /* USE_P  */
  YYSYMBOL_USER = 466,                     /* USER  */
  YYSYMBOL_USING = 467,                    /* USING  */
  YYSYMBOL_VACUUM = 468,                   /* VACUUM  */
  YYSYMBOL_VALID = 469,                    /* VALID  */
  YYSYMBOL_VALIDATE = 470,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 471,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 472,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 473,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 474,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 475,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 476,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 477,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 478,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 479,                /* VERSION_P  */
  YYSYMBOL_VIEW = 480,                     /* VIEW  */
  YYSYMBOL_VIEWS = 481,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 482,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 483,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 484,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 485,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 486,                     /* WHEN  */
  YYSYMBOL_WHERE = 487,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 488,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 489,                   /* WINDOW  */
  YYSYMBOL_WITH = 490,                     /* WITH  */
  YYSYMBOL_WITHIN = 491,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 492,                  /* WITHOUT  */
  YYSYMBOL_WORK = 493,                     /* WORK  */
  YYSYMBOL_WRAPPER = 494,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 495,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 496,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 497,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 498,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 499,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 500,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 501,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 502,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 503,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 504,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 505,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 506,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 507,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 508,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 509,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 510,                    /* YES_P  */
  YYSYMBOL_ZONE = 511,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 512,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 513,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 514,                  /* WITH_LA  */
  YYSYMBOL_515_ = 515,                     /* '<'  */
  YYSYMBOL_516_ = 516,                     /* '>'  */
  YYSYMBOL_517_ = 517,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 518,                /* POSTFIXOP  */
  YYSYMBOL_519_ = 519,                     /* '+'  */
  YYSYMBOL_520_ = 520,                     /* '-'  */
  YYSYMBOL_521_ = 521,                     /* '*'  */
  YYSYMBOL_522_ = 522,                     /* '/'  */
  YYSYMBOL_523_ = 523,                     /* '%'  */
  YYSYMBOL_524_ = 524,                     /* '^'  */
  YYSYMBOL_UMINUS = 525,                   /* UMINUS  */
  YYSYMBOL_526_ = 526,                     /* '['  */
  YYSYMBOL_527_ = 527,                     /* ']'  */
  YYSYMBOL_528_ = 528,                     /* '('  */
  YYSYMBOL_529_ = 529,                     /* ')'  */
  YYSYMBOL_530_ = 530,                     /* '.'  */
  YYSYMBOL_531_ = 531,                     /* ';'  */
  YYSYMBOL_532_ = 532,                     /* ','  */
  YYSYMBOL_533_ = 533,                     /* '?'  */
  YYSYMBOL_534_ = 534,                     /* '$'  */
  YYSYMBOL_535_ = 535,                     /* '#'  */
  YYSYMBOL_536_ = 536,                     /* '{'  */
  YYSYMBOL_537_ = 537,                     /* '}'  */
  YYSYMBOL_YYACCEPT = 538,                 /* $accept  */
  YYSYMBOL_stmtblock = 539,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 540,                /* stmtmulti  */
  YYSYMBOL_stmt = 541,                     /* stmt  */
  YYSYMBOL_AlterDatabaseStmt = 542,        /* AlterDatabaseStmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 543,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 544,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 545,               /* SeqOptList  */
  YYSYMBOL_opt_with = 546,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 547,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 548,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 549,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 550,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 551,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 552, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 553,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 554, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 555, /* alter_generic_option_list  */
  YYSYMBOL_qualify_list = 556,             /* qualify_list  */
  YYSYMBOL_qualify_el = 557,               /* qualify_el  */
  YYSYMBOL_qualified_column = 558,         /* qualified_column  */
  YYSYMBOL_qualifiedColumnDef = 559,       /* qualifiedColumnDef  */
  YYSYMBOL_alter_table_cmd = 560,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 561,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 562, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 563,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 564,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 565,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 566,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 567,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 568,               /* DetachStmt  */
  YYSYMBOL_opt_database = 569,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 570,       /* opt_database_alias  */
  YYSYMBOL_generic_opt_arg = 571,          /* generic_opt_arg  */
  YYSYMBOL_generic_opt_elem = 572,         /* generic_opt_elem  */
  YYSYMBOL_generic_opt_list = 573,         /* generic_opt_list  */
  YYSYMBOL_opt_attach_options = 574,       /* opt_attach_options  */
  YYSYMBOL_CallStmt = 575,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 576,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 577,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 578,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 579,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 580, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 581,           /* qualified_name  */
  YYSYMBOL_ColId = 582,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 583,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 584,                   /* Sconst  */
  YYSYMBOL_indirection = 585,              /* indirection  */
  YYSYMBOL_indirection_el = 586,           /* indirection_el  */
  YYSYMBOL_attr_name = 587,                /* attr_name  */
  YYSYMBOL_ColLabel = 588,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 589,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 590,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 591,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 592,           /* copy_delimiter  */
  YYSYMBOL_opt_using = 593,                /* opt_using  */
  YYSYMBOL_opt_as = 594,                   /* opt_as  */
  YYSYMBOL_opt_program = 595,              /* opt_program  */
  YYSYMBOL_copy_options = 596,             /* copy_options  */
  YYSYMBOL_opt_oids = 597,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 598,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 599,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 600,            /* copy_opt_item  */
  YYSYMBOL_copy_file_name = 601,           /* copy_file_name  */
  YYSYMBOL_CreateStmt = 602,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 603,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 604,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 605, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 606,       /* generic_option_arg  */
  YYSYMBOL_key_action = 607,               /* key_action  */
  YYSYMBOL_ColConstraint = 608,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 609,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 610,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 611,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 612,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 613,      /* generic_option_elem  */
  YYSYMBOL_key_update = 614,               /* key_update  */
  YYSYMBOL_key_actions = 615,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 616,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 617,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 618,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 619,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 620,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 621,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 622,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 623,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 624,                  /* OptWith  */
  YYSYMBOL_definition = 625,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 626,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 627,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 628,  /* ConstraintAttributeElem  */
  YYSYMBOL_regularColumnDef = 629,         /* regularColumnDef  */
  YYSYMBOL_generatedColumnDef = 630,       /* generatedColumnDef  */
  YYSYMBOL_columnDef = 631,                /* columnDef  */
  YYSYMBOL_def_list = 632,                 /* def_list  */
  YYSYMBOL_index_name = 633,               /* index_name  */
  YYSYMBOL_TableElement = 634,             /* TableElement  */
  YYSYMBOL_def_elem = 635,                 /* def_elem  */
  YYSYMBOL_opt_definition = 636,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 637,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 638,               /* columnElem  */
  YYSYMBOL_opt_column_list = 639,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 640,              /* ColQualList  */
  YYSYMBOL_key_delete = 641,               /* key_delete  */
  YYSYMBOL_reloption_elem = 642,           /* reloption_elem  */
  YYSYMBOL_columnList = 643,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 644,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 645,                /* func_type  */
  YYSYMBOL_ConstraintElem = 646,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 647,         /* TableElementList  */
  YYSYMBOL_key_match = 648,                /* key_match  */
  YYSYMBOL_TableLikeClause = 649,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 650,                  /* OptTemp  */
  YYSYMBOL_generated_when = 651,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 652,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 653,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 654,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 655,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 656,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 657,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 658,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 659,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 660,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 661,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 662,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 663,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 664, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 665, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 666,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 667,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 668,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 669,              /* macro_alias  */
  YYSYMBOL_param_list = 670,               /* param_list  */
  YYSYMBOL_MacroParameterList = 671,       /* MacroParameterList  */
  YYSYMBOL_MacroParameter = 672,           /* MacroParameter  */
  YYSYMBOL_CreateSchemaStmt = 673,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 674,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 675,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 676,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 677,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 678,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 679,    /* opt_storage_specifier  */
  YYSYMBOL_create_secret_generic_opt_arg = 680, /* create_secret_generic_opt_arg  */
  YYSYMBOL_create_secret_generic_opt_elem = 681, /* create_secret_generic_opt_elem  */
  YYSYMBOL_create_secret_generic_opt_list = 682, /* create_secret_generic_opt_list  */
  YYSYMBOL_CreateSeqStmt = 683,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 684,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 685,           /* CreateTypeStmt  */
  YYSYMBOL_create_type_value = 686,        /* create_type_value  */
  YYSYMBOL_opt_enum_val_list = 687,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 688,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 689,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 690,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 691,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 692,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 693,             /* using_clause  */
  YYSYMBOL_DropStmt = 694,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 695,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 696,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 697,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 698,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 699, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 700,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 701, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 702,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 703,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 704,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 705,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 706,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 707,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 708,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 709,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 710,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 711, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 712,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 713,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 714,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 715,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 716,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 717,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 718,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 719,                /* IndexStmt  */
  YYSYMBOL_access_method = 720,            /* access_method  */
  YYSYMBOL_access_method_clause = 721,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 722,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 723,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 724,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 725,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 726,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 727,              /* insert_rest  */
  YYSYMBOL_insert_target = 728,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 729,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 730,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 731,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 732,       /* insert_column_item  */
  YYSYMBOL_set_clause = 733,               /* set_clause  */
  YYSYMBOL_opt_or_action = 734,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 735,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 736,               /* index_elem  */
  YYSYMBOL_returning_clause = 737,         /* returning_clause  */
  YYSYMBOL_override_kind = 738,            /* override_kind  */
  YYSYMBOL_set_target_list = 739,          /* set_target_list  */
  YYSYMBOL_opt_collate = 740,              /* opt_collate  */
  YYSYMBOL_opt_class = 741,                /* opt_class  */
  YYSYMBOL_insert_column_list = 742,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 743,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 744, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 745,             /* index_params  */
  YYSYMBOL_set_target = 746,               /* set_target  */
  YYSYMBOL_LoadStmt = 747,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 748,                /* opt_force  */
  YYSYMBOL_file_name = 749,                /* file_name  */
  YYSYMBOL_opt_ext_version = 750,          /* opt_ext_version  */
  YYSYMBOL_MergeIntoStmt = 751,            /* MergeIntoStmt  */
  YYSYMBOL_opt_and_clause = 752,           /* opt_and_clause  */
  YYSYMBOL_opt_insert_column_list = 753,   /* opt_insert_column_list  */
  YYSYMBOL_opt_star_expr = 754,            /* opt_star_expr  */
  YYSYMBOL_matched_clause_action = 755,    /* matched_clause_action  */
  YYSYMBOL_opt_error_message = 756,        /* opt_error_message  */
  YYSYMBOL_matched_clause = 757,           /* matched_clause  */
  YYSYMBOL_opt_source_or_target = 758,     /* opt_source_or_target  */
  YYSYMBOL_not_matched_clause = 759,       /* not_matched_clause  */
  YYSYMBOL_matched_or_not_matched_clause = 760, /* matched_or_not_matched_clause  */
  YYSYMBOL_merge_match_list = 761,         /* merge_match_list  */
  YYSYMBOL_PragmaStmt = 762,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 763,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 764,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 765,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 766,               /* RenameStmt  */
  YYSYMBOL_opt_column = 767,               /* opt_column  */
  YYSYMBOL_SelectStmt = 768,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 769,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 770,         /* select_no_parens  */
  YYSYMBOL_select_clause = 771,            /* select_clause  */
  YYSYMBOL_opt_select = 772,               /* opt_select  */
  YYSYMBOL_simple_select = 773,            /* simple_select  */
  YYSYMBOL_value_or_values = 774,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 775,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 776,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 777,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 778, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 779,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 780,              /* with_clause  */
  YYSYMBOL_cte_list = 781,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 782,        /* common_table_expr  */
  YYSYMBOL_opt_on_key = 783,               /* opt_on_key  */
  YYSYMBOL_uk_aggr_list = 784,             /* uk_aggr_list  */
  YYSYMBOL_uk_aggr_el = 785,               /* uk_aggr_el  */
  YYSYMBOL_opt_materialized = 786,         /* opt_materialized  */
  YYSYMBOL_into_clause = 787,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 788,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 789,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 790,          /* all_or_distinct  */
  YYSYMBOL_by_name = 791,                  /* by_name  */
  YYSYMBOL_distinct_clause = 792,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 793,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 794,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 795,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 796,              /* sort_clause  */
  YYSYMBOL_sortby_list = 797,              /* sortby_list  */
  YYSYMBOL_sortby = 798,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 799,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 800,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 801,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 802,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 803,             /* limit_clause  */
  YYSYMBOL_offset_clause = 804,            /* offset_clause  */
  YYSYMBOL_sample_value = 805,             /* sample_value  */
  YYSYMBOL_sample_count = 806,             /* sample_count  */
  YYSYMBOL_sample_clause = 807,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 808,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 809,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 810,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 811,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 812,    /* opt_repeatable_clause  */
  YYSYMBOL_at_unit = 813,                  /* at_unit  */
  YYSYMBOL_at_specifier = 814,             /* at_specifier  */
  YYSYMBOL_opt_at_clause = 815,            /* opt_at_clause  */
  YYSYMBOL_select_limit_value = 816,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 817,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 818, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 819,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 820,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 821,            /* first_or_next  */
  YYSYMBOL_group_clause = 822,             /* group_clause  */
  YYSYMBOL_group_by_list = 823,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 824,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 825,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 826,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 827,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 828,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 829,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 830,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 831,            /* having_clause  */
  YYSYMBOL_qualify_clause = 832,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 833,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 834,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 835,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 836,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 837,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 838,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 839,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 840,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 841,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 842,              /* from_clause  */
  YYSYMBOL_from_list = 843,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 844,      /* from_list_opt_comma  */
  YYSYMBOL_alias_prefix_colon_clause = 845, /* alias_prefix_colon_clause  */
  YYSYMBOL_table_ref = 846,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 847,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 848,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 849,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 850,             /* pivot_header  */
  YYSYMBOL_pivot_value = 851,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 852,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 853,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 854,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 855,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 856,             /* joined_table  */
  YYSYMBOL_alias_clause = 857,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 858,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 859,        /* func_alias_clause  */
  YYSYMBOL_join_type = 860,                /* join_type  */
  YYSYMBOL_join_outer = 861,               /* join_outer  */
  YYSYMBOL_join_qual = 862,                /* join_qual  */
  YYSYMBOL_relation_expr = 863,            /* relation_expr  */
  YYSYMBOL_func_table = 864,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 865,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 866,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 867,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 868,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 869,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 870,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 871,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 872,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 873,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 874,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 875,             /* opt_Typename  */
  YYSYMBOL_Typename = 876,                 /* Typename  */
  YYSYMBOL_qualified_typename = 877,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 878,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 879,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 880,            /* ConstTypename  */
  YYSYMBOL_GenericType = 881,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 882,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 883,                  /* Numeric  */
  YYSYMBOL_opt_float = 884,                /* opt_float  */
  YYSYMBOL_Bit = 885,                      /* Bit  */
  YYSYMBOL_ConstBit = 886,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 887,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 888,         /* BitWithoutLength  */
  YYSYMBOL_Character = 889,                /* Character  */
  YYSYMBOL_ConstCharacter = 890,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 891,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 892,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 893,                /* character  */
  YYSYMBOL_opt_varying = 894,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 895,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 896,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 897,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 898,             /* year_keyword  */
  YYSYMBOL_month_keyword = 899,            /* month_keyword  */
  YYSYMBOL_day_keyword = 900,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 901,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 902,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 903,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 904,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 905,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 906,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 907,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 908,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 909,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 910,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 911,             /* opt_interval  */
  YYSYMBOL_a_expr = 912,                   /* a_expr  */
  YYSYMBOL_b_expr = 913,                   /* b_expr  */
  YYSYMBOL_c_expr = 914,                   /* c_expr  */
  YYSYMBOL_d_expr = 915,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 916, /* indirection_expr_or_a_expr  */
  YYSYMBOL_param_expr = 917,               /* param_expr  */
  YYSYMBOL_indirection_expr = 918,         /* indirection_expr  */
  YYSYMBOL_list_expr = 919,                /* list_expr  */
  YYSYMBOL_struct_expr = 920,              /* struct_expr  */
  YYSYMBOL_map_expr = 921,                 /* map_expr  */
  YYSYMBOL_func_application = 922,         /* func_application  */
  YYSYMBOL_func_expr = 923,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 924,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 925, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 926,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 927,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 928,            /* filter_clause  */
  YYSYMBOL_export_clause = 929,            /* export_clause  */
  YYSYMBOL_window_clause = 930,            /* window_clause  */
  YYSYMBOL_window_definition_list = 931,   /* window_definition_list  */
  YYSYMBOL_window_definition = 932,        /* window_definition  */
  YYSYMBOL_over_clause = 933,              /* over_clause  */
  YYSYMBOL_window_specification = 934,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 935, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 936,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 937,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 938,             /* frame_extent  */
  YYSYMBOL_frame_bound = 939,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 940, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 941,            /* qualified_row  */
  YYSYMBOL_row = 942,                      /* row  */
  YYSYMBOL_dict_arg = 943,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 944,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 945, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 946,                  /* map_arg  */
  YYSYMBOL_map_arguments = 947,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 948,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 949, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 950,                 /* sub_type  */
  YYSYMBOL_all_Op = 951,                   /* all_Op  */
  YYSYMBOL_MathOp = 952,                   /* MathOp  */
  YYSYMBOL_qual_Op = 953,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 954,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 955,              /* subquery_Op  */
  YYSYMBOL_any_operator = 956,             /* any_operator  */
  YYSYMBOL_c_expr_list = 957,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 958,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 959,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 960,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 961,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 962,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 963,            /* func_arg_expr  */
  YYSYMBOL_type_list = 964,                /* type_list  */
  YYSYMBOL_extract_list = 965,             /* extract_list  */
  YYSYMBOL_extract_arg = 966,              /* extract_arg  */
  YYSYMBOL_overlay_list = 967,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 968,          /* overlay_placing  */
  YYSYMBOL_position_list = 969,            /* position_list  */
  YYSYMBOL_substr_list = 970,              /* substr_list  */
  YYSYMBOL_substr_from = 971,              /* substr_from  */
  YYSYMBOL_substr_for = 972,               /* substr_for  */
  YYSYMBOL_trim_list = 973,                /* trim_list  */
  YYSYMBOL_in_expr = 974,                  /* in_expr  */
  YYSYMBOL_case_expr = 975,                /* case_expr  */
  YYSYMBOL_when_clause_list = 976,         /* when_clause_list  */
  YYSYMBOL_when_clause = 977,              /* when_clause  */
  YYSYMBOL_case_default = 978,             /* case_default  */
  YYSYMBOL_case_arg = 979,                 /* case_arg  */
  YYSYMBOL_columnref = 980,                /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 981, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 982,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 983,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 984,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 985,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 986, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 987,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 988, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 989,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 990,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 991,                /* target_el  */
  YYSYMBOL_except_list = 992,              /* except_list  */
  YYSYMBOL_except_name = 993,              /* except_name  */
  YYSYMBOL_except_name_list = 994,         /* except_name_list  */
  YYSYMBOL_except_name_list_opt_comma = 995, /* except_name_list_opt_comma  */
  YYSYMBOL_opt_except_list = 996,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 997,          /* replace_list_el  */
  YYSYMBOL_replace_list = 998,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 999,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 1000,        /* opt_replace_list  */
  YYSYMBOL_rename_list_el = 1001,          /* rename_list_el  */
  YYSYMBOL_rename_list = 1002,             /* rename_list  */
  YYSYMBOL_rename_list_opt_comma = 1003,   /* rename_list_opt_comma  */
  YYSYMBOL_opt_rename_list = 1004,         /* opt_rename_list  */
  YYSYMBOL_qualified_name_list = 1005,     /* qualified_name_list  */
  YYSYMBOL_name_list = 1006,               /* name_list  */
  YYSYMBOL_name_list_opt_comma = 1007,     /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 1008, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 1009,                    /* name  */
  YYSYMBOL_func_name = 1010,               /* func_name  */
  YYSYMBOL_AexprConst = 1011,              /* AexprConst  */
  YYSYMBOL_Iconst = 1012,                  /* Iconst  */
  YYSYMBOL_type_function_name = 1013,      /* type_function_name  */
  YYSYMBOL_function_name_token = 1014,     /* function_name_token  */
  YYSYMBOL_type_name_token = 1015,         /* type_name_token  */
  YYSYMBOL_any_name = 1016,                /* any_name  */
  YYSYMBOL_attrs = 1017,                   /* attrs  */
  YYSYMBOL_opt_name_list = 1018,           /* opt_name_list  */
  YYSYMBOL_param_name = 1019,              /* param_name  */
  YYSYMBOL_ColLabelOrString = 1020,        /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 1021,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1022,         /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 1023,    /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 1024,              /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 1025,    /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 1026,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1027,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1028,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1029,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1030,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1031,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1032,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1033,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1034,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1035,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1036,                /* set_rest  */
  YYSYMBOL_generic_set = 1037,             /* generic_set  */
  YYSYMBOL_var_value = 1038,               /* var_value  */
  YYSYMBOL_zone_value = 1039,              /* zone_value  */
  YYSYMBOL_var_list = 1040,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1041,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1042,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1043,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1044,              /* opt_tables  */
  YYSYMBOL_var_name = 1045,                /* var_name  */
  YYSYMBOL_ViewStmt = 1046,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1047         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  889
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   76782

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  538
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  510
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2258
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3812

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   771


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   535,   534,   523,     2,     2,
     528,   529,   521,   519,   532,   520,   530,   522,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   531,
     515,   517,   516,   533,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   526,     2,   527,   524,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   536,     2,   537,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     518,   525
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   524,   524,   540,   552,   561,   562,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   605,     9,
      18,    27,    36,    45,    54,    63,    72,    85,    87,    93,
      94,    99,   103,   107,   118,   126,   130,   138,   139,   143,
     150,   151,   156,   163,   173,   182,   191,   200,   209,   217,
     225,   233,   241,   250,   258,   266,   275,   284,   293,   302,
     319,   328,   337,   346,   356,   369,   384,   393,   401,   416,
     424,   434,   444,   451,   458,   466,   473,   484,   485,   490,
     494,   499,   504,   512,   513,   518,   522,   523,   524,     7,
      13,    19,    25,     9,    13,    44,    45,    46,    50,    51,
      55,    59,    60,    64,    70,    75,    76,    77,    78,     6,
      15,    25,    35,    45,    55,    65,    75,    85,    95,   106,
     117,   127,   140,   141,     9,    23,    29,    36,    42,    49,
      59,    63,    71,    72,    73,    77,    86,    95,   102,   103,
     108,   120,   125,   150,   155,   160,   166,   176,   186,   192,
     203,   214,   229,   230,   236,   237,   242,   243,   249,   250,
     254,   255,   260,   262,   268,   269,   273,   274,   277,   278,
     283,     7,    15,    23,    34,    42,    50,    68,    69,    72,
      76,     7,    14,    22,     9,    19,    29,    42,    43,     7,
      17,    27,    40,    41,    45,    46,    47,    51,    52,    57,
      61,    68,    72,     7,     7,    14,    31,    51,    55,    65,
      69,    75,    76,     9,    17,    29,    30,    34,    35,    36,
      41,    42,    43,    48,    52,    56,    60,    64,    68,    72,
      76,    80,    84,    88,    92,    97,   101,   105,   112,   113,
     117,   118,   119,     7,    16,     7,    16,    28,    29,     2,
      10,    17,    24,    32,    40,    51,    52,    53,    57,    58,
      59,     2,     7,    21,    36,    56,    57,    84,    85,    86,
      87,    88,    89,    93,    94,    99,   104,   105,   106,   107,
     108,   113,   120,   121,   122,   139,   146,   153,   163,   173,
     185,   193,   202,   220,   221,   225,   226,   230,   239,   262,
     276,   283,   288,   290,   292,   294,   297,   300,   301,   302,
     303,   308,   312,   313,   318,   325,   330,   331,   332,   333,
     334,   335,   336,   337,   343,   344,   348,   353,   360,   367,
     374,   386,   387,   388,   389,   393,   398,   399,   400,   405,
     410,   411,   412,   413,   414,   415,   420,   440,   466,   474,
     484,   485,   489,   493,   494,   495,   499,   503,   511,   512,
     517,   518,   519,   523,   531,   532,   537,   538,   542,   547,
     551,   555,   560,   568,   569,   573,   574,   578,   579,   585,
     596,   609,   623,   637,   651,   665,   688,   692,   699,   703,
     711,   716,   723,   733,   734,   735,   736,   737,   744,   751,
     752,   757,   758,     9,    19,    29,    39,    49,    59,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    95,    96,    97,
      98,    99,   100,   105,   106,   111,   112,   113,   118,   119,
     120,     7,    29,    30,    34,    35,    39,    39,    43,    51,
      58,    65,    71,    80,    87,    95,   101,   111,   112,   116,
     126,   127,   128,   132,   142,   142,   146,   147,     7,    16,
      25,    34,    43,    52,    64,    74,    84,    88,    95,    99,
     103,   113,   117,   124,   125,   130,   134,   138,   145,   149,
     156,   164,   172,     7,     1,    30,    49,    61,    62,    63,
      67,    68,    73,    77,    94,    95,    99,   100,   105,   106,
     110,   111,   115,   119,   124,   125,   130,   134,   139,   143,
     147,   151,   155,   159,   163,   167,   171,   175,   179,   183,
     187,   191,   195,   199,   211,   212,   213,   214,   215,   216,
     217,    47,    48,    52,    53,    54,    72,    73,    80,    88,
      96,   104,   112,   120,   131,   132,   159,   164,   172,   188,
     205,   223,   241,   242,   261,   265,   269,   273,   277,   287,
     298,   308,   317,   328,   339,   351,   366,   384,   384,   388,
     388,   392,   392,   396,   402,   409,   413,   414,   418,   419,
     433,   440,   447,   457,   458,   461,   475,   476,   485,   486,
     490,   491,   492,   511,   512,   513,   517,   528,   536,   541,
     546,   551,   556,   564,   572,   577,   582,   589,   590,   594,
     595,   596,   600,   607,   608,   612,   613,   617,   618,   619,
     623,   624,   628,   629,   645,   646,   649,   658,   669,   670,
     671,   674,   675,   676,   680,   681,   682,   683,   687,   688,
     692,   694,   710,   712,   717,   720,   725,   729,   733,   740,
     744,   748,   752,   759,   764,   771,   772,   776,   781,   785,
     789,   797,   804,   805,   810,   811,   816,   817,   821,   831,
     832,   837,   838,   843,   845,   847,   852,   872,   873,   875,
     880,   881,   885,   886,   889,   890,   915,   916,   921,   925,
     926,   930,   931,   935,   936,   937,   938,   939,   943,   956,
     963,   970,   977,   978,   982,   983,   987,   988,   992,   993,
     997,   998,  1002,  1003,  1007,  1018,  1019,  1020,  1021,  1025,
    1026,  1031,  1032,  1033,  1042,  1048,  1057,  1058,  1071,  1072,
    1076,  1077,  1081,  1082,  1086,  1097,  1104,  1111,  1119,  1127,
    1137,  1145,  1154,  1163,  1172,  1176,  1181,  1186,  1197,  1211,
    1212,  1215,  1216,  1217,  1220,  1228,  1238,  1239,  1240,  1243,
    1251,  1260,  1264,  1271,  1272,  1276,  1285,  1289,  1314,  1318,
    1331,  1345,  1360,  1372,  1385,  1399,  1413,  1426,  1441,  1460,
    1466,  1471,  1477,  1484,  1485,  1493,  1497,  1501,  1507,  1514,
    1519,  1520,  1521,  1522,  1523,  1524,  1528,  1529,  1541,  1542,
    1547,  1554,  1561,  1568,  1600,  1611,  1624,  1629,  1630,  1633,
    1634,  1637,  1638,  1643,  1644,  1649,  1653,  1659,  1680,  1688,
    1702,  1705,  1709,  1709,  1712,  1713,  1715,  1720,  1727,  1732,
    1738,  1743,  1749,  1754,  1761,  1768,  1778,  1779,  1783,  1785,
    1788,  1792,  1793,  1794,  1795,  1796,  1797,  1802,  1822,  1823,
    1824,  1825,  1836,  1850,  1851,  1857,  1862,  1867,  1872,  1877,
    1882,  1887,  1892,  1898,  1904,  1910,  1917,  1939,  1948,  1952,
    1960,  1964,  1972,  1984,  2005,  2009,  2015,  2019,  2032,  2040,
    2050,  2052,  2054,  2056,  2058,  2060,  2065,  2066,  2073,  2082,
    2090,  2099,  2110,  2118,  2119,  2120,  2124,  2124,  2127,  2127,
    2130,  2130,  2133,  2133,  2136,  2136,  2139,  2139,  2142,  2142,
    2145,  2145,  2148,  2148,  2151,  2151,  2154,  2154,  2157,  2157,
    2160,  2160,  2163,  2165,  2167,  2169,  2171,  2173,  2175,  2177,
    2179,  2181,  2183,  2185,  2187,  2189,  2194,  2199,  2205,  2212,
    2217,  2223,  2229,  2260,  2262,  2264,  2272,  2287,  2289,  2291,
    2293,  2295,  2297,  2299,  2301,  2303,  2305,  2307,  2309,  2311,
    2313,  2315,  2317,  2320,  2322,  2324,  2327,  2329,  2331,  2333,
    2335,  2340,  2345,  2352,  2357,  2364,  2369,  2376,  2381,  2389,
    2397,  2405,  2413,  2431,  2439,  2447,  2455,  2463,  2471,  2479,
    2487,  2491,  2507,  2515,  2523,  2531,  2539,  2547,  2555,  2559,
    2563,  2567,  2571,  2579,  2587,  2595,  2603,  2623,  2645,  2656,
    2663,  2677,  2685,  2690,  2700,  2709,  2730,  2732,  2734,  2736,
    2738,  2740,  2742,  2744,  2746,  2748,  2750,  2752,  2754,  2756,
    2758,  2760,  2762,  2764,  2766,  2768,  2770,  2772,  2776,  2780,
    2784,  2798,  2799,  2813,  2814,  2815,  2826,  2850,  2861,  2871,
    2875,  2879,  2886,  2890,  2897,  2904,  2905,  2906,  2907,  2908,
    2909,  2910,  2911,  2922,  2927,  2936,  2942,  2949,  2969,  2973,
    2980,  2987,  2995,  3003,  3014,  3034,  3070,  3081,  3082,  3089,
    3095,  3097,  3099,  3103,  3112,  3117,  3124,  3139,  3146,  3150,
    3154,  3158,  3162,  3172,  3181,  3203,  3204,  3208,  3209,  3210,
    3214,  3215,  3222,  3223,  3227,  3228,  3233,  3241,  3243,  3257,
    3260,  3287,  3288,  3291,  3292,  3300,  3308,  3316,  3325,  3335,
    3353,  3399,  3408,  3417,  3426,  3435,  3447,  3448,  3449,  3450,
    3451,  3465,  3466,  3469,  3470,  3474,  3484,  3485,  3489,  3490,
    3494,  3501,  3502,  3507,  3508,  3513,  3514,  3517,  3518,  3519,
    3522,  3523,  3526,  3527,  3528,  3529,  3530,  3531,  3532,  3533,
    3534,  3535,  3536,  3537,  3538,  3539,  3542,  3544,  3549,  3551,
    3556,  3558,  3560,  3562,  3564,  3566,  3568,  3570,  3584,  3586,
    3591,  3595,  3602,  3607,  3613,  3617,  3624,  3629,  3636,  3641,
    3649,  3653,  3659,  3663,  3672,  3683,  3684,  3688,  3692,  3699,
    3700,  3701,  3702,  3703,  3704,  3705,  3706,  3707,  3708,  3709,
    3710,  3711,  3712,  3713,  3723,  3727,  3734,  3741,  3742,  3758,
    3762,  3767,  3771,  3786,  3791,  3795,  3798,  3801,  3802,  3803,
    3806,  3813,  3814,  3815,  3825,  3839,  3840,  3844,  3855,  3856,
    3859,  3860,  3868,  3874,  3878,  3885,  3893,  3901,  3909,  3919,
    3920,  3925,  3926,  3930,  3931,  3932,  3936,  3945,  3953,  3961,
    3970,  3985,  3986,  3991,  3992,  4002,  4003,  4007,  4008,  4012,
    4013,  4016,  4032,  4040,  4048,  4058,  4059,  4063,  4067,  4073,
    4075,  4080,  4081,  4085,  4086,  4089,  4093,  4094,  4098,  4099,
    4102,  4103,  4104,  4107,  4111,  4112,  4116,  4117,  4119,  4120,
    4121,  4131,  4132,  4136,  4138,  4144,  4145,  4149,  4150,  4153,
    4164,  4167,  4178,  4182,  4186,  4198,  4202,  4211,  4218,  4256,
    4260,  4264,  4268,  4272,  4276,  4280,  4286,  4303,  4304,  4305,
    4308,  4309,  4310,  4313,  4314,  4315,  4318,  4319,  4322,  4324,
    4329,  4330,  4333,  4337,  4338,     7,    18,    19,    23,    24,
      25,    26,    27,    28,     7,    26,    50,    73,    80,    85,
      86,    87,    88,     8,    33,    62,    66,    67,    72,    73,
      78,    79,    83,    84,    89,    90,     7,    16,    25,    34,
      43,    52,     5,    12,    22,    23,     7,    15,    26,    27,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
       7,    19,    33,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    92,    93,    94,    99,   100,   105,
     109,   117,   118,   123,   124,   125,   131,   136,   144,   145,
      10,    16,    22,    28,    34,    44,    45,    53,    64,    76,
      84,    95,   101,   105,   109,   124,   131,   132,   133,   137,
     138,     7,    17,    26,    35,    46,    47,    49,    50,    53,
      54,    55,     8,    22,    36,    48,    56,    70,    71,    72,
      73,    74,    87,    88,    93,    94,    98,    99,     7,    18,
      31,    35,    42,    53,    54,    60,    61,     9,    19,     7,
      16,    25,    37,    44,    51,    60,    61,    65,    66,    77,
      78,    82,    89,    93,   100,   105,     2,     7,    12,    17,
      22,    31,    38,    48,    49,    56,     3,    10,    17,    24,
      32,    39,    46,    53,    60,    69,    69,    71,    71,    73,
      73,    75,    76,     6,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    11,    24,    37,    54,    55,    56,    61,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "SINGLE_ARROW", "DOUBLE_ARROW", "SINGLE_COLON",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC",
  "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE",
  "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH",
  "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST",
  "CATALOG_P", "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P",
  "ERROR_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE",
  "EXTENSION", "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY",
  "FETCH", "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE",
  "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD",
  "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LAMBDA", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED",
  "MACRO", "MAP", "MAPPING", "MATCH", "MATCHED", "MATERIALIZED",
  "MAXVALUE", "MERGE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLENNIA_P", "MILLENNIUM_P", "MILLISECOND_P", "MILLISECONDS_P",
  "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
  "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
  "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER",
  "PARTIAL", "PARTITION", "PARTITIONED", "PASSING", "PASSWORD", "PERCENT",
  "PERSISTENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY",
  "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE", "READ_P", "REAL",
  "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING",
  "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCOPE", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET",
  "SECURITY", "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE",
  "SERVER", "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
  "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SORTED", "SOURCE_P",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID",
  "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TARGET_P",
  "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME",
  "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
  "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P",
  "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE",
  "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNPACK", "UNPIVOT", "UNTIL",
  "UPDATE", "USE_P", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIABLE_P", "VARIADIC",
  "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL",
  "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE",
  "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'",
  "'.'", "';'", "','", "'?'", "'$'", "'#'", "'{'", "'}'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterDatabaseStmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "qualify_list", "qualify_el", "qualified_column", "qualifiedColumnDef",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "generic_opt_arg", "generic_opt_elem",
  "generic_opt_list", "opt_attach_options", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CommentOnStmt", "comment_value",
  "comment_on_type_any_name", "qualified_name", "ColId", "ColIdOrString",
  "Sconst", "indirection", "indirection_el", "attr_name", "ColLabel",
  "CopyStmt", "copy_database_flag", "copy_from", "copy_delimiter",
  "opt_using", "opt_as", "opt_program", "copy_options", "opt_oids",
  "copy_opt_list", "opt_binary", "copy_opt_item", "copy_file_name",
  "CreateStmt", "ConstraintAttributeSpec", "def_arg",
  "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
  "ColConstraint", "ColConstraintElem", "GeneratedColumnType",
  "opt_GeneratedColumnType", "GeneratedConstraintElem",
  "generic_option_elem", "key_update", "key_actions", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "regularColumnDef", "generatedColumnDef",
  "columnDef", "def_list", "index_name", "TableElement", "def_elem",
  "opt_definition", "OptTableElementList", "columnElem", "opt_column_list",
  "ColQualList", "key_delete", "reloption_elem", "columnList",
  "columnList_opt_comma", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "CreateAsStmt", "opt_with_data", "create_as_target",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", "CreateFunctionStmt", "table_macro_definition",
  "table_macro_definition_parens", "table_macro_list_internal",
  "table_macro_list", "macro_definition", "macro_definition_list",
  "macro_alias", "param_list", "MacroParameterList", "MacroParameter",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
  "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "create_secret_generic_opt_arg",
  "create_secret_generic_opt_elem", "create_secret_generic_opt_list",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "create_type_value",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "opt_storage_drop_specifier", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "MergeIntoStmt", "opt_and_clause",
  "opt_insert_column_list", "opt_star_expr", "matched_clause_action",
  "opt_error_message", "matched_clause", "opt_source_or_target",
  "not_matched_clause", "matched_or_not_matched_clause",
  "merge_match_list", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_on_key",
  "uk_aggr_list", "uk_aggr_el", "opt_materialized", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_value", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "at_unit", "at_specifier", "opt_at_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma",
  "alias_prefix_colon_clause", "table_ref", "opt_pivot_group_by",
  "opt_include_nulls", "single_pivot_value", "pivot_header", "pivot_value",
  "pivot_value_list", "unpivot_header", "unpivot_value",
  "unpivot_value_list", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "param_expr", "indirection_expr",
  "list_expr", "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "columnref_opt_indirection",
  "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "except_name", "except_name_list",
  "except_name_list_opt_comma", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "rename_list_el", "rename_list", "rename_list_opt_comma",
  "opt_rename_list", "qualified_name_list", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "func_name", "AexprConst", "Iconst", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabelOrString", "TransactionStmt",
  "opt_transaction", "opt_transaction_type", "UpdateStmt",
  "UpdateExtensionsStmt", "UseStmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "VariableShowStmt",
  "describe_or_desc", "show_or_describe", "opt_tables", "var_name",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3318)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2184)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7581,    -6,   146, -3318, -3318,   274,    -6, 52408, 69160,   184,
      -6,   188,  2066, 54938, -3318, -3318, 49354,  9817,    -6, 58980,
   76236,   507,   585, 33635,   688, 59489, -3318, -3318, -3318, 69160,
   58980, 59998,    -6,   353, 69669, -3318,    -6, 36691, 55447,   488,
   -3318, 58980,    60,   440, 60507, 58980,  3496,  1128,   477, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,   639, -3318, -3318, -3318, -3318,   158,
   -3318,   942, -3318, -3318, -3318, -3318, -3318,   190, -3318,   779,
     200, 33635, 33635,   122,   634, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, 36181, -3318, -3318, -3318, -3318,
   70178, 61016, 58980, 61525, 55956, 62034, -3318,   891,   843,  1206,
     869,   194, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,   196, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318,   713, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318,   199, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318,   335,   211, -3318, -3318, -3318,   726, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318,  1010, -3318, -3318,  1112,
    3525, 58980,   644,   673,   899, -3318, 62543, -3318,   879, -3318,
   -3318,   956,   905,  1097, -3318, -3318, 56465, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, 49863, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318,  1048, -3318, -3318,   875, -3318,
     215, -3318, -3318,   925,   862, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,   976, -3318, -3318, -3318,   981, 70687,
   63052, 63561, -3318,   846,   861,  1597,  9130, 76254, 32615, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318,   639, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, 59489, 69160,   904,   936,  1228,   940, 34653,
     987, 37201,  1002,  1041,  1229,  1061,  1070,  1078,  1083,   440,
   33125,   963,   335,  1484, 64070, 64070,    -3, 34144,  4662, -3318,
   64070, 64579, -3318,   930, -3318,  1206, -3318, -3318, -3318, -3318,
     425,  1095, -3318, 65088, 65088, 65088,   986,  1334, 65088, -3318,
   -3318, -3318,  1020, -3318, -3318,  1279, 20581, 20581, 71196, 71196,
    1206, 71196,  1136, 71196, -3318, -3318,    64,   869, -3318,   335,
   -3318, -3318,   122, -3318, -3318, 55447, -3318, -3318,   343,  1480,
   20581, 58980,  1109, -3318,  1138,  1109,  1135,  1156,  1162, -3318,
    7581, -3318, 58980,  1534,  1419,  1499, 56974, 59489,   365,   365,
    1667,   365,   675,   998,  2718,  3855, -3318,  1170, -3318,  1204,
    1322,  1578,  1245,  1538, -3318, -3318,  1619,  1416,  1626,  1117,
    1442,  1649,  6087,  1652,  1130,  1654,  1379,  1664,  1725,  1803,
      65, -3318, 20581, 50372,   335, -3318, 12057, 20581, -3318, -3318,
   -3318,  1421, -3318, -3318, -3318, -3318, -3318, 58980, 69160,  1317,
    1335, -3318, -3318, -3318, -3318,  1983,  1582, -3318, -3318, -3318,
    1384, 65597, 66106, 66615, 67124, 67633, 71705,  1776, -3318, -3318,
    1717, -3318, -3318, -3318,  1376, -3318, -3318, -3318,   405, 72214,
    1718,  1353,   268, -3318,  1730,   272, -3318,  1733,  1594, 14707,
   -3318,  1529, -3318, -3318, -3318,   440, -3318, -3318, -3318,   605,
   -3318, -3318, 46488, 76254,  1452,  1363, -3318, 20581, 20581,  1366,
    6265, 64070, 64579, 20581, 58980, -3318, 20581, 25921,  1371, 20581,
   20581, 12591, 20581, 30605, 64070,  4662,  1372, -3318,   626, -3318,
   58980,  1375, -3318,  1466,  1466,   353, 33635,  1682, 33125,  1466,
    1860,  1466, -3318,  1009,  1681,  1605, -3318, 33635,  1605,  1068,
    1381,  1687,  1605, -3318,   677,  1692,  1860, 37710,  1392, -3318,
    1466,  1622, -3318, -3318, 20581, 14707, 57483,  1884, -3318, -3318,
   -3318, -3318,  1690, -3318, 69160,  1398, -3318, -3318, -3318, -3318,
   -3318, -3318,   -86,  1927,   159,  1930, 20581,   159,   159,  1402,
     214,   214, -3318,  1608,  1408, -3318,   219,  1412,  1413,  1937,
    1938,   186, 58980,   165,   973,   159, 20581, -3318,   214,  1420,
    1939,  1422,  1944,   156,   246, -3318,  1423,   220, 20581, 20581,
   20581,   316, 20581, 10989, -3318, 50372,  1943, 58980,   136, -3318,
     335,  1426,  1206, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
    1429, -3318,   209,  4274, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318,  1462, -3318, -3318, -3318, -3318,  1651, 20581, -3318,
   -3318,  1428,  1682, -3318,   225, -3318, -3318,  1682, -3318, -3318,
   -3318, -3318, -3318,   257, -3318,  1856, 20581, 20581, -3318,   335,
   -3318, 72723, -3318, -3318, -3318, -3318, -3318, -3318,   671, -3318,
     639,   555, 47858,  1432,  1436,  1109, 58980, 58980,  1500, -3318,
   -3318, -3318, -3318,  1138, 55447,   195,  1744, 55447,   174,  1573,
      91, -3318, -3318,   122,   122, 15775,   780,   216,    77, 16309,
   21115,  1800,  1679,   265,   808,  1809, -3318,  1699,  1912, 25921,
   20581, 20581,   675,   998, 20581, -3318, -3318, 58980, -3318,  1751,
   69160,  1565, 58980, 52917,   969,   971,  1473,  1569,    11,   822,
    1914, -3318,  1481, -3318,  1574, 58980, 75253,   238, -3318,  1956,
     238,   238,   295,  1958,  1580,   275,  1753,    52,   409,  2653,
   -3318,  1481, 55447,   160,  1345,  1481, 58980,  1586,  1409,  1481,
    1725,  1206, 69160,  1502, -3318, -3318, 43933,  2008, -3318, -3318,
   -3318,   180, 14707, -3318,  1256,  1262,  1302,  1324, -3318,   414,
     227,  1414,  1437, 14707,  1478,  1506,   192,  1514,  1522,  1554,
    1559,  1566,  1583,  1604,  1666,   149,  1689,  1721,  1723,  1726,
    1732,  1741, -3318,  1745,   198,  1748,   239,  1423, 14707,  1755,
   -3318,   208, -3318,   155, 47858,    32, -3318, -3318,  1765, 48113,
   -3318,  1804,  1595,  1600, 69160,  1544, 58980,  1043,  1658,  1883,
    1942, 58980,  1766,  2653,  1768,  1517,  2009,  1771,  2011,  1775,
    1335,  1780,  1528,  1784, -3318,  1865, -3318, 73232, 50372, -3318,
   -3318, -3318, -3318, -3318,  1918,  1899, 69160, 50372,  1546, -3318,
   -3318, 69160, -3318, 58980, 58980, -3318, 58980, 69160, -3318,   716,
   47858,  2055,  1468, 76254, 51390, -3318, -3318, -3318, -3318,   789,
     910, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
    1206, 50372, -3318,  4438, 47012,  1548, 20581, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,  1549,  1907,
   -3318, -3318,  6418,  1553, 47047,  1555, 25921, 25921,   335,  1801,
   -3318, -3318, 25921,  1556, 51899,  5839,  1551,  1558, 47065, 16843,
   20581, 16843, 16843, 47139, -3318,  1562, 47412, 64070,  1575, 58980,
   30093, -3318, -3318, -3318, 20581, 20581,  4662, 57977,  1606,  1572,
   -3318,  1581,  1466, -3318, -3318, 33635, -3318,  1870, 33635, -3318,
   -3318,  3063, -3318, 33635,  1885, 20581, 33635, -3318,  1826,  1828,
    1588, 33635,  1466, 58980,  1590, 58980, -3318, -3318, 47858, -3318,
    1587,   742,  1591, -3318, -3318, -3318, -3318, -3318, -3318,  1643,
   -3318, -3318,  1643,  1643, -3318, -3318, -3318, -3318,  1596,  1596,
    1598, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,  1601,   973, -3318,  1643, -3318,  1596,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, 75253, -3318, -3318,
   -3318, -3318,   561,   758, -3318,  1602, -3318, -3318, -3318, -3318,
   -3318,  1609, -3318,  1592,  2085, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,  7902,   751,  1596,  3930, -3318, -3318,
   20581, 20581, -3318, -3318,  1611, 47858,  1648, -3318, -3318, 20581,
   20581, -3318, -3318, -3318, -3318,  2132, -3318,   191, 20581,  1643,
    1643, -3318,  6901, -3318, 43310, 17377,  1706,  1710,  2132, -3318,
    2132, -3318, 20581,  6901,  2138,  2138,  1624, 38219, -3318,  1789,
   47584, -3318,  1627,  1925,  7032,  1623, -3318, -3318,  2140, -3318,
    1628,  1631, 20581, 44961,   187,   335,   335, 20581, -3318,  2132,
   20581,  8776,  8776, -3318,   218, 57483, 20581, 20581, 20581, 20581,
   20581, 20581, 20581, 20581, 48845,  1731,   177, 69160, 20581, 20581,
   29579,  1064, -3318, 20581,  1887, -3318,  1642, 20581,  1735,  1077,
   20581, 20581, 20581, 20581, 20581, 20581, 20581, 20581, 20581, -3318,
   -3318, 29065,   254,   565,  1995,  2014,   -21,   790, 20581,  2006,
   12057, -3318,  2006, -3318, -3318, -3318, -3318, -3318,   226, -3318,
   -3318,  1587,  1587, 69160, -3318, 58980,   343, 54429, 20581, -3318,
   -3318,  1659,  1665,  1952,  2155, -3318,  1734, -3318, -3318, 58980,
    1737, -3318, 41782, 59489, 59489, -3318,  1977, -3318,   345,  1668,
   -3318,  5180,  1928,  1977,   122, -3318, -3318, 26455,  1807,  1969,
    1915, -3318, -3318,  1893,  1896, -3318,  1686, 48254, 21649, 21649,
   -3318,  1018, 47858,  1425, -3318, -3318, -3318, -3318, -3318, -3318,
      99, -3318, 58980,   499, 38728, -3318,  1688,   115, -3318,  4441,
    2036,  1999,  1800,   808,  1693, -3318, -3318,  1864, 69160,  1568,
    1701, 73741, 58980,  2001,  1953,  2003,   -47, 57483, -3318,  1705,
   -3318, -3318, -3318, 58980, 69160, 68142, 74250, 50881, 58980,  2177,
    2183, 50372, -3318, -3318,  2184,  2185, -3318, -3318, 58980,  1063,
   58980,  7428, -3318, -3318, -3318, -3318,   238, -3318, -3318, -3318,
   -3318, -3318, 69160, 58980, -3318, -3318,   238, 69160, 58980,   238,
   -3318,  1716, 58980, 58980, 69160, 58980,  1743, 58980, 58980,  1206,
    1803, -3318, 50372, -3318, -3318, 22183,    33,    33,  1946,  1962,
    1964,  1728, 13125,   155, -3318, 20581, 20581,  1055,   308, 69160,
    1919, -3318, -3318,   831,  1965,   249, -3318,  1785, 58980, 58980,
   58980, 58980, 58980, 69160, 58980,  1948, -3318, -3318, -3318, -3318,
   -3318,  1727,  2106,  2653, -3318,  2115, 53426,   686,  2987,  2116,
   58486,  2118,  1788,  2120, 31623, -3318, -3318,  1747, -3318, -3318,
    1749,  2243,  2134,  2286,  1764,  2015, -3318, -3318,  2004, -3318,
   69160,  2293, -3318,   268, -3318, 50372, -3318,   272, -3318,  2010,
     283, -3318, 14707, 20581, -3318, -3318, -3318, -3318, -3318, -3318,
    1363, -3318,   844, 20581, -3318, -3318,  2257,  1206,  2257,   563,
   -3318, -3318,  2257, -3318,  2241,  2257, -3318, 57483, -3318,  7073,
   -3318, 20581, 20581, -3318, 20581,  2135, -3318,  2295,  2295, 57483,
   25921, 25921, 25921, 25921, 25921, 25921,   234,  1420, 25921, 25921,
   25921, 25921, 25921, 25921, 25921, 25921, 25921, 26989,   803, -3318,
   -3318,   852,  2272, 20581, 20581,  2150,  2135, 20581, -3318, 57483,
    1799, -3318,  1802,  1805, 20581, -3318, 57483, -3318, 58980,  1806,
   -3318, -3318, -3318,    24,  1808,  1813, -3318, -3318,  1682, -3318,
     800,   855, 58980,  2092,  2703,  3843, -3318, -3318, 20581,  2147,
   -3318,   393, -3318,  3063, 33635, -3318, 20581,  1814, -3318, -3318,
   33635,  2163, -3318, -3318, -3318, 39237,  3063, -3318, 57483,   859,
   -3318, 58980, 57483,   867, 20581, -3318, 14707,  2334, 57483,  2305,
   69160, 69160,  2343,  1822,  1830,  1822,  2132,  1921, -3318,  1924,
    1931,  1933, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, 57483, -3318, -3318, -3318, -3318,   171, -3318, -3318,
   -3318, -3318,  1823,  1831, 20581, 20581,   110, -3318,  7681,  1836,
    1839, 20581, 47661, -3318,  1827, -3318,  1837, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318,  1845, -3318,  1847, -3318,  1848,  1868,
    1878,  1862,  1867,  8016, 20581, 58980, -3318,  1871, 22717,  2039,
   58980, -3318, -3318, 20581, 20581, 58980, -3318, 47858,  2253, -3318,
    1875,  1877,  8069, -3318, -3318, -3318,   221,   864,  3696,   790,
    3962,  3962,  3962,  6901, -3318, -3318, -3318,  1901, -3318, 25921,
   25921, -3318,  4933,  3057, 10989, -3318, -3318, -3318, -3318,  2236,
   -3318,   771, -3318,  1886, -3318, -3318,  3110, -3318, 43310, 48295,
   20581,   193, -3318, 20581, 29579, 20581,  1973,  3962,  3962,  3962,
     258,   258,   221,   221,   221,   864,   790, -3318, -3318, -3318,
    1888, 20581, 50372, -3318,  1890,  1892,  2268,  1422, 20581, -3318,
   -3318, 33635,  1606,    32,  1606,  2132,  8776, -3318,  1138, -3318,
   -3318,  1138, 47858, 58980, -3318,  1900,   680, 33635,  1949,  2388,
    2370, 33635, 69160, -3318, -3318,  1903,  2006,  1920,  1959,  1959,
   -3318, -3318, -3318, -3318,  1926, 20581,  2576,  1926, -3318,  1977,
      20,  2144,   927,   927,  1018,  2146, -3318, -3318,  1967, -3318,
   -3318, -3318, 20581, 15241,  1439, -3318,  1451, -3318, -3318, -3318,
   -3318, -3318,  1916, -3318,  2197, -3318, 58980, -3318, -3318, 25921,
    2386, 20581, 39746,  2387,  2178, -3318, -3318, -3318,  2013, -3318,
    2016,  1481, 20581,  2170, -3318,   173,  1929,  2304,   399,  2255,
   69160, -3318, -3318, -3318,   333,   356, 50372,  1705, -3318, -3318,
     525,  2307,   283,  2308,   283, 50372, 50372, 50372,   873, -3318,
   -3318, -3318,  1206, -3318, -3318, -3318,   -71,   889, -3318,  1936,
    1950, -3318, -3318, -3318,  2025,  1657,  2653,  1481, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318,   203,  1894,  1481,  2026, -3318,
    2030, -3318,  2031,  1947,  1481, -3318, -3318,  1803,  1502,   911,
   17911, 47858,   164,   155,   155,   155, -3318, -3318, -3318, 14707,
   -3318,  1951, 47858, 47858,   172, -3318, -3318, -3318, -3318,  1957,
   -3318,   176, -3318, 69160, -3318, -3318, -3318,  1919,  1942, 58980,
    2653,  1960,  2431,  2435,  1335,  1528,  1865, -3318,  2125,    43,
   69160, 58980, 58980, 58980, 53935, -3318, -3318, -3318,  1963,  1945,
   -3318,    16,  2186,  2194, 58980,  1991, 58980,  1966, -3318, -3318,
   58980,  1968,  2450, 58980, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,   916,
   -3318, 57483,  1528,  1528, 18445, 69160, -3318, 50372,  2339, 58980,
    1899, -3318, -3318, -3318, -3318, 69160, -3318, -3318, 47858, -3318,
   -3318, 50372, -3318, 47858, -3318,  1206, -3318,  1206,  2210, 69160,
   45470,  1206, 45979,  1206,  1970, -3318, 47858,  8381, 47858,  2150,
   -3318,   247,  2295,  2727,  2727,  2727,  5161,  2329,   243,  1979,
    2727,  2727,  2727,   288,   288,   247,   247,   247,  2295,   803,
     930, 51899,  1980, -3318, 47858, 47858, -3318, -3318,  1976, -3318,
   -3318, -3318, -3318,  1981,  1982, -3318, -3318, -3318, -3318, 69160,
     178,  1606,   488,   488,   488,   488, -3318, 58980, 58980, 58980,
   47858,  2449,  2324, -3318, -3318,  2499,  1985, -3318,  3063, 47858,
   58980, -3318, 28037, 58980, -3318,  2347, -3318,  2437, -3318, 58980,
     917, -3318, -3318, -3318,   923,  1994,  1822, 57483,   949,   950,
   -3318,   142,  2132,  1992,  1561,  1039,   915,  1448, -3318, 55447,
   -3318, -3318,  1996, 47713, 20581, -3318,  2380, -3318, -3318, -3318,
   47858, 20581, 20581, -3318, 43310, -3318, -3318, -3318, -3318,   -54,
     -54, -3318,  8655,  1871,  1997,  2002, 58980, 10989, 47766, -3318,
   40255, -3318,   109,  8852, 47858, -3318,  1789, -3318, -3318,  8776,
   20581,  4578,  5007, 20581,  2005, 20581,  2354, -3318, -3318,  2007,
   -3318, -3318, 57483, 20581,  2017,  3349, 25921, 25921,  4348, -3318,
    4514, 20581, 10989, -3318, 43975,  2511,  2012,  1946, 18979, -3318,
    2226,  2018, -3318,  2147,   155,  2147,  2020, -3318, -3318, -3318,
   51899, -3318,  2279,  2019, -3318, 20581,  2169, 69160,   161,  2364,
    3063,   967, -3318,   335, 41782,  1949, 20581, -3318, -3318,   260,
   -3318, -3318,  2023, -3318,  1926, -3318, -3318, -3318,  2246, -3318,
   -3318, -3318, 58980, -3318,  2024, -3318, 38728,  2356, 11523, -3318,
   38728, 58980, 69160, 58980,  9186,  2383, -3318, 69160, 69160, 69160,
   -3318, 69160,  2022,  2027,   738,  2029,   391, -3318,  2518, -3318,
   -3318,   738,  2365,   263,  1968,   275,  3231,   492, -3318, -3318,
   -3318,  2094, 58980, -3318, 69160, -3318, -3318, -3318, -3318, -3318,
   50881, -3318, -3318, 42800, 50372, -3318, 50372, 20581, 20581, 58980,
   58980, 58980, 58980, 69160, 58980, 58980, 58980, 58980, 58980,  1502,
   -3318, -3318, 20581, 20581, -3318,  2032,  2033,  2035,  1946, -3318,
     248, -3318,  2028, -3318, -3318, 20581, -3318,   409, -3318, -3318,
     176,  2040, -3318, 53426,  3525, 58486,  1788, -3318,  1749,  2041,
    1942,   650, 68651,   975,  2653,  2042,  2514, -3318, -3318, -3318,
     686, 53426, -3318, -3318, -3318,  2465, -3318,   846,   244, -3318,
    2519,  1700, -3318,  1335, -3318,  3525,  1528, -3318, 32117,  1824,
   -3318, -3318,  2526, -3318,  2530,  3525, 47858,  1865, 20581, -3318,
     997, 69160,  2105, -3318,   283, -3318, -3318, -3318, 69160,  2043,
   -3318,  2043, -3318, -3318,  2043, -3318, -3318, -3318, -3318, 25921,
    2400,  2048, 57483, -3318, -3318, 58980, -3318, -3318, -3318,  1008,
    2049,  2147, 58980, 58980, 58980, 58980, -3318, -3318, -3318, 19513,
   20581,  2091, 20581, -3318, -3318,  2059, 13659,  2389, -3318, 27523,
   -3318, -3318,  2060, 39237, 69160, -3318, -3318, -3318, -3318,  2132,
   -3318, -3318, 69160, -3318, -3318,  2068,  2076, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318, 20581, 47858, -3318, 47858,
   -3318, -3318, -3318, -3318, -3318, 58980, -3318, -3318,  6984, -3318,
    2072,  2077, 69160, 58980,   130, -3318, 20581, -3318,  2039, -3318,
     369, 20581, 20581,  4933, -3318, 48343, 20581, 57483,  1014,  4933,
     380, 20581,  5263,  7007, 20581, 20581,  4567,  9381, -3318, 23251,
   14173, -3318,  2078, 20581,  9516, 42291, -3318, 33635,  2324,  2081,
    2324,  1206,   335,  1016, -3318,  2564, -3318, -3318,  3930, 47858,
   20581, -3318, -3318, -3318, -3318,  2141,   410, 35671,  2320, -3318,
    2130,  2102, 69160, -3318,  2169, 47858, -3318, -3318, 43310, -3318,
   -3318, -3318, -3318, -3318,  2560,  2353,  2097,  2098, -3318,  1367,
   -3318, -3318, -3318, 69160,  2099, -3318,  2101,   738, -3318, 69160,
    2142, -3318,   286,  2424,   150, -3318, 20581, -3318,  2517,  2596,
    2518,  2111, 69160, 58980, 25921, -3318,   292,   228, -3318,  2412,
   58980,  2142,  2553, -3318, -3318, -3318,   391, -3318,  2453,  2358,
   -3318,   238, -3318, 20581,   391,  2359,   309, 69160, -3318, -3318,
    4588, -3318, 57483,   283,   283, -3318,  1591,  2121,  2127,  2129,
    2131,  2133,  2137,  2148,  2149,  2152,  2153,  2154,  2158,  2159,
    2160,  2161,  2162,  2165,  2167,  2174,  2175,  1601,  2176, -3318,
    2180,  2023,  2181,  2187,  2188,  2189,  2190, 74759,  2191,  2192,
    2193,  2195,  1602,  2198,  2200,   789,   910, -3318, -3318, -3318,
   -3318,  2202, -3318, -3318, -3318,  1353,  2143, -3318,  2119,  1022,
   -3318, -3318,  2222, -3318,  2224, -3318, -3318, -3318, -3318, -3318,
   -3318,  2145,  2172, -3318, -3318, -3318,   155,  2139,  2171, 69160,
    9611,  1363,   111, 69160,  2179,  1991, -3318,  2630, 50372,   718,
    2397,  2196,  1788, -3318, 53426,  3124,   271,  2194, 57483, -3318,
     324,  1991, -3318,  2599, 58486, -3318,  2205,  2204,  1788,  2223,
   -3318,  1749, -3318, -3318, 20581, 20581,  2288, 20581,   140, -3318,
    2209, -3318, 47858, -3318, 50372,  2421, 69160,  2211, -3318,  2043,
    6267, 25921, 57483,  1027,  1032, -3318,  2731,  2381,  2324, -3318,
   -3318, -3318, -3318, -3318,  2216,     9,  2217, 10455,  2214, -3318,
   -3318, -3318, -3318, -3318, -3318, 47858, 47858, 69160,  2408, 47858,
   -3318, -3318,  2219,  2228, 40764,  2693,  2229, -3318, -3318,  2558,
   -3318, 31114, -3318,  1822,  2235,  1822, 57483,  1822, -3318, -3318,
   47858,  1871, 20581, -3318, -3318, -3318,  2231,  2238, 69160, 44245,
    2570, -3318,  4933,  4933, 48343,  1033, -3318,  4933, 20581, 20581,
    4933,  4933, 20581, -3318, 20047,   261, -3318,  1046, -3318,  9914,
   -3318, 75747, -3318, -3318,  2091,  1206,  2091, -3318, -3318, 51899,
   64070,  2239,  2233, -3318, -3318, -3318,  2297, -3318, -3318,  1076,
    2678,  2169,   204, -3318, -3318,  2130,  2169, 20581, -3318, -3318,
    2242, 38728, -3318, -3318, -3318, -3318, 38728,   738, -3318,  2419,
    2142,  2247, -3318, -3318, -3318, -3318, -3318, -3318, 43827, -3318,
      79, 20581, -3318,  1296,  5161, -3318, -3318, -3318, -3318,  2142,
    1335, -3318, 58980,  2733,  2624, -3318, -3318, 47858, -3318, -3318,
    2132,  2132, -3318, -3318,  2437, -3318, -3318,  2252,  1353,   344,
   42800, -3318, -3318, 58980, 58980, -3318, -3318,  2254, -3318, -3318,
   -3318, -3318, -3318, -3318,   409,  2661,  1100,   686, -3318,  3525,
    1105, 58980,  2633, 53426,  2748,  2263, 58980,  1991,  1040,  1040,
   -3318,  2418, -3318,  2422, -3318, -3318, -3318, -3318,  1206,  2753,
     256, -3318, 47858, 47858,  1408, 50372, -3318, 58980, -3318, -3318,
   35162,  6267,  1107, -3318, -3318,  2270,  2273, -3318,  2091, 20581,
    2274, 20581, -3318, 23785,  2759,  2275, -3318, 20581,  2338, 28551,
   -3318, 20581, -3318, 58980, 64070,  2278, 64070, -3318, -3318, -3318,
   -3318, 58980, -3318, -3318, -3318, 20581, -3318,  4933,  4933,  4933,
   20581, 20581, -3318, -3318, -3318, -3318,  2495,  2408, -3318,  2408,
   -3318, -3318, -3318, 20581,  3525,   335,  4826, 69160,     0, -3318,
    2774,  2559, -3318, -3318, 47858, -3318, -3318, -3318, 58980, -3318,
   50372, -3318,   738,   398,  2285, 20581, 43845,  2529, -3318, -3318,
    2565, -3318,  2623, -3318,  2355,   394,  2372, -3318, -3318, -3318,
   -3318,  1363,  1206,  1788,  2194,  2223, -3318,  2296, 58980,  3525,
     686,   846, -3318, -3318, -3318, -3318, -3318, -3318, -3318, -3318,
   -3318, -3318, -3318, -3318, -3318, -3318,  3525,  2746,  2527,  2755,
   -3318,  1133,  2105, 20581,   121, -3318,  1155,  2747, -3318, -3318,
    2823,  2408,  2309, 23785,  2310, -3318,  2306, 69160, 47858,  2456,
   -3318, -3318,  2311, -3318, -3318, 20581, -3318, -3318, 44456,  2314,
    2315,  2783,  1946,  2338,  2338, -3318,   410, -3318, -3318,  2750,
   35162,  2712, 20581,  2411,  2788,  1335,   738,  2332,  1160, -3318,
   -3318, -3318, -3318, -3318,  2653, -3318, 43880,  2578,   693,  2567,
    2285, 20581, -3318,  2409, -3318, -3318, -3318,  2818, -3318, -3318,
   53426,  2335,  2223,  2194,  1991,  2223,  2566, -3318,  2568, -3318,
    2337, 43898, 69160, 69160,  1788, 35162, 69160,  2340,  2338, -3318,
    2345, -3318, -3318, -3318, 30093, -3318,  2346, -3318, -3318, -3318,
   20581,   647, -3318, -3318,  2396, 58980,  1178,    68, 47858,   817,
     545,  2774,  2565, 42800, -3318, 50372,  1998,   398,  2669, -3318,
   -3318, -3318, -3318,   189,  2586, -3318,  2592, -3318, 47858, -3318,
    3525, 53426, -3318, -3318, -3318, -3318, -3318, -3318, 35162,  2747,
   -3318,   345, -3318,  1606, -3318,   345, -3318, -3318, -3318, -3318,
   -3318,  1551, 24319, 24319, 24319,  2361,  3525, -3318,  1606, -3318,
    2500, -3318,  2613, 20581,   297,   223, -3318, -3318, -3318,  2460,
    2567, -3318, -3318, -3318, -3318, -3318,   770,   770,  2775, -3318,
    2433, -3318,  2223,  1188, 69160,  1926, -3318,  1926, 25387,  2525,
     236, 46994,  2754, -3318,  2754,  2754, -3318, -3318, -3318, 41782,
   -3318, -3318, 47858,  2427, 69160,  2385,  2434, 41273, -3318,   817,
   -3318, -3318,  2884, -3318,   273, -3318, -3318, -3318,  1788,   345,
   -3318, -3318,  2874, -3318, -3318, -3318, -3318, -3318,   773, -3318,
   -3318, -3318,  1606, -3318,  1197, -3318, -3318,  2390, -3318, -3318,
   -3318,   738, -3318, -3318, -3318,  1606,  1926, 24853,  2539, -3318,
    2611, -3318, -3318, -3318, 20581, -3318, -3318, -3318, -3318, -3318,
    2391, -3318
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     169,   287,     0,  1492,  1491,  1566,   287,     0,  1425,     0,
     287,   547,   430,     0,  1596,  1595,     0,   224,   287,     0,
     169,     0,  1526,     0,     0,     0,   609,   612,   610,     0,
       0,     0,   287,   656,     0,  1597,   287,     0,     0,   648,
     611,     0,  1543,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    10,    24,    11,    12,    13,
      14,    20,    15,    16,    17,    18,    19,    21,    22,    23,
      26,    25,    27,    28,  1448,    29,    30,    31,    32,     0,
      33,     0,    34,    35,    36,    37,    38,   585,   571,   661,
     584,     0,     0,   168,   766,   592,    39,    41,    40,    42,
      43,    44,    45,    46,  1598,  1594,    47,   286,   285,   279,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
     290,   125,  1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,
    1628,  1629,  1630,  2004,  1631,  1632,  2005,  1633,  1634,  2006,
    1635,  1636,  1637,  1950,  1951,  2007,  1952,  1953,  1638,  1639,
    1640,  1641,  1642,  1643,  1644,  1645,  1646,  1954,  1955,  1647,
    1648,  1649,  1650,  1651,  1956,  2008,  1957,  1652,  1653,  1654,
    1655,  1656,  2009,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
    1664,  1665,  2010,  1666,  1667,  1668,  1669,  1670,  1671,  1672,
    1673,  1674,  1675,  1958,  1676,  1677,  1959,  1678,  1679,  1680,
    1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,
    1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1705,  1960,  1706,  1707,  1708,  1709,
    1710,  1711,  1961,  1712,  1713,  1714,  1962,  1715,  1716,  1717,
    2011,  2012,  1718,  1719,  1963,  2014,  1720,  1721,  1722,  1964,
    1965,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    2015,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1741,  1742,  1743,  2016,  1966,  1744,  1745,  1746,  1747,  1748,
    1967,  1968,  1969,  1749,  2017,  2018,  1750,  2019,  1751,  1752,
    1753,  1754,  1755,  1756,  1757,  2020,  1758,  2021,  1759,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1970,  1767,  1768,  1769,
    1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,
    1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1971,
    2023,  1972,  1789,  1790,  1791,  1973,  1792,  1793,  2024,  1794,
    1974,  1795,  1975,  1796,  1797,  1798,  1799,  1800,  1801,  1802,
    1803,  1804,  1805,  1976,  2025,  1806,  2026,  1977,  1807,  1808,
    1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
    1819,  1820,  1978,  2027,  1821,  1822,  1979,  1823,  1824,  1825,
    1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,
    1836,  1980,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,
    1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,
    1855,  2028,  1856,  1857,  1858,  1981,  1859,  1860,  1861,  1862,
    1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,
    1873,  1874,  1875,  1876,  1877,  1982,  1878,  1879,  2029,  1880,
    1881,  1983,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,
    1890,  1891,  1892,  1893,  1894,  1895,  1896,  1984,  1897,  1985,
    1898,  1899,  1900,  2031,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1986,  1987,  1908,  1909,  1988,  1910,  1989,  1911,  1912,
    1990,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1991,  1992,
    1930,  1931,  2032,  1932,  1933,  1934,  1935,  1936,  1937,  1938,
    1939,  1940,  1941,  1942,  1943,  1944,  1945,  1993,  1994,  1995,
    1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  1946,  1947,
    1948,  1949,     0,   126,   127,  1372,  1603,     0,  1350,   125,
    1963,  1970,  1984,  1423,  1424,   126,     0,   282,   546,     0,
       0,     0,     0,     0,     0,   226,     0,   424,   423,  1414,
     429,     0,     0,     0,   129,   121,  1823,   128,  1349,   119,
     135,  2184,  2185,  2186,  2187,  2065,  2188,  2189,  2190,  2191,
    2066,  2192,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  2193,
    2074,  2194,  2195,  2076,  2075,  2196,  2077,  2197,  2078,  2198,
    2079,  2080,  2199,  2200,  2081,  1672,  2082,  2083,  2201,  2202,
    2203,  2204,  2205,  2206,  2207,  2208,  2209,  2084,  2085,  2210,
    2211,  2086,  2212,  2213,  2087,  2214,  2088,  2089,  2090,  2215,
    2091,  2092,  2216,  2093,  2217,  2218,  2094,  2095,  2098,  2096,
    2219,  2097,  2220,  2099,  2100,  2101,  2221,  2222,  2223,  2102,
    2103,  2224,  2104,  2105,  2106,  2107,  2108,  2225,  2109,  2226,
    2110,  2111,  2227,  2228,  2229,  2230,  2231,  2113,  2112,  2114,
    2115,  2232,  2233,  2234,  2235,  2116,  2117,  2118,  2236,  2237,
    2119,  2238,  2239,  2120,  2121,  2240,  2122,  2123,  2241,  2124,
    2125,  2242,  2126,  2127,  2243,  2244,  2245,  2128,  2246,  2129,
    2130,  2247,  2248,  2131,  2132,  2249,  2133,  2250,  2251,  2134,
    2252,  2253,  2135,  2136,  2254,  2137,  2255,  2256,  2257,  2258,
    2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,
    2148,  1562,   137,   136,   138,     0,   448,   449,     0,   459,
       0,   441,   446,   442,     0,   468,   461,   469,   450,   440,
     462,   451,   439,   225,     0,   470,   456,   444,     0,     0,
       0,     0,   283,   242,     0,   430,     0,   169,     0,  1452,
    1453,  1454,  1455,  1456,  1457,  1462,  1458,  1459,  1460,  1461,
    1463,  1464,  1465,  1466,  1467,  1443,  1448,  1468,  1469,  1470,
    1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,
    1481,  1482,  1483,     0,  1425,     0,  1956,  2008,  1961,     0,
    1974,     0,  1977,  1978,  1859,  1985,  1988,  1989,  1990,  1991,
       0,   840,   128,   123,   824,     0,   587,     0,   770,   784,
     824,   829,  1117,   852,  1118,     0,   130,  1528,  1527,  1521,
     211,  1387,  1582,  1720,  1761,  1876,  1986,  1908,  1930,  1601,
    1583,  1576,  1581,   284,   655,   653,     0,  1306,  1720,  1761,
    1863,  1876,  1986,  1930,  1500,  1505,     0,   290,  1588,   128,
     123,  1587,     0,   593,   647,     0,   291,  1542,     0,  1547,
       0,  1839,   620,   623,  1381,   621,   585,     0,     0,     1,
     169,  1447,  1557,     0,   175,     0,     0,     0,   651,   651,
       0,   651,     0,   577,     0,     0,   585,   580,   584,   767,
    1600,  1900,  1986,  1908,  1590,  1586,  1730,     0,  1730,     0,
       0,  1730,     0,  1730,     0,  1730,     0,     0,  1566,  1568,
       0,   280,  1290,     0,  1351,   131,     0,     0,  1436,  1432,
    1437,  1433,  1438,  1431,  1430,  1439,  1435,     0,     0,     0,
     395,   428,   427,   426,   425,   430,  1730,  1398,   513,   514,
       0,     0,     0,     0,     0,     0,   222,  1409,   122,   120,
    1730,  1563,   457,   458,     0,   447,   443,   445,     0,     0,
    1730,  1376,   467,   463,  1730,   467,  1343,  1730,     0,     0,
     234,     0,   423,  1445,  1484,  2135,  1485,  1486,  1498,     0,
    1499,  1489,  1451,   169,     0,   545,  1422,     0,     0,     0,
    1238,   824,   829,     0,     0,   842,     0,  1258,     0,  1264,
       0,     0,     0,   824,   592,     0,   784,   841,   124,   774,
       0,   822,   823,   703,   703,   656,     0,   637,     0,   703,
     710,   703,   834,     0,     0,   837,   835,     0,   837,     0,
       0,     0,   837,   833,   793,     0,   710,     0,   822,   825,
     703,     0,   844,  1442,     0,     0,     0,     0,  1579,  1577,
    1578,  1584,     0,  1580,     0,     0,  1353,  1355,  1356,  1206,
    1366,  1093,     0,  1951,  1952,  1953,  1281,  1954,  1955,  1957,
    1958,  1959,  1050,  1692,  1960,  1364,  1962,  1964,  1965,  1967,
    1968,  1969,     0,  1970,  1971,  1972,     0,  1365,  1975,  1801,
    1980,  1981,  1983,  1986,  1987,  1363,     0,  1992,     0,     0,
       0,  1324,  1229,     0,  1092,     0,     0,     0,  1283,  1291,
    1085,     0,     0,   888,   889,   910,   911,   890,   916,   917,
     919,   891,     0,  1313,   983,  1081,  1301,  1095,  1090,  1100,
    1096,  1097,  1136,  1098,  1116,  1101,  1173,  1091,     0,  1099,
    1083,  1309,   637,  1307,     0,  1084,  1352,   637,  1305,  1503,
    1501,  1508,  1502,     0,  1504,     0,     0,     0,   281,   124,
    1549,  1550,  1541,  1539,  1540,  1538,  1537,  1544,     0,  1546,
    1448,  1283,  1224,  1226,     0,   622,     0,     0,   627,   574,
     573,   575,     3,  1381,     0,     0,     0,     0,  1710,     0,
    1529,   649,   650,     0,     0,     0,     0,     0,     0,     0,
       0,   751,   676,   677,   679,   748,   752,   760,     0,     0,
       0,     0,     0,   581,     0,  1599,  1593,     0,  1591,     0,
       0,     0,     0,     0,   153,   153,     0,     0,     0,     0,
       0,   113,    51,   106,     0,     0,     0,     0,   256,   269,
       0,     0,     0,     0,     0,   266,     0,     0,   249,   243,
     245,    53,     0,   153,     0,    49,     0,     0,     0,    55,
    1566,     0,     0,  1575,   288,   289,  1289,     0,   133,   134,
     132,   125,     0,  2149,  2004,  2005,  2006,  2007,  2154,  2008,
    1957,  2009,  2010,     0,  2011,  2012,  1963,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  1970,  2023,  2024,  2025,  2026,
    2027,  2028,  2177,  2029,  1984,  2031,  1990,  2182,     0,  2032,
    1108,   126,  1369,   659,  1232,   661,  1230,  1382,     0,     0,
    1434,     0,     0,     0,     0,   543,     0,     0,     0,     0,
    1394,     0,  1730,   218,  1730,   395,     0,  1730,     0,  1730,
     395,  1730,     0,  1730,   223,   227,  1408,  1411,     0,   460,
     455,   453,   452,   454,  1730,   277,     0,     0,  1377,   465,
     466,     0,   434,     0,     0,   436,     0,     0,   239,     0,
     237,     0,   430,   169,     0,   250,  1494,  1495,  1493,     0,
       0,  1450,   253,  1488,  1497,  1487,  1496,  1449,   270,  1444,
       0,     0,  1440,   540,     0,     0,     0,  1239,   959,   958,
     940,   941,   956,   957,   942,   943,   950,   951,   961,   960,
     948,   949,   944,   945,   938,   939,   954,   955,   946,   947,
     952,   953,   936,   937,  1253,  1240,  1241,  1242,  1243,  1244,
    1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,     0,     0,
     783,   780,     0,     0,     0,     0,     0,     0,  1283,     0,
    1056,  1091,     0,     0,     0,  1224,  1263,     0,     0,     0,
       0,     0,     0,  1224,  1269,     0,     0,   808,   820,     0,
     696,   702,   781,   779,     0,  1306,   771,     0,   854,   784,
     782,     0,   703,   778,   834,     0,   833,     0,     0,   836,
     830,     0,   831,     0,     0,     0,     0,   832,     0,     0,
       0,     0,   703,     0,   820,     0,   777,   851,  1511,  1519,
     212,     0,  1373,  2033,  2034,  2035,  2036,   898,  2037,   927,
     905,  2038,   927,   927,  2039,  2040,  2041,  2042,   894,   894,
     907,  2043,  2044,  2045,  2046,  2047,   895,   896,   932,  2048,
    2049,  2050,  2051,  2052,     0,     0,  2053,   927,  2054,   894,
    2055,  2056,  2057,   899,  2058,   862,  2059,     0,  2060,   897,
     863,  2061,   935,   935,  2062,     0,  2063,   922,  2064,  1374,
    1375,     0,  1235,   880,   880,   881,   882,   883,   908,   909,
     884,   914,   915,   885,   982,     0,   894,   169,  1585,  1602,
       0,  1229,  1102,   926,   913,  1280,     0,   921,   920,     0,
    1229,   903,   902,   901,  1087,     0,   900,     0,  1186,   927,
     927,   925,  1008,   904,     0,     0,     0,     0,     0,   931,
       0,   929,     0,  1009,   987,   988,     0,     0,  1323,  1332,
    1224,  1228,     0,  1085,  1224,     0,  1094,  1104,     0,  1176,
    1178,     0,     0,     0,  1284,  1354,  1086,     0,  1359,     0,
       0,   982,   982,  1312,  1206,     0,  1196,  1199,     0,     0,
    1203,  1204,  1205,     0,     0,     0,  1304,     0,  1214,  1216,
       0,     0,  1024,  1212,     0,  1027,     0,     0,     0,     0,
    1200,  1201,  1202,  1192,  1193,  1194,  1195,  1197,  1198,  1210,
    1191,  1005,     0,  1082,     0,  1139,     0,  1004,  1310,   769,
       0,  1357,   769,  1513,  1517,  1518,  1516,  1512,     0,  1507,
    1506,  1509,  1510,     0,  1551,  1535,     0,  1532,  1227,   764,
     624,  1345,     0,     0,     0,  1558,  1556,   174,   173,     0,
       0,   233,     0,     0,     0,  1522,   597,   596,   670,   662,
     664,   670,     0,   595,     0,   724,   725,     0,     0,     0,
       0,   757,   755,  1353,  1366,   712,   680,   711,     0,     0,
     684,     0,   716,   983,   750,   579,   674,   675,   678,   578,
       0,   753,     0,   763,     0,   616,   618,   601,   615,   613,
     598,   606,   751,   679,     0,  1589,  1592,     0,     0,     0,
       0,     0,     0,     0,  1730,     0,     0,   865,    74,    70,
      97,   345,   152,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   102,     0,     0,   103,   104,     0,     0,
       0,     0,  1373,   254,   255,   268,     0,   259,   260,   257,
     261,   262,     0,     0,   247,   248,     0,     0,     0,     0,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1568,  1567,     0,  1559,  1285,  1290,   661,   661,   661,     0,
       0,     0,     0,   659,   660,     0,     0,     0,     0,     0,
     539,   393,   403,     0,     0,     0,  1398,     0,     0,     0,
       0,     0,     0,   222,     0,   430,  1399,  1397,  1401,  1400,
    1402,     0,     0,   217,   214,     0,   392,   364,     0,     0,
       0,     0,  1413,     0,     0,   508,   506,   509,   498,   511,
     501,     0,     0,     0,     0,  1730,   382,  1410,     0,  1564,
       0,     0,   275,   467,  1378,     0,   464,   467,  1344,     0,
     467,   241,     0,     0,  1446,  1490,   251,   271,   252,   272,
     545,  1572,     0,  1570,   548,   553,   537,     0,   537,     0,
     550,   554,   537,   549,     0,   537,   544,     0,  1132,     0,
    1122,     0,     0,   843,     0,     0,  1123,  1058,  1059,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1076,  1075,  1124,
     847,     0,   850,     0,     0,  1261,  1262,     0,  1125,     0,
       0,  1268,     0,     0,     0,  1130,     0,   785,     0,     0,
     686,   687,   695,   691,   698,     0,   701,   688,   637,   586,
    1720,  1761,     0,   648,   648,   648,   646,   636,     0,   728,
     786,     0,   776,     0,     0,   809,     0,     0,   811,   813,
       0,     0,   816,   792,   791,     0,     0,   775,     0,     0,
     855,     0,  1349,     0,     0,   213,     0,     0,     0,   880,
       0,     0,     0,   872,   870,   866,     0,   962,   963,   964,
     965,   966,   967,   968,   969,   970,   971,   972,   973,   974,
     886,  1386,     0,   892,  1391,  1392,  1389,     0,  1385,  1388,
    1390,  1393,     0,     0,     0,     0,  1279,  1275,     0,     0,
       0,     0,     0,  1181,  1183,  1185,     0,   924,   923,  1190,
    1196,  1199,  1203,  1204,  1205,  1200,  1201,  1202,  1192,  1193,
    1194,  1195,  1197,  1198,     0,  1218,     0,  1172,     0,     0,
       0,     0,     0,     0,     0,     0,  1317,  1316,     0,  1340,
       0,  1105,  1089,     0,     0,  1179,  1106,  1314,  1324,  1292,
       0,     0,     0,  1362,  1361,   984,   993,   996,  1029,  1030,
    1000,  1001,  1002,  1006,  1384,  1383,  1311,     0,  1303,     0,
       0,   985,  1010,  1015,     0,  1270,  1273,  1046,  1272,     0,
    1034,     0,  1023,     0,  1032,  1036,  1011,  1026,     0,  1007,
       0,  1304,  1215,  1217,     0,  1213,     0,   997,   998,   999,
     989,   990,   991,   992,   994,   995,  1003,  1189,  1187,  1188,
       0,  1290,     0,  1302,     0,     0,  1141,     0,     0,  1031,
    1308,     0,   854,   661,   854,     0,   982,  1552,  1381,  1545,
    1534,  1381,  1225,  1346,  1380,     0,   635,     0,  1554,   160,
     164,     0,     0,  1291,   194,   196,   769,     0,  1529,  1529,
    1531,  1530,   668,   669,   673,     0,     0,   673,   652,   594,
    1981,  1859,     0,     0,     0,     0,   717,   758,     0,   749,
     714,   715,     0,   713,  1353,   718,  1352,   719,   722,   723,
     685,  1341,   759,   761,     0,   754,     0,  1347,   600,   619,
       0,     0,     0,     0,     0,   583,   582,   765,     0,   273,
       0,    52,     0,  1730,    76,     0,     0,     0,     0,     0,
       0,   295,    72,    73,     0,   397,     0,    71,    67,   295,
     118,  1730,   467,  1730,   467,  1624,  1693,  1877,     0,    65,
     369,   109,     0,   146,    79,    81,   400,     0,   354,     0,
       0,    99,   114,   139,     0,     0,   244,    54,   258,   263,
     142,   267,   264,  1418,   265,   153,     0,    50,     0,   140,
       0,  1416,     0,     0,    56,   144,  1420,  1568,  1575,     0,
       0,  1289,     0,   659,   659,   659,   657,   658,  1109,     0,
    1231,     0,  1233,  1234,  1023,  1427,  1428,  1429,  1426,   527,
     538,     0,   394,     0,   542,   530,   531,   539,  1396,     0,
     218,   395,     0,     0,   395,     0,   227,  1398,     0,     0,
       0,     0,     0,     0,   393,   385,   383,   416,     0,   390,
     384,     0,     0,   340,     0,  1618,     0,  1698,   201,   206,
       0,     0,     0,     0,  1367,  2150,  2151,  2152,  2153,  2155,
    2156,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2164,  2165,
    2166,  2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,  2175,
    2176,  2178,  2179,  2180,  2181,  2182,  2183,   515,  1368,     0,
     518,   865,     0,     0,     0,   222,   228,     0,     0,     0,
     277,   278,   433,  1379,   435,     0,   437,   240,   238,  1441,
     541,     0,  1571,  1569,   536,     0,   563,     0,     0,     0,
       0,     0,     0,     0,     0,  1119,  1237,     0,  1256,  1255,
    1057,  1064,  1067,  1071,  1072,  1073,  1257,     0,     0,     0,
    1068,  1069,  1070,  1060,  1061,  1062,  1063,  1065,  1066,  1074,
     852,     0,     0,   846,  1266,  1265,  1259,  1260,     0,  1127,
    1128,  1129,  1267,     0,     0,   821,   690,   692,   689,     0,
       0,   854,   648,   648,   648,   648,   645,     0,     0,     0,
     853,     0,   745,   706,   707,     0,     0,   815,     0,   839,
       0,   812,     0,     0,   803,     0,   810,   859,   826,     0,
       0,   828,  1520,   876,     0,   871,   867,     0,     0,     0,
     877,     0,     0,     0,     0,     0,     0,     0,  1236,     0,
     654,  1103,     0,     0,     0,  1276,     0,  1051,   893,   906,
    1028,     0,  1184,  1107,     0,  1207,  1171,   934,   933,   935,
     935,  1052,     0,  1319,  1321,     0,     0,     0,     0,  1331,
       0,  1054,     0,  1225,  1175,  1177,  1332,  1088,   918,   982,
       0,     0,     0,     0,     0,     0,     0,  1035,  1025,     0,
    1033,  1037,     0,     0,     0,  1019,     0,     0,  1017,  1047,
    1013,     0,     0,  1048,  1289,     0,  1293,     0,     0,  1140,
    1149,   772,   768,   728,   659,   728,     0,  1514,  1536,  1533,
       0,   633,     0,     0,  1555,     0,   183,     0,     0,     0,
       0,     0,   186,   200,   197,  1554,     0,  1523,  1524,     0,
     663,   665,     0,  1208,   673,   667,   721,   720,     0,   683,
     756,   681,     0,   762,     0,   617,     0,   603,     0,   795,
       0,     0,     0,     0,     0,     0,   344,     0,     0,     0,
     295,     0,   405,     0,   412,     0,     0,   397,   376,    69,
      68,    98,     0,     0,     0,    61,   117,    90,    82,    57,
      96,     0,     0,   101,     0,    94,   111,   112,   110,   115,
       0,   305,   330,     0,     0,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1575,
    1561,  1574,  1290,  1290,  1286,     0,     0,     0,   661,  1110,
       0,   526,   568,   565,   566,     0,   564,   249,   570,   404,
       0,     0,   216,   392,     0,     0,  1413,   500,   503,     0,
    1395,   430,     0,     0,   218,   395,     0,   368,   378,   379,
     364,   391,   362,   361,   363,     0,  1619,   242,     0,  1613,
       0,   208,   204,   395,  1412,     0,     0,   517,     0,   520,
     864,   507,     0,   512,     0,     0,   510,   227,     0,   231,
       0,     0,  1407,   276,   467,  1573,   551,   556,     0,   562,
     558,   557,   552,   560,   559,   555,  1120,  1131,  1254,     0,
       0,     0,     0,   845,   848,     0,  1126,  1121,   819,     0,
       0,   728,     0,     0,     0,     0,   639,   638,   644,     0,
       0,  1143,     0,   709,   814,     0,     0,     0,   801,   790,
     796,   797,     0,     0,     0,   857,   856,   827,   880,     0,
     860,   880,     0,   880,   878,     0,     0,   887,   975,   976,
     977,   978,   979,   980,   981,   912,     0,  1278,  1274,  1180,
    1182,  1219,   930,   928,  1053,  1322,  1315,  1318,  1224,  1326,
    1328,     0,     0,     0,     0,  1339,     0,  1174,  1340,  1360,
     986,     0,     0,  1016,  1271,  1038,     0,     0,     0,  1012,
    1207,     0,     0,     0,     0,     0,  1021,     0,  1297,  1290,
       0,  1296,     0,     0,     0,     0,  1115,   773,   745,     0,
     745,     0,  1282,     0,   628,   631,   630,   634,   169,  1553,
       0,  1548,   161,   162,   163,     0,     0,     0,   178,   155,
       0,     0,     0,   195,   183,   171,   671,   672,     0,   666,
     682,  1342,  1348,   602,     0,  1085,     0,     0,   599,     0,
     274,   147,   295,     0,     0,    75,     0,   414,   356,   406,
     389,   371,     0,     0,     0,   296,     0,   431,     0,     0,
     377,     0,     0,     0,     0,   357,     0,     0,   316,     0,
       0,   389,     0,   396,   312,   313,     0,    60,    91,     0,
      87,     0,   116,     0,     0,     0,     0,     0,    63,    86,
       0,    58,   865,   467,   467,    66,  1373,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2170,  2053,   302,
    2054,  1801,  2055,  2056,  2057,  2058,  2059,     0,  2060,   863,
    2061,  2062,  2250,  2063,  2064,  1192,  1193,   300,   301,   399,
     297,  1374,   298,   407,   299,     0,   402,   355,     0,     0,
     143,  1419,     0,   141,     0,  1417,   150,   148,   145,  1421,
    1560,     0,     0,  1113,  1114,  1111,   659,     0,     0,     0,
       0,   545,   533,     0,     0,  1618,   203,     0,     0,     0,
    1730,     0,  1413,   215,   392,     0,   422,   340,   865,   417,
       0,  1618,  1616,     0,     0,   209,     0,   207,  1413,  1612,
     499,   502,   516,   519,     0,     0,     0,     0,   585,   504,
       0,   230,   229,   219,     0,     0,     0,     0,   438,   561,
    1077,     0,     0,     0,     0,   699,     0,   705,   745,   643,
     642,   641,   640,   727,  1667,  1964,  1858,     0,   731,   726,
     729,   734,   736,   735,   737,   733,   744,     0,   747,   708,
     838,  1220,  1222,     0,     0,     0,     0,   802,   804,     0,
     806,     0,   858,   874,     0,   875,     0,   873,   879,   868,
    1277,  1320,  1329,  1330,  1325,  1334,  1336,     0,     0,     0,
     983,  1055,  1044,  1042,  1039,     0,  1040,  1020,     0,     0,
    1018,  1014,     0,  1049,     0,     0,  1294,     0,  1135,     0,
    1138,  1152,  1148,  1147,  1143,  1110,  1143,  1515,   626,     0,
     824,     0,   182,   159,   185,   184,     0,  1291,   192,     0,
       0,   183,     0,   494,   495,   496,   183,     0,   187,   523,
       0,     0,   614,   794,   607,   608,     0,   410,    77,     0,
     389,     0,   295,   373,   372,   375,   370,   374,     0,   432,
       0,     0,   314,     0,   321,   359,   360,   358,   315,   389,
     395,   317,     0,     0,     0,    83,    62,    59,    64,    84,
       0,     0,    85,    88,   859,   100,    93,  1373,     0,     0,
       0,    78,    80,     0,     0,  1288,  1287,     0,   529,   528,
     567,   569,   525,   534,   249,     0,     0,   364,  1615,     0,
       0,     0,     0,   392,     0,     0,     0,  1618,     0,     0,
     292,     0,   337,     0,   235,  1617,   202,   205,     0,     0,
       0,  1604,   521,   522,     0,     0,   232,     0,  1405,  1406,
       0,  1078,     0,  1079,   849,     0,     0,   697,  1143,     0,
       0,     0,   738,   732,     0,  1142,  1144,     0,   694,  1223,
     798,     0,   800,     0,   824,     0,   824,   807,   869,   861,
    1327,  1337,  1338,  1333,  1133,     0,  1041,  1045,  1043,  1022,
    1290,  1290,  1298,  1295,  1137,  1151,  1154,   747,  1358,   747,
     629,   632,   625,     0,     0,   170,     0,     0,   167,   154,
     473,     0,   497,   471,   172,  1209,   604,   605,     0,   295,
       0,   388,   411,   326,   304,     0,     0,     0,   311,   318,
     421,   320,     0,    92,   108,     0,     0,   401,   151,   149,
    1112,   545,     0,  1413,   340,  1612,   221,     0,     0,     0,
     364,   242,  1614,   353,   346,   347,   348,   349,   350,   351,
     352,   367,   366,   338,   339,   210,     0,     0,     0,     0,
     505,     0,  1407,     0,   189,   198,     0,   189,  1080,   700,
       0,   747,     0,     0,     0,   730,     0,     0,   746,     0,
     590,  1221,     0,   789,   787,     0,   788,  1335,     0,     0,
       0,     0,   661,   694,   694,   156,     0,   157,   193,     0,
       0,     0,     0,     0,   492,   395,   413,   387,     0,   380,
     324,   323,   325,   329,     0,   327,     0,   343,     0,   336,
     304,     0,    95,     0,   408,   524,   532,     0,   294,  1606,
     392,     0,  1612,   340,  1618,  1612,     0,  1609,     0,   220,
       0,     0,     0,   191,  1413,     0,   191,     0,   694,   740,
       0,   739,  1146,  1145,   696,   799,     0,  1134,  1300,  1299,
       0,  1158,   589,   588,     0,     0,     0,     0,   472,     0,
       0,   473,   421,     0,   365,     0,     0,   326,     0,   319,
     418,   419,   420,     0,   332,   322,   333,    89,   107,   409,
       0,   392,  1607,   293,   236,  1605,  1610,  1611,     0,   189,
     188,   670,   190,   854,   199,   670,   704,   591,   741,   693,
     805,  1153,     0,     0,     0,     0,     0,   166,   854,   177,
       0,   481,     0,   488,   164,   164,   489,   490,   491,     0,
     336,   386,   381,   303,   328,   342,     0,     0,     0,   334,
       0,   335,  1612,     0,   191,   673,  1403,   673,  1950,  1668,
    1915,     0,  1170,  1159,  1170,  1170,  1150,   158,   165,     0,
     485,   486,   487,     0,     0,   477,     0,     0,   480,     0,
     295,   308,     0,   307,     0,   398,   331,  1608,  1413,   670,
     179,   180,     0,  1163,  1162,  1161,  1165,  1164,     0,  1157,
    1155,  1156,   854,   484,     0,   476,   483,     0,   479,   478,
     493,   415,   306,   310,   309,   854,   673,     0,     0,  1167,
       0,  1168,   176,   474,     0,  1404,   181,  1160,  1166,  1169,
       0,   482
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3318, -3318, -3318,  2037, -3318,    67,    71,  -903, -1233,  -946,
   -1245, -3318,  -171,    88, -3318, -3318,   154, -3318, -3318,   579,
   -1754, -1745,  1087, -3318,   157,  -811,   577, -3318,  1185, -3318,
   -3318,  -672, -1681, -3318,   421,  1062, -2159,    93,    94,  2156,
   -3318,  1045, -3318,  3311,  2917,  4446,  1001,  -793,  -902, -1300,
       4,     7, -3318, -3318, -3318, -3318,  -766,   518, -1905, -3318,
   -3318, -3318, -3318,   123,     1, -2274, -3088,  -669, -3318,  -778,
   -3318,  -403, -3318,  -714, -3318, -1015,  -724,  -763, -3003, -1174,
   -3318,  1724,  -443, -3318,   643, -3318, -2740, -3318, -3318,   627,
   -3318,  1163,  1167, -3318, -3318, -2261,   166,  -693, -2800, -2702,
   -2297,  -919,   222,  -687,   202, -2232, -1381, -3318,   664, -3318,
    -671, -3318,  -925, -2229,    96, -2995, -1750,    -7, -3318, -3318,
   -3318,  -648, -3318, -2686,   104, -3318,   501, -3318, -2191,   503,
   -2083,  1647,  -650, -3318,   141,   106, -1720, -3318, -3318, -1770,
      69, -2211, -3318,  -217, -2871,     5, -2203,   107, -2592, -3318,
   -3318,   114,    12,  -593,   285, -3318,   129, -3318, -3318,  1625,
    -962, -3318, -3318,   502,   131,  1053, -3318, -2735, -3318,  -566,
   -3318,  -644,  2034, -3318, -3318,    31, -3318,  1612, -3318, -3318,
   -3318,     6, -3318,  -538, -3318, -3318, -2745, -3318,    13, -3318,
   -3318, -1864, -3318, -1561,  -470,   312, -3318, -3318,  -601, -2504,
    -551, -3318, -3118, -3243,  -717, -3318, -2784, -3189, -2160,   135,
   -3318,  2151,  -416,   137,  -623, -3318, -3318,  -719, -3318, -3318,
   -3318, -3318, -3318,  -284,   138,   143, -3318,    34,   144, -1181,
       3,   372,   -36,   -41, -3318,   -31, -3318, -3318, -3318,   735,
   -3318, -3318,     2,    54,  1854, -3318, -3318,  -258, -3318, -1072,
   -3318, -1877,   584, -3318,  2021,  2044, -1808,  -886,   -53,   264,
     783, -1736, -2219,  -643,  1252,  1838,  1841, -3318,   489, -3129,
   -3318,  -584, -3318,  -715, -3318, -3318, -3318,  2038, -3318,   774,
    1300, -1553, -1608, -3318, -2355, -3318,  -494,  -372, -3318, -3318,
   -3318, -3318, -3318, -2629, -3069,  -635,  1272, -3318,  1850, -3318,
   -3318, -3318, -3318,    86, -1588,  3054,   821, -3318,   117, -3318,
   -3318, -3318, -3318,   163, -3318,  1015,  -177, -3318,  -500,  -695,
    -804,  2074,   -85,   139, -1907,   -11,  -375,   536, -3318, -3318,
     539, -2155, -1465,   491,  -272,  1024, -3318, -2352, -1447, -3318,
   -1511, -1212, -3318, -3318,  -783,  2649, -3318, -3318, -3318,  3300,
    3316, -3318, -3318,  3440,  4085, -3318,  -930,  4178,  -725, -1057,
    2093,  -960,  2103,  -971,  -957,  -965,  2107,  2109,  2112,  2113,
    2114,  2117,  2122, -1592,  5657,  -209,  1833, -2314, -3318, -1456,
   -1622, -3318, -3318, -3318,    36, -2576, -1426,    50, -3318, -3318,
   -3318, -3318, -2835, -3318,  -459, -3318,  -457, -3318, -3318, -3318,
   -1848, -3317, -1887, -3318,  2344,   947, -3318, -3318,   483, -3318,
   -3318, -3318, -3318, -1593, -3318,  6797,   840, -3318, -2107, -3318,
   -3318, -1001,  -876,  -769, -1028, -1250, -2008, -3318, -3318, -3318,
   -3318, -3318, -3318, -1555, -1850,   -40,   914, -3318, -3318,  1013,
   -3318, -3318, -3318, -1540, -1828, -2194, -3318, -3318, -3318,   920,
    1638,   124,  -842, -1676, -3318, -1586, -3318, -3318,   968, -2522,
   -3318, -3318,   479, -2794, -3318, -3318,   169, -3318,  -697, -1159,
   -2580,   532,    26, -3318,  -897, -2692, -3318, -3318,  -748, -2823,
   -1121,  -935, -3318,   145,  1712,  2276,    17,   147, -3318,   148,
    1403, -3318, -3318, -3318,   152, -3318,   298,   153,   470, -3318,
    1067, -3318,   683,     8, -3318, -3318, -3318,    85,    15, -2448
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,    50,   769,   770,  1913,  1856,  3137,
    1270,  1846,  1402,   771,  2767,  2768,  2769,  2348,  2337,  2338,
    1817,  1818,  1251,  3612,  2349,  1252,  1253,  2771,    54,    55,
      56,   119,  1283,  2512,  1961,  1962,  1873,   772,   773,   543,
      59,  2405,   947,   821,  1191,   870,  1129,   934,   935,  1288,
    1289,   774,  2811,  2417,  3394,  3395,  2515,  2411,  1412,  1895,
    1413,   551,  1976,  2817,   775,  2754,  3139,  3605,  2782,  3765,
    3073,  3074,  3602,  3603,  2757,  2351,  3674,  3675,  2846,  1837,
    3669,  2435,  3541,  2357,  2331,  3075,  2443,  3501,  3186,  2352,
    3055,  2838,  2839,  2436,  3598,  1937,  2437,  3599,  3342,  2438,
    1892,  1917,  2758,  3676,  2358,  1893,  2753,  3140,  1821,  2439,
    3609,  2440,   561,  3059,   776,  2849,  1356,   545,   534,   535,
    1590,   733,  1332,   734,   777,  1925,  1926,  1927,  1928,  1929,
    1930,   965,  1931,  2489,  2490,   778,  1350,  1907,    65,  1365,
     562,  1934,  3211,  2869,  2870,   779,  1914,   780,  2448,  3196,
    3197,   781,   782,  1209,  2706,  2258,   783,   759,   760,   982,
    1382,   761,    71,  1942,   784,  1388,  1389,   990,    73,   892,
    1404,   785,   998,  1406,   999,    74,  1407,  1001,  1002,    75,
      76,   787,  3429,  3217,  1367,  1938,  2452,   563,   788,  3018,
    2260,  2709,  3591,    79,  3318,  2264,  1206,  3321,  3555,  3011,
    3316,  2711,  3633,  3691,  3319,  2265,  2266,  3556,  2267,   789,
      81,   839,  1755,   790,  3593,  3756,  3786,  3716,  3751,  3323,
    3661,  3324,  3325,  3326,   791,   792,  1067,  2108,   793,  1824,
     794,  1130,    88,    89,  1037,    90,  3336,    91,    92,  1795,
    1796,  1797,   872,   882,   883,  1744,  3003,  3004,  2703,  1498,
    2047,   875,  1213,  1764,   856,   857,  1881,   902,  1884,  1759,
    1760,  2274,  2720,  1788,  1789,  1222,  1223,  2033,  2034,  3570,
    2035,  2036,  1491,  1492,  3437,  2585,  2586,  1502,  1776,  1780,
    1781,  2295,  2285,  1767,  2582,  3238,  3239,  3240,  3241,  3242,
    3243,  3244,  1131,  2911,  3448,  1784,  1785,  1225,  1226,  1227,
    1793,  2305,    94,    95,  2242,  2691,  2692,   827,   828,  3256,
    1520,  1798,  2917,  2918,  2919,  3259,  3260,  3261,   829,  1032,
    1033,  1060,  1055,  1510,  2058,   830,   831,  2010,  2011,  2553,
    1062,  2049,  2069,  2070,  2925,  2608,  1591,  2334,  1592,  1593,
    2083,  1594,  1132,  1595,  1621,  1133,  1626,  1597,  1134,  1135,
    1136,  1600,  1137,  1138,  1139,  1140,  1614,  1141,  1142,  1639,
    2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,
    2097,  2098,  2099,  2100,  1192,  1799,  1144,  1145,  1146,  1147,
    1148,  1149,  1150,  1151,  1152,  1153,   833,  1154,  1155,  1715,
    2236,  2690,  3248,  3445,  3446,  2996,  3303,  3476,  3582,  3705,
    3742,  3743,  3779,  1156,  1157,  1659,  1660,  1661,  2123,  2124,
    2125,  2126,  2230,  1709,  1710,  1158,  3144,  1712,  2146,  3252,
    3253,  1193,  1484,  1652,  1335,  1336,  1605,  1458,  1459,  1465,
    1985,  1473,  1477,  2015,  2016,  1485,  2197,  1159,  2116,  2117,
    2626,  1616,  3006,  1160,  1287,  1665,  2991,  2233,  1713,  2190,
    1167,  1161,  1168,  1163,  1648,  2964,  2644,  2645,  1649,  2649,
    2960,  2961,  2159,  2965,  3276,  3277,  2651,  2302,  1741,  2307,
    2308,   986,  1164,  1165,  1166,  1337,   538,  1606,  3692,  1378,
    1198,  1338,  2186,   795,   109,   931,   796,   797,    99,   798,
    1187,   879,  1188,  1190,   799,   850,   851,   800,   864,   865,
    1529,  1729,  1530,   888,   104,   105,  1236,   852,   802,  3421
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     533,    61,    93,    86,  1194,    66,    77,    60,   103,   732,
     887,   983,    69,    78,  1162,   106,   533,    97,  1476,  1269,
     731,  1232,    93,  1385,  1860,  2277,  1056,   873,   801,  1028,
    1347,  1345,  1290,   537,  2037,  1859,   903,  1531,  1742,  1448,
     871,  2145,  2240,   536,  1843,  1450,  2107,  2392,  2012,   537,
    1446,   786,   907,  1449,  1391,  2509,  1401,  1641,  2725,   832,
    2073,  2157,   908,   985,  1826,  2761,  2324,    51,  2196,  2713,
    2604,    52,  2344,   834,  1832,  2401,  1179,  1944,  1878,  2173,
    2174,  3177,  1745,  2085,   533,   533,   758,  2693,    53,  2695,
    1719,  3145,  1864,    57,    58,  1722,    62,  3142,  2752,   885,
    3187,  2674,  2712,   924,    63,  1408,    64,    67,   915,   825,
    2380,  1271,  3191,  1275,    68,  1279,  2819,   537,   537,   866,
     997,  3174,  1655,   993,  3005,  2959,  1290,   832,   832,    70,
    1034,    72,  1415,  2426,  2244,    80,  1059,    82,    83,  2859,
    -505,   834,   834,    84,    85,    96,  2587,    98,   100,  2422,
    2198,  1080,   101,   102, -2022,  1662,  3033,  1617,  1618,  2596,
    3038,  -935, -2170, -2170,  -927,  2556,  2577,  2578,  2579,  3275,
   -2022,  3278, -1429,  2300,  -395,  1631,  2418,   825,   825,  2812,
    3398,   836,  2030,  2803,  3410, -1370,  1081,  2031,  1081,  2388,
    -572,  -932, -1351, -1367, -1367,  -932,  3414, -2013,  2833, -1370,
    -576, -2013,  3632, -2030, -2030, -2161, -2161,  1460,   904,   905,
    2121, -2179, -2179, -1371,   836,  2829, -1371,  2822,  1080,  -894,
    1003, -1368, -1368,  2188,  -907,  -922,  2297,  1726,  2175,  2800,
     836,   836,  1675,  3176,  2827,   877,  -535,  1677,  1175,  2188,
   -2156, -2156,  1395,  1822,   548,  1672,  1651,  1080,  1810, -1190,
    2624,  -935, -2181, -2181,  1862,   110,  1281, -1190,  1989,  1221,
    1723,  1395,   836,  1991,  1876,  1753,  1080,  1224,  1685,  1675,
    3346,  3361,  3504,  1676,  1677,  1877,  1408,  1290,  2920,  -249,
    3471,   893,  1180,  2708,  -249,  2227,  1822,  2879,  2881,  1751,
    2884,  -572,  3517,  2228,   893,  3589,    23,  2791,  2310,  1989,
    1833,  -576,  1687,  1990,  1991,  1685,  1768,  3400,  1622,  2842,
    2966,  1844,  3726,   836,  1847,  1848,  -722,  1059,  1080,  1493,
    1026,  3547,  3379,   974,  1500,  1633,  1503,  1829,  1768,  1034,
    2029,  3548,  1379,   900,   900,  1664,  1379,  1666,  2998,  1687,
    3000,  1604,  2828,  2566,  1813,  1526,  1182,  1379,  3357,  3709,
    1879,   111,  3192,  2237,   997,  1769,  3167,  2708,  1804,  1409,
    1408,  1284,   549,  1408,  1408,  2079,  2029,  2537,  1834,  3304,
    2335,  3306,    87,   894,  2755,  1724,  2890,  1769,     3,     4,
    1675,  3077,  1765,   116,   854,  1035,   894,  2272,  1800,  1801,
    1747,  3793,    87,  3695,   960,   824,  1211,  -864,  1664,  2567,
    1646,  3656,  1849,  2685,  3774,  1627,  3440,  3343,  3583,    87,
    3584, -1211,  3532,  3355,   895,  3753,  2901,  1830,   886, -1211,
    2329,  3772,  3408,  2415,  1770,  3057,  3026, -2155, -2155,  1217,
    2529,  1858,  3013,   961,  1012,  3378,   107,  3404,  1636,  3636,
    1611,  1922,    46,    26,    27,    28,  2783,  3411,  1728,  1883,
    1687,  3058,  1041,  3419,  3652,  3653,  3078,  3490,  1835,  2784,
    1637,  2557,  3412,   824,   824,   906,  1647,  1347,   117,  3477,
    2832,  3479,  2273,  2449,  3409,  1771,  3047,    87,  1558,   546,
    3807,  2330,  3405,  3344,  3491,  -572,   855,   108,  3014,  3356,
    3048,  3769,  3638,  1766,  3027,  -576,  1370,  1771,  1212,  3733,
    3549,  1725,  1957,  1959,  1176,  3029,  1219,  2238,  1815,  3697,
      33,  2756,  1836,  3358,  2538,  2752,  1183,  2752,  1184,  1880,
    3329,  3618,  3193,   964,  2539,   112,  1641,  2951,  3590,  1036,
    2524,  1604,  3710,  2891,  -864,  1371,   113,  -742,  1499,  1831,
    3499,  1772,  2530,  3079,  1831,   569,  3228,  2568,  1635,    38,
    1850,   763,  2762,   949,  3551,  3515,  1748,  -572,  3794,  3509,
    1285,  1851,   841,  1772,  1882,  2076,  3775,  -576,  2606,  2643,
    1754,  3734,  2558,   114,   118,  3721,   884,   884,  3393,  2563,
    1831,  1177,  2311,  1009,    40,  2805,  2806,  2807,   878,  1802,
    2813,  2814,  2196,  2407,  1074,    43,  2115,  1803,   732,  3438,
    1863,  2189,  3416,  3561,  2021,  2920,  2600,  3505,  1869,   971,
    3215,  1746,  1617,  1618,  1750,  2145,   803,  2676,  3757,  3347,
    3683,  2597,   896, -1190,  1737,  2597,   115,  3168,   983,  3684,
    1816,  3183,  2400,  1946,  1380,  2619,  1613,  1631,  1380,  1950,
    3160,  1384,   975,  2792,   920,  2503,  3219,   932,  1636,  1380,
      46,   933,  2038,  3727,  2697,  2618,  3210,  3524,  3413,  2229,
    2646,   804,   932,  2763,  2978,  3200,  1663,  3577,  1860,  2934,
    1637,  -505,  -505,  2061,  2198,  1664,  2728, -2022,  2715,  2888,
    -572,  2914,  2836,  2723,  1638,  1628,  1947,  -927,  3145,  2416,
    -576,  2804,  2243, -2022,  3142,  2902,  2903,  2904,  2905,  2127,
    2128,  1628,  1344, -1429,  2815,  -395,  2799,  2830, -1370,  1124,
    1125,  1124,  1125,   932,  -932, -1351,   550,   933,  1372,  -572,
   -2013,  -572, -1370,  1384, -2013,  2867, -2030, -2030,  2120,  -576,
    2297,  -576,   887,  3005,  2112,  1651, -1371,  1670,  1636, -1371,
    3374,  2151,  1620,  2152,  1651,  1708,   997,  1625,  -922,  1954,
    3460,  3496,  2819,  1720,  2245,  1619,  3497,  1399,  1400,  2148,
    1637,   996,  1290,  2169,  1290,  1854,  1622,  1022,  3337,    93,
    -475,  2006,  2171,  3201,  1640,   801,  1399,  1400,  3617,  1705,
    1706,  1707,  1708,  2303,   887, -1211,  1633,  2052,  3472,  1855,
    3623,  2170,  2027,  1956,  -249,  -249,  3624,   835,  1080,  1000,
    1381,  1675,   533,  3020,  1384,  1676,  1677,  2067,  1469,  2003,
    2004,  2005,  2006,   533,  1989,  3600,  1040,  3489,  1990,  1991,
     533,  1185,  3493,  2103,  1246,  3754,  2400,  1518,  3370,  3371,
     552,   907,  2583,  3702,  3761,   537,  3314,  1685,  1373,  1217,
    1762,   908,  2113,  2518,  1218,   832,   537,  3363,  2519,   533,
     533,  2119,  1604,   537,  1233,  3368,   832,  2765,  3051,   834,
    1666,   932,  3328,   832,  1181,   933,  2329,  3516,  3670,  2564,
     834,  1687,  2584,   533,  1945,  1675,  3315,   834,  3798,  1519,
    3601,  2296,  2296,  1333,  3223,  1181,  2999,  3090,  2764,  3693,
    2765,    61,    93,    86,   553,    66,    77,    60,   103,  1854,
    2368,  2304,    69,    78,  2666,   106,  1024,    97,  2520,  1186,
    2371,  1685,  2564,  2374,  1958,   874,  1219,  3613,  3174,  1080,
    2766,  3330,    87,  1855,  1945,   533,   732,  2749,   898,  1331,
     533,  2726,  2686,  2667,  2701,  1195,  1080,  1025,  2366,  2191,
    3711,  3396,  1064,   866,   866,  1687,   866,  3052,   866,  1408,
    1604,  3712,  3717,  1065,    23,  2818,  3799,    51,  1507,  1408,
    2702,    52,  1408,  3713,  1514,  3782,  2571,  1220,   880,  3285,
    2921,  3145,  1217,  3789,  3161,  3162,  3718,  3142,    53,  3405,
    2429,  2502,  1331,    57,    58,  2504,    62,  2335,  2506,  2491,
    2393,  2394,  2395,  3703,    63,   996,    64,    67,  2321,   899,
     533,   533,   887,  3045,    68,    93,   533,  3671,   890,   533,
     533,   801,   533,   533,   533,   533,  3053,  1391,  3054,    70,
    3094,    72,  3704,  3795,  1348,    80,   838,    82,    83,   533,
    2367,   533,  3714,    84,    85,    96,  2759,    98,   100,  3154,
     533,  2145,   101,   102,  2860,  1629,  1630,  1504,  3762,  1219,
    2377,  3800,  1822,  1636,  1822,  2384,  2668,   533,  1331,  1589,
     836,  2669,   537,  1823,   537,  1825,   111,  2969,  3502,  1897,
    1833,  3533,   832,   537,   832,  1637,   951,  3619,   952,   533,
     900,   932,   557,   832,   992,  1663,   834,   887,   834,  1638,
    1243,  2231,  1604,   937,  3672,  2232,  1244,   834,   969,   533,
    1220,    26,    27,    28,  2369,   953,  1504,   954,  1898,  2372,
     560,   533,   533,   533,  2037,   533,   533,   891,   732,   938,
     929,  1860,   825,  3485,  1024,  2012,  3534,  2698,   889,  1656,
    2699,  2211,   958,   825,  1393,  3535,  3763,  1394,  1834,    87,
     886,  1068,  1069,  1070,  1243,  3401,  1073,  2734,  2562,  2808,
    1244,   533,   932,  1496, -1351,  1025,   933,  1243,   897,  3536,
    2930,  3295,  -660,  1244,  1511,  3764,   909,  -660,    33,   533,
     533,   927,  1756,  1757,  3682,  1763,  2441,  3685,  2442,  1432,
    1433,  1011,   908,   908,  1045,   908,   939,  1512,  2199,  2613,
    2723,  1517,  1023,  1181,  2793,  1604,  1181,  2199,  1901,  1039,
    1735,  1245,  2517,  1736,   928,   959,  2521,    38,   533,  2523,
    3801,   836,   533,   533,  3432,   940,   930,  2200,  2670,   958,
    1046,   948,   533,   533,   533,  3596,  2200,   533,  1835,  2671,
    1424,  1425,  2572,  3537,  2573,   901,  1505,  1655,  2622,  -660,
     112, -2022,    40,  1045,   906,  1951,  3538,  1048,  1952,  1589,
    1636,   113,  1604,    43,   936,  1245,  2212,  1987,  1988,   941,
     955,  1861,    87,  2008,  1604,  -225,  3392,  2843,  1245, -2150,
   -2150,  2075,  1637,  2213,  2076, -2151, -2151,  2854,  2214,  1046,
    2101,  3715,  1836,  2102,  3767,  1331,  1640,  2574,   114,  2575,
    -660,   966,   959,   988,  1604,  1513,  1331,  2921,  3338,  1438,
    1439,  1604,   967,  1432,  1433,   972,  1048,   960,    46,  1703,
    1704,  1705,  1706,  1707,  1708, -2152, -2152,  2215,  2664,   898,
     973,  1331,  2001,  2002,  2003,  2004,  2005,  2006,  1169,  1170,
    2776,  1172,  2778,  1174,  -661,  2201,  3143, -2153, -2153,  -661,
    2404,   115,   977,  1604,  2201,  2203,   961,  1604,  2696,  2202,
    1831,  1906,   976,  1604,  2203,  1908,  1909,  2694,  3387,   978,
    2412,   732,  1246,  2413,  2818,  1910,  3044,   979,  3046,  3271,
     732,  3061,  1939,  2510,   989,    87,  2511,  1604,  2449,  1052,
    2773,  2550,  2775,   962,  2551,  2727,  2727,   996,  2598,   942,
     899,  2599,  2298,  2299,  1897,    93,  2601,  1009,  1506,  2599,
     943,   801,  2779,  1018,   732,  2780,  1243,   963,   824,   533,
    1023,  -661,  1244,   884,  3064,  1963,  1246,  3263,  2785,   824,
    3265,  2786,  3267,  1438,  1439,  1000,  1248, -2157, -2157,  1246,
    3224,  2915,  1007,  1898,  2922,  2145,   964,   944,  1052,  2020,
    2801,  2022,  2023,  2511,  1061,  2857,  2927,  2107,  2858,  2599,
   -2158, -2158,  2928,  3539,  1612,  2102,  3540,  1506,  1249,   533,
     533,   945,  -661,  2652,  1008,   533,  1624,   533,  1010,  2737,
    1899,   900,   533,   533,   533,   533,  1247,  2216,  2931,  2933,
    1248,  2932,  2932,  1214,  1027,  1216,  3791,   533,   533,  1273,
     946, -2159, -2159,  1248,  1900,  1653,  3021,  1071,   533,  3022,
     537,   533,  2204,  1029,  3182,  2826,   533,  2413,   533,   533,
     832,  2204,  1249,  2205,   533,  1013,  3770,  1245,  3771, -2160,
   -2160,  3088,  2205,  1901,   834,  1274,  3213, -2162, -2162,  3214,
    1016,   537,  3081,  1250,   537, -2163, -2163,  3225,  3736,   537,
    3226,   832,   537,  3286,   832,  3308,  2102,   537,  3309,   832,
    1074,  3382,   832,  3748,  2275,   834,  3433,   832,   834,  2102,
    1072,  3434,  3466,   834,  2599,  2102,   834, -2164, -2164,  1017,
    1589,   834, -2165, -2165,  1075,  3473,  3507,  3806,  2076, -2166,
   -2166,  3068,  2952,  2953,  3171,   906,   906,  1250,   906,  1019,
    3080,   825,  3089,  1833,   825,  1243, -2167, -2167,  1020,   825,
    1250,  1244,   825,   533,   533,  3486,  1021,   825,  3487,    93,
    2109,  1022,   533,   533,  2104,  2111,  3615, -2168, -2168,  2105,
    2106,   533,  2053,  1066,  2110,  2055,   901,  3802,   533,  3523,
    2059,  3069,  2413,  2062,  3526,   533,  3558,  3214,  2066,  2102,
    3805,  1196,  3579,  3580,  2939,  2860,  1655,  1173,   552,  3070,
    2941,  2943,  2944,  1189,  2938,   533,   732,  1833,  2940,  2942,
     533,  1834,  3629,   533,  1199,  3214,  1197,  1333,  1589,   533,
     533,   533,   533,   533,   533,   533,   533,   732,  1246, -2169,
   -2169,   533,   533,   533,  3634,  1200,   533,  3635,  2185,  3664,
     533,  1201,  3665,   533,   533,   533,   533,   533,   533,   533,
     533,   533, -2171, -2171,   533,   836,  1245,  3708,  1204,  1604,
    3635,   533,   553,  1331,  2935,  2936,   537,  3768,   120,  1205,
    3635,  1207,   547,  2279,  1865,  1834,  3803,  1215,   884,  3487,
     762,   533,  1234,   908, -2172, -2172, -2173, -2173,  1277, -2174,
   -2174,  2335,  1248,  1243,   853, -2175, -2175,  2449,   867,  1244,
    1235,  1835,  1237,  3071, -2176, -2176,  1238,  2874, -2178, -2178,
     533, -2180, -2180,  3072,  1239,    87,  1604,  1186, -2183, -2183,
    1243,   533,   533,  1240,  1278,  1241,  1244,   552,  1885,  1886,
    1242,  2531,  2532,  2533,  2534,  2535,  2536,  2723,  1868,  2540,
    2541,  2542,  2543,  2544,  2545,  2546,  2547,  2548,  2549,  -717,
    -717,  1254, -1415,  1255,  1005,  1836,  1272,  2240,  1276,  1079,
    1589,  2169,  1989,  -721,  -721,  1835,  1990,  1991,  1280,  3459,
     732,  1992,  1993,  1994,   732,  -720,  -720,    14,    15,  1434,
    1435,  2350,  1438,  1439,   116,  2356,  1063,  3204,  3205,  3334,
    3335,   553,  2862,  2864,  1282,  3088,  1343,  1346,  1340,  1250,
    3755,  3758,  2717,  2718,  1245,  3744,  3745,  3780,  3781,  1731,
    1732,  1171,  1349,  1344,  1351,   732,  1366,  1246,   533,  1836,
    1369,  1368,  1376,  1831,    23,  1331,  1963,   824,   533,   533,
     824,  1245,  1604,  1377,  1383,   824,  1408,  1386,   824,  1387,
    1392,  1411,  1410,   824,  1416,  1490,  3037,   991,   838,  1474,
     557,  1487,   992,  1489,  1497,  1833,  3179,  1501,  1508,  1515,
    1509,  3148,  3218,  1589,  1516,  2079,  1948,  2488,  1949,  1521,
    1525,  2445,  3166,  2491,  1527,  1607,  1610,  2320,   560,  1608,
    1619,  1248,  -898,  3143,  3198,  -905,    46,  1831,   732,  1623,
    -742,  -743,  -895,  -896,  -899,  1331,   533,  1604,  1634,  -897,
    1635,  1642,  1657,  1714,  1667,  3735,   533,  1669,  1716,  3737,
    1718,  1730,  3297,  1249,  1738,  1739,  1749,  1743,  1752,  1218,
    1589,  1220,  1794,  1834,   533,   533,   556,   533,  1790,    87,
    2661,  2662,  1589,   533,   533,   533,   533,   533,   533,  1792,
    1806,   533,   533,   533,   533,   533,   533,   533,   533,   533,
     533,  1827,  1995,  1403,  3557,  1808,   533,   533,  1838,  1828,
     533,  1444,  1589,  1839,  1840,  1246,  1845,   533,  1852,  1589,
    1853,    26,    27,    28,  1857,  1996,  1867,  1875,  1888,   557,
    1872,   992,  3264,  3796,  1894,  1889,  2790,  1904,  1250,  1256,
    1890,   533,  1246,  1905,  1903,  1916,  1912,   533,  1915,   533,
    1918,  1919,  1920,   533,   559,  1921,  1924,   560,  1604,  1257,
    1923,  1589,  2195,  1835,  1932,  1589,  1933,   533,  1953,  1331,
    2723,  1589,  1940,  1941,  -585,  2375,  1945,  1978,  1980,  1248,
     537,  1981,  1983,  2017,  1986,  2009,   537,  2018,    33,  -585,
     832,  2025, -1903,  2048,  -585,  1589,   832,  2054,  1997,    35,
    1604,  2050,  2382,  2028,   834,  1258,  1248,   533,   533,  2051,
     834,  2376,  2060,  2063,   533,  2064,  2065,  1836,  2071,  2074,
    1613,  2077,  2082,    37,  1620,  2084,  1625,    38,   552,  2078,
    2080,  3375,  3376,  1668,  2115,  3366,   906,  2081,  2383,  2114,
     825,  1080,  1833,  1671,  2149,  -585,   825,   533,  2150,  1675,
    2158,   533,  2154, -1415,  2161,  2163,   533,   533,   887,  2164,
    2165,  3521,    40,   552,  3557,  1721,  -585,  1604,  2166,  2187,
    2208,  2588,  2207,    43,  1727,  2210,  3262,  2591,  2234,  2235,
    2241,  2255,   533,   533,  1408,  1831,  1250,   533,  2037,  1408,
      44,  2253,   553, -1903,  2254,  1833,  2256,   899,  2288,  2278,
    2275,  2257,  1259,   533,  2261,  2287,   533,   533,   533,  3557,
    1834,  2289,  2290,  1250,    45,  2291,  3143,  -585,  2292,  2313,
    2309,  2314,  2317,  2318,   533,   732,  -585,   553,    46,  2322,
    2326,   533,  2328,  2327,   533,  2336,  1655,  2354,  1957,  1959,
     537, -1903,  1666,  2355,  2359,  2360,   552,   900,  2428,  2396,
     533,  2397,  1604,  1260,   533,  2430, -1903,  2398,  2414,  2410,
    2431, -1903,  3557,  1834,  1261,  2419, -1903,   537,   533,  2432,
    2446, -1415,  2450,  2794,  2453, -1903,  1262,   832,  2451,  2492,
   -1903,  2493,  1870,   537,  2494,   533,   533,   537,  2495,  2496,
      87,   834,  2497,   832,  3573,  2498,  2501,   832,  2514,  2499,
    1835,  2522,   533,   555,   533,  2505,  1989,   834,  1263,  2014,
     553,   834, -1903,  2552,  3352,   533,  1998,  1999,  2000,  2013,
    2001,  2002,  2003,  2004,  2005,  2006,  2798,   825,  2559,   732,
    2581,  2560,  2592, -1903,  2561,  2565,  2569,  2603,   732,   732,
     732,  2570,  2590,   825,  2325,  2605,  2610,   825,  2611,  2350,
    2350,  2350,  2620,  1835,  1836,  2339,  2612,  2342,  2621,  2632,
    2353,  2614,  1346,  1265,  2615,  2628,   554,  1604,  2629,  -224,
    2361,  2616,  2363,  2617,  2633,  2634,  2635,  2636,  2710,  2637,
     557,  -585,   992,   533, -1903,  2370,   555, -1903,  1266,  2638,
    2373,  2639,  1331, -1903,  2378,  2379,  2640,  2381,  2650,  2385,
    2386,  2646,  1604,  1647,  2657,   559,  2658,  1836,   560,  1268,
    2665,  1960,  2660,  2681,  2672,   557,  2682,   558,  2687,  1906,
    2688,  1860,  1831,  1908,  1909,  2689,   824,  1589,  2700,  2707,
    2708,  2730,   824,  1910, -1903,  2714,  2705,  2716,  1754,  2719,
    -723,  3510,  2729,   560,  2733,   556,  2736,  2740,  2732,  2741,
    2745,   932,  -224,  2742,  1199,   933,  2743,  2747,  2748, -1903,
    2751,  2772,  2774,  1604,  2787,  2789,  2795,  2982,  2983,  1604,
    2796,  2797,  2824,  1957,  1959,  1831,  2825,  2841,  2788,  2844,
    2809,  2848,  3015,  1408,  1589,  2810,  2831,   533,  2823,  2845,
     732,  2855,  2840,  2871,  2851,  2878,  1831,  1604,   557,  2886,
     558,  2868,  -585,  2889,   732,  2896,  3481,  2892,  2895,  2909,
    2897,  2898,  2910,  2912,  2913,  1963,  2923,  -585,  2924,   874,
    2929,  2937,  -585,   559,  2948,  2945,   560,  3723,  2976,  2955,
    2989,  2956,  2995,  3007,  2974,  2977,  3010,  3043,    23,  3034,
    2990,  1604,  3030,  3076,   533,  3092,  2980,  3008, -1903,  3001,
    2997,  3028,  3190,  3032,  3049,  3185,  3050,  3056,  3169, -1903,
    3194,  3163,  3164,  3562,  3165,  3564,  1653,  3206,  3173,  3178,
    3184,  3207,  3216,  -585,  3221,  2413,  3222,   537,  3227, -1903,
    3247, -1903, -1903,  2169,  2129,   533,  2195,   832,  3250,  3258,
    3254,  2130,  2131,  3061,  -585,  3268,  2132,  2133,  2134,  3062,
    1589,   834,  2683,  3269,  3272,  3310,  3273,  3298,  1181,  3572,
    3305,   887,  3063,   824,  3313,  3320,  3322,   533, -1903,  3327,
    3331, -1903, -1903, -1903,   533,   533,  3332,  3333,  3339,   824,
    3340,  3345,  3341,   824,  2992,  3349,  3064,  3350,  3065,  3351,
     533,  3359,  3362,  3365,  3369,  -585,   887,  3364,  3381,  3701,
    3574, -2149,  3576,   533,  -585,  1604,   533, -2150,   533, -2151,
    3380, -2152,  3383, -2153,  3384,  1589,   533, -2154,  3388,   533,
     533,  3399,  3385,  3016,   533,   533,  3662,  3402, -2155, -2156,
    3220,   533, -2157, -2158, -2159,    26,    27,    28, -2160, -2162,
   -2163, -2164, -2165,   533,  1256, -2166,  3651, -2167,   533,  3386,
    3389,  3666,  3036, -1905, -2168, -2169, -2171,  3415,  3397,   533,
   -2172, -2173,  3019,  3420,  1257,  3424,  3427, -2174, -2175, -2176,
   -2177, -2178, -2179, -2180,  3403, -2181,   537,  3066, -2182,  2246,
   -2183,   533, -1368,  3646,  3417,  1079,  3418,  3425,  1989,  3430,
    3435,  3436,  1990,  1991,  3439,  3441,  3443, -2184, -2184, -2184,
    3447,  3449,    33,  3453,  2269,  2271,  1042,  3450,  3454,  3455,
    1258,  1043,  3458,  3461,  3465,  3483,  1408,  3462,  3482,  3484,
    3488,  3495,  3498,   732,  3512,  3500,  3141,   732,  3513,   732,
     533,   533, -1367,  3520,  2350,  1948,  3522,  3528,  3146,  3529,
    2356,    38,  3530,  3543,  3546,   533,   533,  3544,  3067,  3559,
    3566,  3560,  3563,  3068, -1905,  3569,  3575,  3567,   533,  -585,
    3581,  3592,  3594,  3604,  3358,   887,  3610,  3608,  1589,  2852,
    1044,  3626,  3611,  3614,  3620,  3627,    40,  3175,  3632,  3209,
    3628,  1906,  3637,  3644,  3301,  1908,  1909,    43,  3639,  3641,
    3645,  3648,  3649,  3650,  3655,  1910,  3657,  3659,  3660,  3663,
    1470,  2488, -1905,  3069,    44,  3354,  3668,  1259,  3199,  3680,
    3679,   533,  3673,  3681,  3686,  3688,  3687, -1905,  3706,  3696,
    2387,  3070, -1905,  2722,  3698,  3700,  3725, -1905,    45,   932,
     887,  3728,   533,   933,  3690,  1589, -1905,  3730,  2406,  2406,
    3746, -1905,  3017,  1045,  3750,  3749,  3759,  3727,  3726,  3773,
    3783,  1228,   533,   533,  3778,   533,  3785,  3787,  1260,   533,
    3792,  3797,   533,  3808,  3809,  3372,  2760,  2770,  3804,  1261,
    3811,  3091,  2250, -1905,   532,   544,  2362,  1202,  3810,  1046,
     567,  1262,  2875,  2408,  2389,  2820,   567,  3095,  1604,   533,
     822,  3677,   837,  3172, -1905,  1047,   840,   567,   849,  3766,
    3508,   849,  3731,  3724,   869,   869,  1048,  3760,   869,   533,
    1006,   567,   567,  1263,   533,   533,  3542,  1820,  2516,   533,
    1589,  2750,  3722,  2777,   533,  3071,  2847,   533,   533,  3060,
    2332,   887,   533,  1331,  2333,  3072,   533,  3729,  3147,  2746,
     533,  3720,  1049,  2861,  1902, -1905,  2863,  3426, -1905,  3203,
    3024,  1943,  2873,   533, -1905,  2507,  1955,  3189,   822,   822,
      93,  2109,  3431,  1229,  3630,  2104,  2111,  3588,  1265,  1653,
    2105,  2106,   869,   537,  1997,  2110,  3023,   917,   869,   567,
     869,   869,   869,   832,  3694,  3654,  1405,  3784,  3719,  1050,
    3790,  3492,  3311,  1266,  2735, -1905,  1051,   834,  1210,   533,
    1740,  3480,  3149,  1783,  1653,  2316,  1494,   533,  2721,  2900,
    3699,  1787,  1470,  1786,  1268,  1674,  2731,  2284,  1675,  3640,
   -1905,  3565,  1676,  1677,  2315,  1791,   533,   826,  2704,  1495,
    2595,    87,  3257,   825,  3457,  1589,  1461,  2894,  1052,  2893,
    2926,  2135,  2136,  2137,  1522,  2138,  2139,  2140,  2141,  2142,
    2143,  1042,  3514,  1445,  1685,  2609,  1043,  1053,  3643,  3642,
    3035, -2184,  2655,  1447,  1496,  2950,  2724,  1451,  1674,  1452,
    3141,  1675,  1453,  1454,  1455,  1676,  1677,  1456,  2679,  2625,
     874,  2677,  1457,  2039,  3312,  2968,  2656,  3281,  1687,  2249,
    2444,  2602,     0,  1178,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1685,     0, -1905,
       0,    23,     0,     0, -2184,  1044,     0,     0,     0,     0,
   -1905,   732,     0,     0,     0,     0,     0,     0,     0,     0,
    1054,  1589,  2868,     0,     0,  1230,     0,  1589,  3407,     0,
   -1905,  1687, -1905, -1905,     0,     0,    87,   533,   533,     0,
     533,   887,     0,     0,  2663,     0,     0,   732,     0,     0,
       0,     0,     0,     0,   533,  1589,     0,     0,  2868,     0,
       0,     0,     0,   886,     0,     0,     0,    87,     0, -1905,
     533,     0, -1905, -1905, -1905,     0, -2184,  3208,  1045,     0,
       0,     0, -2184, -2184, -2184,     0,  2001,  2002,  2003,  2004,
    2005,  2006,     0, -2184,     0,     0,     0,  2673, -2184,  1589,
       0,     0,     0,     0,     0,   533,     0,     0,     0,     0,
       0,     0,  1256,  3039,  1046,  3041,     0,  3406,     0,     0,
       0,   533,   533,     0,     0,   533,     0,   533,  1653, -2184,
    1047,     0,  1257,     0,     0,     0,     0, -2184,    23,  1470,
    1470,  1048,   533,     0,  3093,  1470, -2184,     0,    26,    27,
      28, -2184,     0,     0,     0,     0,     0,     0,     0,     0,
     533,  3150,  3151,  3152,  3153,     0,  3155,  3156,  3157,  3158,
    3159,     0,     0,     0,     0,   537,     0,  1049,  1258,  3082,
       0,     0,     0,     0,   533,     0,     0,     0,   868,  3083,
   -2184,     0,   876,  2781,  1696,     0,     0,  1674,  2056,     0,
    1675,  1471,     0,     0,  1676,  1677,     0,     0,     0,   824,
       0,     0,     0,  3141,     0,    33,     0,     0,     0,     0,
      87,     0,     0,     0,  1050,     0,     0,     0,     0,   886,
       0,  1051,     0,     0,     0,     0,  1685,     0,     0,     0,
       0,     0,  3525, -2184,     0,     0,     0,  1696,     0,  3084,
       0,     0,  2816,     0,    38,     0,   914,     0,   732,     0,
       0,     0,   919,   533,   922,     0,   926,     0,     0,  2868,
    1687,     0,   533,  1052,   533,  1259,   533,     0,     0,     0,
     533,     0,   533,     0,   533,    26,    27,    28,     0,    40,
       0,     0,  1053,     0,     0,     0,   537, -2184,   533,     0,
      43,     0,     0,   533,   533,     0,   832,     0,   869,     0,
       0,     0,     0,   869,     0,     0,   533,    44,     0,     0,
     834,     0,     0,   567,     0,     0,  1260,  3585,     0,  3587,
       0,     0,     0,   732,     0,     0,  2981,  1261,   533,     0,
       0,    45,     0,     0,  3597,     0,     0,     0,     0,  1262,
   -2184,  3085,    33,     0,     0,    46,  2876,     0,  2877,     0,
       0,     0,  2882,     0,  2885,  1054,     0,     0, -2184,     0,
    2057,     0,  3622,     0,     0,     0,     0,     0,     0,     0,
       0,  1263,     0,     0,     0, -2184,   533,     0,     0,  3625,
   -2184,    38,     0,     0,     0,     0,   533,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   533, -2184,
       0,     0,     0,  1471,     0,     0,  1703,  1704,  1705,  1706,
    1707,  1708,     0,   533,     0,   533,    40,     0,     0, -2184,
       0,     0,     0,     0,     0,  3353,  1265,    43,     0,     0,
    2286,     0,     0,     0,   533,     0,     0,     0,     0,  1653,
       0,     0,     0,     0,    44,     0,   537,     0,     0,     0,
       0,  1266, -2184,    14,    15,     0,   832,     0,   533,  1703,
    1704,  1705,  1706,  1707,  1708,     0,     0,     0,    45,     0,
     834,     0,  1268,   533,  3086,     0,  1696,  3087,     0,     0,
       0,     0,    46,     0,     0,     0,  3141,     0,   732,     0,
       0,   537,     0,     0,     0,     0,     0,     0,     0,  3597,
      23,   832,     0,     0,     0,     0,   981,   567,   567,     0,
       0,   533,     0,  3732,     0,   834,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   533,   533,   533,     0,    23,
       0,     0,     0,     0,  1674,     0,   533,  1675,     0,  3747,
       0,  1676,  1677,     0,   537,  1596,  1680,  1681,  1682,     0,
    1004,   544,     0,     0,   832,     0,   532,     0,   869,     0,
       0,   533,     0,  1683,     0,     0,     0,   822,   834,     0,
       0,  1031,  1031,  1685,   822,     0,     0,  1031,  1058, -2184,
    1686,     0,     0,     0,     0,     0,     0,     0,     0,  1831,
     849,   849,   849,     0,     0,   849,     0,     0,     0,     0,
       0,    87,     0,  1128,  1128,   849,   849,  1687,   849,     0,
     849,     0,     0,     0,  3138,     0,     0,     0,     0,     0,
     533,     0,   869,     0,     0,     0,  3550,   533,   567,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   869,
    1471,  1471,     0,   869,   837,     0,  1471,    26,    27,    28,
       0,  2816,     0,  1470,  1470,  1470,  1470,  1470,  1470,     0,
       0,  1470,  1470,  1470,  1470,  1470,  1470,  1470,  1470,  1470,
    1470,     0,     0, -1920,     0,     0,    26,    27,    28,     0,
       0,     0,  3195,     0,     0,     0,    87,     0,    87,     0,
       0, -2184,   950,     0,   869,  1342,     0,   957,  1703,  1704,
    1705,  1706,  1707,  1708,     0,  1688,     0,     0,   869,   869,
     869,   869,   869,  1364,    33,     0,     0,     0,     0,     0,
       0,     0,  1689,  1042,  3511,    35,  1375,  1690,  1043,     0,
       0,    87,     0,     0,     0,  1596,     0,     0,     0,     0,
       0,     0,     0,    33,     0,  3518,  3519,     0,    87,    37,
    1691,  1692,     0,    38,     0,     0,     0,     0,  1031,  1058,
       0,   869,     0,     0,  1468,     0,  1693,     0,  3531,     0,
    1031,  1031,     0,     0, -1920,     0,     0,   567,     0,     0,
       0,     0,    38,   822,     0,   822,     0,  1044,    40,     0,
       0,     0,     0,     0,   822,     0,     0,     0,     0,    43,
    1674,     0,     0,  1675,   567,     0,  1694,  1676,  1677,  1695,
       0,     0, -2184, -2184, -2184,     0,    44,    40,     0,     0,
       0,  1609, -1920,  1696,     0,     0,  1697,     0,    43,     0,
       0,     0,  3307,     0,     0,     0,     0, -1920,     0,  1685,
      45,     0, -1920,     0,     0,    44,  1686, -1920,     0,   567,
       0,     0,  1470,  1470,    46,     0, -1920,     0,     0,    11,
    1045, -1920,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,     0,  1687,   567,     0,     0,     0,     0,     0,
       0,     0,    87,    46,     0,     0,     0,    14,    15,     0,
    2239,     0,     0, -1920,     0,     0,  1046,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    87,     0,
       0,     0,  1047,     0, -1920,     0,     0,     0,     0,     0,
       0,     0,     0,  1048,     0,     0,  1698,     0,  1734,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,  1471,     0,   567,   567,     0,     0,     0,     0,     0,
       0,   869,  1015,     0,   869,     0,     0,     0,     0,  1049,
       0,     0,     0,     0,     0, -1920,     0,     0, -1920,     0,
       0,  1688,  1470,     0, -1920,     0,  1468,  1128,  1128,     0,
    1231,     0,     0,     0,   869,     0,     0,  1807,  1689,   869,
    1819,     0,     0,  1690,     0,     0,     0,     0,     0,     0,
       0,     0,   869,     0,     0,     0,  1050,     0,     0,     0,
       0,     0,     0,  1051,     0, -1920,     0,  3707,     0,   869,
       0,     0,     0,   869,     0,     0,     0,     0,     0,  1871,
       0,     0,  1693,  1203,     0,     0,     0,     0,  1699,     0,
   -1920,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,     0,     0,     0,     0,  1052,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1053,     0,     0,     0,     0,     0,
       0,    26,    27,    28,     0,     0,     0,     0,  1341,  1696,
       0,  1891,     0,   869,     0,     0,     0,     0,   869,     0,
     874,     0,  1353,  1355,  1358,  1360,  1362,  1673,     0,     0,
       0,     0,  1674,     0,  1936,  1675,     0,     0,     0,  1676,
    1677,  1678,  1679,   981,  1680,  1681,  1682,     0,   981, -1920,
     567,   567,     0,   567,   981,     0,  3478,     0,     0,     0,
   -1920,  1683,     0,     0,     0,  1684,     0,  1054,    33,     0,
       0,  1685,     0,     0,  1596,  1463,     0,     0,  1686,    35,
   -1920,     0, -1920, -1920,  1471,  1471,  1471,  1471,  1471,  1471,
       0,     0,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,
    1471,  1471,     0,    37,     0,  1687,  1674,    38,     0,  1675,
       0,     0,  1698,  1676,  1677,     0,  1598,     0,     0, -1920,
       0,     0, -1920, -1920, -1920,     0,     0,     0,    39,     0,
       0,  3138,  1599,  1468,  1468,     0,     0,     0,     0,  1468,
       0,   532,    40,     0,     0,  1685,     0,     0,     0,     0,
       0,     0, -2184,    43,  1031,     0,   567,  2032,     0,     0,
       0,  1128,  1128,     0,   869,     0,     0,     0,     0,  3545,
      44,     0,   822,     0,     0,   822,     0,     0,     0,  1687,
     822,     0,  1128,   822,     0,     0,     0,     0,   822,     0,
     567,     0,   567,     0,    45,     0,     0,     0,     0,  1079,
       0,     0,  1989,  1688,     0,     0,  1990,  1991,    46,   568,
       0,  1992,  1993,  1994,     0,   568,  1596,     0,     0,   823,
    1689,     0,     0,     0,  1699,  1690,   568, -2184, -2184, -2184,
       0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,     0,
     568,   568,     0,     0,  1964,  2984,     0,     0,  1691,  1692,
       0,     0,     0,     0,     0,     0,  1601,     0,     0,  1470,
    1470,     0,     0,     0,  1693,     0,     0,     0,     0,     0,
       0,     0,  1674,  3616,     0,  1675,     0, -2184,     0,  1676,
    1677,     0,     0,  1471,  1471,     0,     0,   823,   823,     0,
       0,  1965,     0,     0, -2184,     0,     0,     0,  1805, -2184,
       0,  2144,     0,  1809,  1694,     0,  1598,  1695,   568,     0,
       0,  1685,  1966,     0,   567,     0,  1841,     0, -2184,  1596,
       0,  1696,  1599,     0,  1697,  1674,     0,     0,  1675,     0,
    1967,     0,  1676,  1677,     0,  1968,  1079,  1866, -2184,  1989,
       0,     0,     0,  1990,  1991,  1687,     0,     0,  1992,  1993,
    1994,     0,     0,     0,   981,     0,     0,  1468,  1969,     0,
       0,  1970,     0,     0,  1685,  2971,     0,     0,     0,     0,
       0, -2184,     0,     0,     0,     0,  1596,  1971,     0,  1256,
       0,     0,     0,     0,     0,  1128,     0,     0,  1596,     0,
       0,     0,  2312,     0,     0,  1696,     0,     0,  1687,  1257,
    2247,     0,   869,  1471,   869,     0,     0,  1896,     0,     0,
       0,  2985,  1911,     0,  3138,  1996,   869,     0,  1596,  2263,
    2268,  2270,     0,     0,  1698,  1596,     0,     0,     0,     0,
       0,     0,     0,     0,  1468,     0,     0,     0,     0,     0,
       0,     0,     0, -2184,     0,  1258,  1601,     0,     0,     0,
    1042,     0,     0,     0,     0,  1043,     0,     0,     0,   869,
   -2184,   567,     0,     0,  3292, -2184,     0,  1596,     0,     0,
       0,  1596,  1470,  1972,     0,  2319,     0,  1596,  1819,   567,
       0,  1973,     0,     0,     0,     0,     0,     0,  1997,     0,
     567,  2340,   567,  1819,     0,   567, -2184,     0, -2184,  3251,
       0,  1596,     0,  1974, -2184,   567,     0,   567,     0,     0,
       0,     0,     0, -2184,  1044,     0,  3084,     0, -2184,   981,
     567,     0,     0,     0,   981,   567,     0,     0,     0,   567,
     567,  1819,   567,  1975,   567,   567,  1699,     0,     0,  1700,
    1701,  1702,  1259,  1703,  1704,  1705,  1706,  1707,  1708,  3280,
       0,     0,  1996,     0,     0,     0,  2409, -2184,  2046,     0,
       0,  1696,     0,     0,     0,   869,   869,   869,   869,   869,
    1364,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2434,     0,     0,     0,  1045,     0,     0,
       0,     0,     0,  1260,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1261,     0,     0,  2500,     0,     0,
   -2184,     0,     0,     0,  1696,     0,  1262,  1703,  1704,  1705,
    1706,  1707,  1708,  1046,     0,  1997,     0,  1598,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1047,
       0,     0,     0,  1599,     0,     0,     0,  1470,  1263,     0,
    1048,     0,     0,     0,     0,     0,     0,  1468,  1468,  1468,
    1468,  1468,  1468,     0, -2184,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,  1468,  1468,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1049,     0,     0,     0,
       0,  1674,     0,     0,  1675,   567,     0,     0,  1676,  1677,
       0,     0,     0,  1265,     0,     0,  1998,  1999,  2000,   869,
    2001,  2002,  2003,  2004,  2005,  2006,     0, -2184,     0,     0,
       0,   822,     0,     0,     0,  1598,     0,   822,  1266,     0,
    1685,     0,   567,  1050,     0,     0,     0, -2184,   567,     0,
    1051,  1599,     0,     0,     0,     0,     0,  2607,  2607,  1268,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   568,     0,  1687,  1079,     0,  1601,  1989,     0,
    1471,  1471,  1990,  1991,     0,     0, -2184,  1992,  1993,  1994,
       0,     0,  1052,  1703,  1704,  1705,  1706,  1707,  1708,     0,
       0,     0,     0,     0,  2972,     0,  2248,     0,  2251,     0,
       0,  1053,     0,     0,  1470,     0,     0,     0,     0,     0,
    2259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,     0,     0,   567,     0, -2184,
       0,     0,   567,  1596,     0,     0,  1703,  1704,  1705,  1706,
    1707,  1708,     0,  1998,  1999,  2000,     0,  2001,  2002,  2003,
    2004,  2005,  2006,  2301,     0,     0,  1468,  1468,     0,     0,
       0,     0, -2184,     0,     0,  1601,     0,  1598,     0,     0,
       0,     0,     0,     0,  1054,  2144,     0,     0,     0, -2184,
       0,  1468,     0,  1599, -2184,  3586,     0,     0,     0,     0,
    1596,     0,     0,     0,     0,     0,     0,    26,    27,    28,
       0,  1602,     0,     0,     0,     0,     0,     0,   822,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1079,
     567,     0,  1989, -2184,   822,     0,  1990,  1991,   822,  2263,
       0,  1992,  1993,  1994,     0,     0,     0,     0,  1674,     0,
       0,  1675,     0,     0,     0,  1676,  1677,  1678,  1679,     0,
    1680,  1681,  1682,     0,     0,     0,   568,   568,     0,  2420,
    2421,  2423,  2424,  2425,    33,  2427,     0,  1683,     0,     0,
    1598,     0,  2272,   567,     0,     0,  1468,  1685,  1128,   567,
    1696,  1996,     0,  1471,  1686,     0,  1599,     0,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,  1891,     0,     0,
       0,     0,     0,    38,     0,     0,  1596,  1601,     0,     0,
    1471,  1687,     0,     0,     0,     0,   823,     0,     0,     0,
       0,  1079,     0,     0,  1989,     0,     0,  1598,  1990,  1991,
       0,     0,  3571,  1992,  1993,  1994,     0,     0,    40,  1598,
       0,     0,     0,  1599,     0,     0,     0,     0,     0,    43,
    3288,     0,     0,     0,  1997,  1599,     0,  2273,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,  1598,
       0,  1596,     0,     0,     0,     0,  1598,   568,     0,     0,
    1891,     0,     0, -2184,     0,  1599,   869,     0,     0,     0,
      45,  1602,  1599,     0,     0,     0,     0,  1891,   869,   869,
     869,     0,     0,  2576,    46,     0,     0,     0,     0,  1688,
    1601,   567,     0,   869,     0,     0,     0,   869,  1598,     0,
     869,     0,  1598,     0,     0,     0,  1689,     0,  1598,     0,
       0,  1690,     0,     0,  1599,  1996,     0,     0,  1599,     0,
       0,     0,     0,     0,  1599,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,  1691,  1692,     0,     0,  1471,     0,
       0,     0,  1364,     0,     0,     0,   869,  1601,  1599,     0,
    1693,     0,   981,     0,     0,     0,     0,     0,     0,  1601,
       0,     0,  1596,     0,  1603,     0,  1891,  1891,     0,  1891,
       0,     0,     0,     0,     0, -2184,     0,     0,     0,     0,
       0,     0,  1703,  1704,  1705,  1706,  1707,  1708,  1997,  1601,
    1694,     0,     0,  1695,     0,     0,  1601,     0,   532,     0,
       0,     0,     0,     0,  1596,     0,  1488,  1696,     0,     0,
    1697,     0,   823,     0,   823,     0,  2899,  1996,     0,     0,
       0,     0,     0,   823,   869,   869,   869,     0,     0,     0,
       0,     0,     0,  1524,     0,     0,     0,   567,  1601,  1468,
     567,     0,  1601,     0,     0,     0,   567,     0,  1601,     0,
       0,     0,  1998,  1999,  2000,     0,  2001,  2002,  2003,  2004,
    2005,  2006,     0,     0,     0,     0,   869,     0,     0,     0,
       0,  1596,  1601,     0,     0,     0,     0,     0,   568,     0,
       0,  2144,     0,     0,     0,     0,     0,     0,     0,     0,
    1997,     0,     0,   567,     0,  1471,     0,   567,     0,     0,
       0,     0,     0,  1658,     0,     0,     0,     0,     0,     0,
    1698,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1468,  1468,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3002,     0,     0,
       0,     0,     0,     0,  3012,     0,  1596,     0,     0,     0,
       0,  2263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   568,   568,     0,     0,     0,  2276,     0,   869,
       0,     0,     0,   567,     0,  1128,     0,   567,   567,  3040,
     567,     0,  1602,     0,  1891,  1819,  1891,     0,  1936,     0,
       0,     0,     0,     0,     0,     0,  1998,  1999,  2000,     0,
    2001,  2002,  2003,  2004,  2005,  2006,     0,     0,     0,   567,
       0,  1819,  1699,     0,     0,  1700,  1701,  1702,     0,  1703,
    1704,  1705,  1706,  1707,  1708,     0,   567,   567,   567,   567,
    1819,   567,   567,   567,   567,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2821,     0,     0,     0,  1598,     0,     0,     0,     0,     0,
    2434,  1596,  2834,  2835,  2837,     0,     0,     0,     0,   869,
    1599,     0,     0,     0,     0,  1603,     0,  2850,  3188,     0,
    1602,  2853,     0,     0,  2856,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1596,     0,  1998,  1999,
    2000,     0,  2001,  2002,  2003,  2004,  2005,  2006,  1936,     0,
       0,  1598,     0,  1471,     0,  1891,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1468,  1599,     0,     0,
    2872,     0,   567,     0,     0,     0,     0,     0,     0,   869,
     869,   869,   869,     0,     0,     0,     0,     0,     0,   568,
     568,     0,   568,  1468,     0,     0,  1468,  1596,     0,     0,
     567,   981,     0,  1596,     0,     0,     0,  1674,     0,  3266,
    1675,     0,     0,  1603,  1676,  1677,  1678,  1679,     0,  1680,
    1681,  1682,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1596,   567,     0,  1601,     0,  1683,     0,     0,  3274,
     567,     0,     0,     0,     0,     0,  1685,     0,  2906,  2907,
    2908,     0,     0,  1686,     0,     0,     0,     0,     0,     0,
       0,     0,  1602,     0,     0,     0,     0,  1598,     0,     0,
       0,     0,  3302,     0,   822,  1596,     0,     0,     0,     0,
    1687,     0,     0,  1599,     0,     0,     0,  1128,     0,     0,
       0,  1601,     0,     0,  3317,   568,     0,     0,     0,  2263,
       0,     0,     0,     0,     0,  2144,     0,     0,     0,     0,
       0,   823,     0,     0,   823,     0,     0,     0,     0,   823,
    1819,     0,   823,     0,     0,     0,  1891,   823,     0,  2068,
       0,  2072,  1598,     0,     0,     0,     0,     0,     0,   981,
     567,  1468,     0,     0,     0,     0,     0,   869,  1599,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,     0,
       0,     0,     0,     0,  3373,  1602,     0,     0,  2013,     0,
       0,     0,     0,  2014,     0,     0,     0,     0,  1688,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,     0,  1689,     0,     0,     0,     0,
    1690,     0,     0,  3031,     0,     0,     0,  1601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1602,  1691,  1692,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1602,     0,     0,     0,     0,  1693,
       0,     0,     0,  1598,     0,     0,  3390,     0,     0,     0,
    1891,     0,     0,  2156,     0,     0,     0,     0,  1603,  1599,
       0,  2434,     0,     0,  1602,     0,     0,     0,     0,     0,
       0,  1602,  1601,     0,  1243,     0,     0,     0,     0,  1694,
    1244,     0,  1695,     0,     0,  1598,     0,     0,  1256,     0,
       0,     0,     0,  3428,     0,     0,  1696,     0,  1468,  1697,
       0,  1599,     0,  3181,     0,     0,     0,     0,  1257,     0,
       0,     0,     0,  1602,     0,  1603,     0,  1602,     0,     0,
       0,     0,     0,  1602,  3444,     0,     0,  1603,     0,     0,
       0,   567,     0,     0,     0,     0,     0,     0,   567,     0,
       0,     0,     0,     0,     0,     0,     0,  1602,     0,     0,
       0,     0,  1598,     0,  1258,  3463,     0,  1603,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,     0,  1599,     0,
       0,     0,     0,  3229,  3230,  3231,  3232,     0,  3475,     0,
       0,     0,     0,  1601,     0,  1245,  3002,  1031,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1698,
     568,     0,     0,     0,     0,     0,  1603,     0,   567,     0,
    1603,     0,     0,   567,     0,     0,  1603,     0,   568,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,  1417,   568,
     836,   568,     0,     0,   568,  1079,     0,  1598,  1989,   567,
    1603,     0,  1990,  1991,   568,     0,   568,  1992,  1993,  1994,
       0,  1259,     0,  1599,     0,     0,     0,     0,     0,   568,
     567,   567,     0,     0,   568,     0,     0,     0,   568,   568,
       0,   568,  1596,   568,   568,     0,     0,     0,   869,     0,
    3188,     0,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,  1418,  1419,     0,     0,     0,     0,
       0,     0,  1260,     0,   869,     0,     0,  3554,     0,     0,
       0,  1699,     0,  1261,  1700,  1701,  1702,     0,  1703,  1704,
    1705,  1706,  1707,  1708,     0,  1262,  1468,     0,  1128,     0,
     567,  1031,     0,  1031,     0,  1420,  1421,     0,   567,  1422,
    1423,  3360,     0,     0,     0,     0,  1246,     0,     0,     0,
       0,     0,  1598,     0,     0,     0,     0,  1263,     0,     0,
    1128,     0,     0,     0,  3317,     0,     0,     0,  1599,     0,
       0,     0,     0,     0,     0,   869,     0,  1601,     0,     0,
       0,     0,     0,     0,     0,     0,  1674,  1598,     0,  1675,
       0,     0,     0,  1676,  1677,  1678,  1679,     0,  1680,  1681,
    1682,     0,     0,  1599,     0,   869,  1264,     0,     0,     0,
    1248,     0,  1265,     0,     0,  1683,  1424,  1425,     0,     0,
       0,     0,     0,     0,     0,  1685,     0,     0,     0,     0,
       0,     0,  1686,     0,   568,     0,     0,  1266,     0,     0,
       0,     0,  1267,     0,  3444,     0,     0,     0,  1598,     0,
       0, -2184,  1128,     0,  1598,     0,     0,     0,  1268,  1687,
     823,     0,     0,     0,  1599,     0,   823,  3554,     0,     0,
    1599,  2594,     0,  1143,  1143,     0,     0,  2072,     0,  1602,
       0,     0,  1598,  1426,  1427,  1428,  1429,  1430,  1431,  1432,
    1433,     0,  1601,  1434,  1435,     0,     0,  3188,  1599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   981,
     981,     0,  3554,   981,     0,     0,     0,  1250,     0,     0,
       0,  2032,     0,     0,  1997,     0,  1598,  1601,     0,     0,
       0,     0,   567,     0,     0,     0,  1602,     0,     0,     0,
       0,     0,  1599,     0,     0,     0,     0,     0,     0,  1286,
       0,     0,     0,  1334,  1339,     0,     0,  1688,  3188,     0,
       0,  2156,     0,     0,     0,  3554,   568,     0,  1436,  1437,
       0,  1658,  1603,     0,  1689,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,  1601,     0,
       0,     0,     0,     0,  1601,     0,     0,     0,     0,     0,
       0,     0,  1691,  1692,     0,     0,  1390,     0,     0,  1438,
    1439,   981,     0,     0,     0,     0,     0,     0,  1693,     0,
       0,     0,  1601,     0,  1414,     0,  2263,     0,     0,  1603,
    1462,  3317,     0,  1464,  2263,     0,  1475,  1478,  1483,  1486,
    1598,     0,     0,     0,     0,     0,     0,   823,     0,     0,
       0,     0,  1602,     0,     0,     0,  1599,     0,  1694,   568,
       0,  1695,     0,   823,     0,     0,  1601,   823,     0,     0,
       0,     0,  3527,     0,     0,  1696,     0,     0,  1697,     0,
       0,  1528,  1334,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3552,     0,
       0,     0,     0,  1615,     0,     0,     0,     0,     0,  1440,
    1441,     0,   568,     0,     0,     0,     0,  1602,  2739,     0,
       0,     0,     0,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1442,  1443,  1643,  1644,  1645,     0,  1650,
    1654,     0,  1998,  1999,  2000,  1603,  2001,  2002,  2003,  2004,
    2005,  2006,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3595,
       0,     0,     0,     0,     0,  1717,     0,     0,  1698,     0,
    1601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1528,  1528,     0,     0,     0,     0,  3621,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1603,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1602,     0,
       0,     0,  1761,     0,     0,     0,  1777,  1782,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1143,  1143,     0,
     568,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1674,
    1602,     0,  1675,     0,     0,     0,  1676,  1677,     0,     0,
       0,  1680,  1681,  1682,     0,     0,     0,     0,     0,     0,
    1699,     0,     0,  1700,  1701,  1702,     0,  1703,  1704,  1705,
    1706,  1707,  1708,     0,     0,     0,     0,     0,  1685,  1334,
    1982,     0,     0,     0,     0,  1686,     0,     0,     0,     0,
    1334,  1603,     0,  1598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1602,     0,  1599,
       0,     0,  1687,     0,     0,  1334,     0,     0,     0,     0,
       0,     0,  1674,     0,     0,  1675,     0,     0,     0,  1676,
    1677,  1678,  1679,  1603,  1680,  1681,  1682,     0,     0,     0,
       0,     0,     0,     0,     0,  1079,     0,     0,  1989,     0,
       0,  1683,  1990,  1991,     0,  2962,     0,  1992,  1993,  1994,
       0,  1685,     0,     0,     0,     0,   568,     0,  1686,   568,
    1674,     0,     0,  1675,  3289,  2068,     0,  1676,  1677,  1678,
    1679,     0,  1680,  1681,  1682,     0,     0,     0,     0,     0,
       0,     0,  1602,     0,     0,  1687,     0,     0,     0,  1683,
    1603,     0,     0,  1979,     0,     0,     0,     0,     0,  1685,
    1688,  1674,     0,     0,  1675,     0,  1686,     0,  1676,  1677,
    1678,  1679,  2957,  1680,  1681,  1682,  2156,  1689,     0,     0,
       0,     0,  1690,  1601,     0,     0,     0,     0,     0,     0,
    1683,     0,     0,  1687,     0,     0,     0,     0,     0,     0,
    1685,     0,     0,     0,     0,  1691,  1692,  1686,     0,     0,
       0,     0,     0,     0,     0,     0,  1483,     0,  1483,  1483,
       0,  1693,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1143,  1143,     0,  1687,  1603,     0,     0,     0,     0,
       0,     0,     0,  1688,     0,     0,     0,     0,     0,     0,
       0,     0,  1143,     0,     0,     0,     0,  1602,     0,     0,
    1689,  1694,   568,     0,  1695,  1690,   568,   568,     0,   568,
       0,     0,     0,     0,     0,     0,     0,     0,  1696,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1691,  1692,
       0,  1688,  1602,     0,     0,     0,     0,     0,   568,     0,
       0,     0,     0,     0,  1693,     0,     0,     0,  1689,     0,
       0,  1996,     0,  1690,     0,   568,   568,   568,   568,     0,
     568,   568,   568,   568,   568,     0,     0,     0,     0,     0,
       0,     0,  1688,     0,     0,     0,  1691,  1692,     0,     0,
       0,     0,     0,     0,  1694,     0,     0,  1695,     0,  1689,
    1603,     0,  1693,  1602,  1690,     0,  2118,     0,     0,  1602,
       0,  1696,     0,     0,  1697,  2122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1691,  1692,  2153,
       0,  1698,     0,     0,  1997,  1603,     0,  1602,     0,     0,
       0,     0,  1694,  1693,     0,  1695,     0,     0,     0,  2167,
       0,     0,     0,     0,     0,     0,     0,  2172,     0,  1696,
       0,     0,  1697,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2183,  2068,     0,     0,     0,  2192,  2193,     0,     0,     0,
    2206,  1602,     0,  1694,  2209,     0,  1695,  2217,  2218,  2219,
    2220,  2221,  2222,  2223,  2224,  2225,  1603,     0,  2226,  2594,
    1696,     0,  1603,  1697,     0,  1143,     0,  1334,     0,     0,
       0,     0,     0,     0,  1698,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2252,     0,     0,     0,     0,
    1603,  2156,     0,     0,     0,     0,     0,     0,     0,  2156,
       0,     0,     0,  1699,     0,     0,  1700,  1701,  1702,     0,
    1703,  1704,  1705,  1706,  1707,  1708,     0,     0,     0,     0,
       0,     0,  1698,     0,     0,  1644,  1645,     0,     0,     0,
       0,     0,     0,   823,  1603,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1243,     0,     0,     0,     0,
       0,  1244,     0,     0,     0,  1602,     0,     0,     0,  1256,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1257,
       0,     0,     0,     0,     0,     0,  1699,     0,     0,  1700,
    1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,   568,
       0,     0,     0,  2162,     0,     0,     0,     0,     0,     0,
       0,     0,  1998,  1999,  2000,     0,  2001,  2002,  2003,  2004,
    2005,  2006,  2391,     0,     0,  1258,     0,     0,     0,  1334,
       0,     0,  2402,  2403,  1699,     0,     0,  1700,  1701,  1702,
       0,  1703,  1704,  1705,  1706,  1707,  1708,     0,  1603,     0,
       0,  2162,     0,     0,     0,     0,  1245,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -48,     0,     0,     0,  1699,     0,     0,  1700,  1701,
    1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,
       0,     0,  2525,     0,     1,     0,     0,     0,     0,  1390,
    2508,     0,     0,     0,     2,     0,     3,     4,     0,     0,
    2513,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       0,     0,  1259,     0,     6,     0,     0,     0,  2526,  2527,
       0,  2528,     0,     7,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,     0,     0,     0,     0,     0,     9,     0,    10,     0,
    2554,  2555,     0,     0,  2252,     0,     0,     0,     0,     0,
      11,     0,    12,  1260,     0,     0,     0,     0,     0,  1674,
       0,     0,  1675,    13,  1261,     0,  1676,  1677,  1678,  1679,
    3452,  1680,  1681,  1682,     0,  2580,  1262,  2594,    14,    15,
      16,     0,     0,  2589,     0,     0,     0,     0,  1683,    17,
       0,     0,     0,     0,     0,    18,     0,  1246,  1685,     0,
       0,  1528,     0,  1334,    19,  1686,    20,    21,  1263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1602,     0,
       0,    22,     0,     0,     0,    23,     0,     0,     0,     0,
       0,     0,  1687,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2623,     0,     0,     0,     0,   568,  2630,     0,
       0,    24,   568,     0,     0,     0,     0,  2364,     0,     0,
       0,  1248,     0,  1265,     0,     0,     0, -1525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   568,     0,
       0,  2642,     0,     0,  1472,  2648,     0,     0,  1266,     0,
    2653,  2654,     0,  2365,    25,     0,     0,     0,     0,   568,
     568,     0,     0,     0,     0,     0,     0,     0,     0,  1268,
       0,  1603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   568,     0,     0,     0,     0,     0,     0,     0,
    1688,     0,     0,     0,     0,     0,     0,  2675,     0,     0,
    2678,     0,  2680,     0,     0,     0,     0,  1689,     0,     0,
       0,     0,  1690,     0,     0,     0,     0,     0,  2684,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1250,   568,
       0,     0,    26,    27,    28,  1691,  1692,  2156,     0,     0,
      29,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,  1693,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1761,     0,     0,     0,     0,     0,     0,     0,
    1711,     0,     0,     0,    31,     0,     0,     0,     0,  1782,
    2224,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,  1694,     0,     0,  1695,     0,     0,     0,  1143,    33,
       0,  1418,  1419,     0,     0,     0,    34,     0,  1696,  2744,
      35,  1697,     0,     0,     0,     0,     0,     0,     0,  1711,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,    38,     0,
       0,     0,  1420,  1421,     0,     0,  1422,  1423,     0,     0,
       0,     0,     0,     0,  1674,     0,  1472,  1675,     0,    39,
       0,  1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,
       0,     0,     0,    40,     0,     0,    41,  1645,     0,    42,
       0,     0,     0,  1683,    43,     0,  1334,     0,     0,     0,
       0,     0,     0,  1685,     0,     0,     0,     0,     0,     0,
    1686,    44,     0,     0,     0,     0,     0,  1674,     0,     0,
    1675,  1698,     0,  1711,  1676,  1677,  1678,  1679,     0,  1680,
    1681,  1682,     0,  1424,  1425,    45,     0,  1687,     0,     0,
       0,   568,     0,     0,     0,     0,  1683,     0,     0,    46,
       0,     0,   -48,     0,     0,     0,  1685,     0,     0,     0,
       0,     0,     0,  1686,     0,     0,     0,     0,     0,     0,
       0,  1711,     0,     0,     0,     0,  1711,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1687,  2866,     0,     0,     0,     0,     0,     0,     0,     0,
    1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,     0,     0,
    1434,  1435,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1711,     0,     0,
       0,     0,     0,  1699,     0,  1688,  1700,  1701,  1702,     0,
    1703,  1704,  1705,  1706,  1707,  1708,     0,     0,     0,     0,
    2627,  1711,  1689,     0,     0,     0,     0,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1691,  1692,     0,     0,     0,  1436,  1437,     0,  1688,     0,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,  1711,
       0,  1711,     0,  1472,  1472,  1689,  2007,     0,     0,  1472,
    1690,     0,  1711,     0,     0,  1711,     0,     0,     0,     0,
    1711,  2947,     0,  1711,     0,     0,  1438,  1439,  2949,  2122,
       0,     0,     0,  1691,  1692,     0,  1694,     0,     0,  1695,
       0,     0,     0,     0,  2958,     0,     0,     0,     0,  1693,
       0,     0,     0,  1696,     0,     0,  1697,  2970,     0,     0,
    2973,     0,  2975,     0,     0,  1711,     0,     0,     0,     0,
    2979,     0,     0,     0,     0,     0,     0,     0,  2986,  2987,
       0,     0,     0,     0,     0,  2994,     0,     0,     0,  1694,
       0,     0,  1695,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3009,     0,     0,     0,  1696,     0,     0,  1697,
       0,     0,     0,  3025,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1440,  1441,     0,  1674,
       0,     0,  1675,     0,     0,  1143,  1676,  1677,  1678,  1679,
       0,  1680,  1681,  1682,     0,     0,     0,     0,     0,     0,
    1442,  1443,  1711,     0,     0,     0,  1698,     0,  1683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1685,  1711,
    2086,     0,     0,     0,     0,  1686,     0,     0,     0,     0,
    1711,  1711,  1711,     0,     0,  1761,     0,  1711,     0,     0,
       0,  1711,     0,     0,     0,     0,     0,     0,     0,  2391,
    2391,     0,  1687,     0,     0,     0,     0,     0,     0,  1698,
       0,     0,  3170,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1711,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3212,     0,     0,  1699,     0,
       0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,     0,     0,     0,     0,  2641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1711,     0,
    1688,     0,     0,     0,     0,     0,  3245,  3246,     0,  3249,
       0,     0,     0,     0,  1711,     0,     0,  1689,     0,  1711,
       0,  1699,  1690,     0,  1700,  1701,  1702,     0,  1703,  1704,
    1705,  1706,  1707,  1708,     0,     0,  2007,     0,  2659,     0,
       0,     0,     0,  3270,     0,  1691,  1692,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1693,     0,  3279,     0,     0,     0,     0,  3282,  3283,
       0,     0,     0,  3284,     0,     0,     0,     0,  3287,     0,
       0,  3290,  3291,     0,     0,     0,  2391,  1334,     0,     0,
    3299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1694,     0,  1674,  1695,     0,  1675,  1143,     0,     0,
    1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,  1696,     0,
       0,  1697,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1683,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1685,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,  3348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1687,     0,     0,     0,
    3367,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1711,     0,     0,     0,
       0,  1698,     0,     0,  2007,  2007,     0,  1472,  1472,  1472,
    1472,  1472,  1472,     0,     0,  1472,  1472,  1472,  1472,  1472,
    1472,  1472,  1472,  1472,  1472,  2007,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1688,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1418,  1419,     0,     0,     0,
       0,  1689,     0,     0,     0,     0,  1690,     0,     0,     0,
    1674,  3422,  3423,  1675,  2866,     0,     0,  1676,  1677,  1678,
    1679,     0,  1680,  1681,  1682,     0,     0,     0,     0,  1691,
    1692,     0,     0,     0,     0,     0,  1420,  1421,     0,  1683,
    1422,  1423,     0,  1699,  1654,  1693,  1700,  1701,  1702,  1685,
    1703,  1704,  1705,  1706,  1707,  1708,  1686,     0,     0,     0,
    2887,     0,     0,     0,     0,  1711,     0,     0,     0,  1711,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2648,
       0,     0,     0,  1687,     0,  1694,     0,     0,  1695,     0,
       0,     0,     0,     0,     0,  3467,  3468,     0,     0,  3469,
    1711,  1645,  1696,     0,     0,  1697,     0,     0,     0,     0,
       0,     0,     0,     0,  1711,     0,     0,  1424,  1425,  1711,
       0,     0,     0,  1711,  1711,  1711,  1711,  1711,  1711,  1711,
    1711,     0,     0,     0,  3494,     0,  1472,  1472,     0,  1711,
    1711,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1711,     0,     0,  1711,     0,  3506,     0,
       0,     0,     0,     0,  1711,  1711,  1711,  1711,  1711,  1711,
    1711,  1711,  1711,  1711,     0,     0,     0,     0,     0,     0,
       0,  1688,     0,     0,  1426,  1427,  1428,  1429,  1430,  1431,
    1432,  1433,     0,     0,  1434,  1435,     0,     0,  1689,  1711,
       0,     0,     0,  1690,     0,  1698,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1691,  1692,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1693,     0,     0,     0,     0,     0,     0,     0,
    3245,     0,     0,     0,  3568,     0,  1472,     0,  1143,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1436,
    1437,     0,  3578,     0,     0,     0,     0,  2391,  2391,     0,
       0,     0,  1694,     0,     0,  1695,     0,     0,     0,     0,
    1143,     0,     0,     0,     0,     0,     0,     0,     0,  1696,
       0,     0,  1697,     0,     0,   735,     0,     0,     0,     0,
    1438,  1439,  3606,     0,     0,     0,     0,  1699,     0,     0,
    1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,
       0,     0,     0,     0,  2954,     0,     0,     0,  1711,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,     0,  1711,
    1711,  1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,
    3631,     0,   736,     0,     0,     0,     0,     0,     0,     0,
    3245,     0,     0,  1683,     0,     0,     0,     0,   737,     0,
       0,     0,  1143,  1685,     0,     0,     0,     0,     0,     0,
    1686,     0,     0,     0,     0,     0,     0,     0,     0,  3658,
       0,     0,  1698,     0,     0,     0,     0,     0,     0,     0,
    1440,  1441,     0,     0,     0,     0,     0,  1687,  3678,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   738,     0,
       0,     0,     0,     0,  1442,  1443,     0,     0,   739,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   740,     0,     0,     0,  1711,   741,     0,     0,     0,
    1711,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1711,  1711,  1711,     0,     0,  2007,  2007,
    2007,  2007,  2007,  2007,     0,   742,     0,  2007,  2007,  2007,
    2007,  2007,  2007,  2007,  2007,  2007,  2007,     0,     0,     0,
       0,  1711,  1711,     0,     0,     0,     0,     0,     0,  3741,
    3741,  3741,     0,     0,  1699,  1688,     0,  1700,  1701,  1702,
    3752,  1703,  1704,  1705,  1706,  1707,  1708,  1711,     0,   743,
       0,  2967,  1689,     0,   744,     0,  1711,  1690,     0,  1674,
       0,     0,  1675,     0,     0,  3741,  1676,  1677,  1678,  1679,
       0,  1680,  1681,  1682,     0,     0,     0,     0,     0,     0,
    1691,  1692,     0,     0,     0,     0,     0,     0,  1683,     0,
    1711,     0,     0,     0,     0,     0,  1693,  1711,  1685,     0,
       0,     0,     0,     0,     0,  1686,     0,     0,     0,  1711,
       0,     0,     0,     0,     0,  1711,     0,     0,     0,     0,
    1711,  1711,     0,     0,  3741,     0,   745,     0,  2007,  2007,
       0,     0,  1687,     0,     0,     0,  1694,     0,     0,  1695,
       0,   746,  1711,  1472,  1472,  1711,     0,  1711,     0,     0,
       0,  1711,     0,  1696,     0,     0,  1697,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   747,     0,     0,   748,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     749,     0,     0,   750,  1674,     0,     0,  1675,     0,     0,
       0,  1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,
       0,  1711,     0,   751,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,     0,     0,   752,     0,     0,
    1688,     0,     0,  1685,     0,   754,     0,     0,     0,     0,
    1686,     0,     0,     0,     0,   755,     0,  1689,     0,     0,
       0,   756,  1690,     0,     0,     0,  1698,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1687,     0,     0,
       0,     0,     0,     0,     0,  1691,  1692,     0,     0,     0,
     757,     0,     0,     0,     0,     0,     0,     0,     0,  1674,
       0,  1693,  1675,     0,     0,     0,  1676,  1677,  1678,  1679,
       0,  1680,  1681,  1682,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1685,     0,
       0,  1694,     0,  1711,  1695,  1686,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1696,     0,
       0,  1697,     0,     0,     0,     0,  1472,     0,     0,     0,
       0,     0,  1687,     0,     0,  1688,     0,     0,  1699,     0,
       0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,     0,  1689,     0,     0,  3042,     0,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1691,  1692,     0,     0,  1711,     0,  1711,     0,     0,     0,
       0,     0,     0,     0,     0,  1711,  1693,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1711,     0,     0,
    1711,     0,  1711,     0,     0,     0,  1711,     0,     0,  2007,
    2007,  1698,     0,  1711,  1711,     0,     0,     0,     0,     0,
    1688,  1711,     0,     0,     0,     0,  1694,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,  1711,  1689,     0,     0,
       0,     0,  1690,  1696,     0,     0,  1697,     0,     0,     0,
       0,     0,  1711,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1691,  1692,     0,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,  1693,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1472,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1694,     0,  1699,  1695,     0,  1700,  1701,  1702,   736,
    1703,  1704,  1705,  1706,  1707,  1708,     0,     0,  1696,     0,
    3293,  1697,     0,     0,     0,   737,  1698,     0,     0,     0,
       0,     0,  1674,     0,     0,  1675,     0,     0,     0,  1676,
    1677,  1678,  1679,     0,  1680,  1681,  1682,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1685,     0,     0,     0,   738,     0,  1711,  1686,     0,
       0,     0,     0,     0,     0,   739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   740,     0,
       0,     0,     0,   741,     0,  1687,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1711,
       0,  1698,     0,     0,     0,     0,     0,  2007,  1472,     0,
       0,     0,   742,     0,     0,     0,     0,     0,  1699,     0,
       0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,     0,  1711,  1711,     0,  3300,  1711,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   743,  1711,     0,     0,
       0,   744,     0,     0,     0,     0,  1711,     0,     0,  1711,
    1711,  1711,     0,     0,  1711,     0,     0,  1711,  1711,     0,
       0,     0,     0,  1688,     0,     0,  1711,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1689,     0,     0,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,  1699,     0,     0,  1700,  1701,  1702,     0,
    1703,  1704,  1705,  1706,  1707,  1708,     0,   555,  1691,  1692,
    3391,     0,     0,   745,     0,  1711,     0,     0,     0,     0,
       0,  2007,     0,     0,  1693,     0,     0,     0,   746,     0,
       0,     0,     0,     0,  1711,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   747,  1694,     0,   748,  1695,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   749,     0,     0,
     750,  1696,     0,     0,  1697,     0,     0,     0,     0,  1711,
    1711,     0,     0,     0,     0,     0,     0,     0,  2007,     0,
     751,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   752,     0,     0,     0,     0,     0,
       0,   753,   754,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   755,     0,  1711,  1711,  1711,     0,   756,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1711,     0,     0,     0,     0,     0,   757,     0,     0,
       0,     0,     0,  1711,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1711,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1711,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1711,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1699,     0,  1711,  1700,
    1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,
       0,     0,     0,  3474,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1711,     0,     0,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1711,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,  1711,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,  1711,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,    14,    15,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,    23,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,  1106,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    26,    27,    28,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    33,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    35,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,    37,     0,
     460,   461,    38,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,    40,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   819,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,    44,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,    45,
       0,     0,     0,     0,  1119,  1120,  1121,     0,     0,     0,
       0,  1122,     0,  1123,  3442,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1076,   836,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,  1089,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,  1092,   198,     0,
     199,   200,   201,   202,   203,   204,    14,    15,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,    23,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1102,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,  1106,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      26,    27,    28,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    33,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    35,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,    37,     0,   460,   461,    38,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1116,    40,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   819,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,    44,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1118,     0,    45,     0,     0,     0,     0,  1119,  1120,
    1121,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,  1089,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,    23,   241,   242,
     243,   244,   245,   246,   247,   248,     0,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,  1106,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    26,    27,    28,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    33,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
      38,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1116,    40,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   819,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,    44,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,    45,     0,     0,
       0,     0,  1119,  1120,  1121,     0,     0,     0,     0,  1122,
       0,  1123,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
    1291,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,  1292,   130,
     131,   132,     0,     0,     0,  1293,     0,  1082,     0,     0,
    1294,   134,   135,     0,  1295,   137,   138,  1296,   140,   141,
     142,   143,  1083,  1297,  1084,  1085,     0,  1298,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,  1299,
       0,  1300,   167,   168,   169,   170,   171,  1301,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,  1302,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
    1303,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
    1304,     0,  1305,   242,   243,  1306,  1307,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,  1308,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,  1309,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,  1310,  1311,   286,  1312,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,  1313,   296,  1314,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1315,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,  1316,  1105,   332,   333,   334,   335,  1106,   336,   337,
    1317,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,   900,   351,
     352,   353,  1318,   355,  1319,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,  1320,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,  1321,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,  1322,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,  1323,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,  1324,   458,   815,
       0,     0,   460,   461,     0,   462,  1325,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,  1326,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1327,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,  1328,   501,  1329,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1118,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  1123,  1330,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
    1479,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,  1089,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,  1092,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,  1480,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1102,   291,   292,   293,     0,  1481,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,  1106,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,  1482,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1116,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1118,     0,     0,     0,     0,     0,     0,
    1119,  1120,  1121,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,  1291,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,  1293,     0,  1082,     0,     0,  1294,   134,
     135,     0,  1295,   137,   138,  1296,   140,   141,   142,   143,
    1083,  1297,  1084,  1085,     0,  1298,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,  1299,     0,  1300,
     167,   168,   169,   170,   171,  1301,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,  1302,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,  1304,     0,
    1305,   242,   243,  1306,  1307,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,  1308,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,  1309,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,  1310,
    1311,   286,  1312,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,  1313,   296,  1314,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1315,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,  1316,
    1105,   332,   333,   334,   335,  1106,   336,   337,  1317,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
    1318,   355,  1319,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,  1320,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,  1321,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,  1322,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,  1323,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,  1324,   458,   815,     0,     0,
     460,   461,     0,   462,  1325,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,  1326,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1327,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,  2399,   501,  1329,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,     0,
       0,     0,     0,     0,  1119,  1120,  1121,     0,     0,     0,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1076,   836,  1077,  1078,     0,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,    14,    15,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,    23,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,     0,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      26,    27,    28,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    33,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    35,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,    37,     0,   460,   461,    38,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,    40,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   819,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,    44,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,    45,     0,     0,  1291,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,  1293,     0,  1082,     0,     0,  1294,   134,   135,     0,
    1295,   137,   138,  1296,   140,   141,   142,   143,  1083,  1297,
    1084,  1085,     0,  1298,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,  1299,     0,  1300,   167,   168,
     169,   170,   171,  1301,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,  1302,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,  1304,     0,  1305,   242,
     243,  1306,  1307,   246,   247,   248,     0,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,  1308,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,  1309,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,  1310,  1311,   286,
    1312,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,  1313,   296,  1314,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1315,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,  1316,  1105,   332,
     333,   334,   335,  1106,   336,   337,  1317,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,  1318,   355,
    1319,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,  1320,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,  1321,   412,   413,   414,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,  1322,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,  1323,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,  1324,   458,   815,     0,     0,   460,   461,
       0,   462,  1325,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,  1326,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1327,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,  1329,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,     0,     0,     0,
       0,     0,  1119,  1120,  1121,     0,     0,     0,     0,  1122,
       0,  1123,  3296,     0,     0,     0,  1124,  1125,  1126,  1127,
    1291,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,  1293,     0,  1082,     0,     0,
    1294,   134,   135,     0,  1295,   137,   138,  1296,   140,   141,
     142,   143,  1083,  1297,  1084,  1085,     0,  1298,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,  1299,
       0,  1300,   167,   168,   169,   170,   171,  1301,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,  1302,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
    1304,     0,  1305,   242,   243,  1306,  1307,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,  1308,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,  1309,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,  1310,  1311,   286,  1312,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,  1313,   296,  1314,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1315,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,  1316,  1105,   332,   333,   334,   335,  1106,   336,   337,
    1317,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,     0,   351,
     352,   353,  1318,   355,  1319,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,  1320,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,  1321,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,  1322,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,  1323,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,  1324,   458,   815,
       0,     0,   460,   461,     0,   462,  1325,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,  1326,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1327,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,  1329,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1118,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  1123,     0,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129, -1197,   130,   131,   132,     0,     0,     0,     0,
   -1197,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,  1089,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,  1092,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1102,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,  1106,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442, -1197,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1116,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1118,     0,     0,     0,     0,     0,     0,
    1119,  1120,  1121,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,  1758,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,  1106,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,     0,
       0,     0,     0,     0,  1119,  1120,  1121,     0,     0,     0,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1773,   836,  1077,  1078,  1079,  1774,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
    1775,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,  1089,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,  1092,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1102,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,  1106,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1116,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1118,     0,     0,     0,     0,     0,     0,  1119,  1120,
    1121,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,  1089,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,  1480,   241,   242,
     243,   244,   245,   246,   247,   248,     0,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,  1106,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1116,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,     0,     0,     0,
       0,     0,  1119,  1120,  1121,     0,     0,     0,     0,  1122,
       0,  1123,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
     121,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,  1082,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1083,   145,  1084,  1085,     0,     0,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,   807,
       0,  1089,   167,   168,   169,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,   273,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,   295,   296,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1103,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,   330,  1105,   332,   333,   334,   335,  1106,   336,   337,
     338,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,   411,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   815,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,   818,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1116,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1118,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  1123,  2147,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
    2802,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,  1089,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,  1092,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1102,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,  1106,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1116,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1118,     0,     0,     0,     0,     0,     0,
    1119,  1120,  1121,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,  1106,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,  2865,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,     0,
       0,     0,     0,     0,  1119,  1120,  1121,     0,     0,     0,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1076,   836,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,  1089,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,  1092,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1102,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,  1106,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1116,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,  2993,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1118,     0,     0,     0,     0,     0,     0,  1119,  1120,
    1121,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,  3233,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,  1089,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,  3234,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,     0,  3235,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,  1106,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,  3236,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1116,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,     0,     0,     0,
       0,     0,  1119,  1120,  1121,     0,     0,     0,     0,  1122,
       0,  3237,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
     121,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,  3470,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,  1082,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1083,   145,  1084,  1085,     0,     0,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,   807,
       0,  1089,   167,   168,   169,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,   273,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,   295,   296,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1103,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,   330,  1105,   332,   333,   334,   335,  1106,   336,   337,
     338,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,   411,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   815,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,   818,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1116,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1118,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  1123,     0,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,  1089,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,  1092,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1102,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,  1106,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1116,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1118,     0,     0,     0,     0,     0,     0,
    1119,  1120,  1121,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,  1106,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,     0,
       0,     0,     0,     0,  1778,  1779,  1121,     0,     0,     0,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  2294,   836,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,  1089,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,  1092,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1102,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,  1106,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    1116,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1118,     0,     0,     0,     0,     0,     0,  1119,  1120,
    1121,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,  1089,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,     0,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,  1106,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1116,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,     0,     0,     0,
       0,     0,  1119,  2390,  1121,     0,     0,     0,     0,  1122,
       0,  1123,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
     121,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,  1082,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1083,   145,  1084,  1085,     0,     0,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,   807,
       0,  1089,   167,   168,   169,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,   273,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,   284,   285,   286,   287,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,   295,   296,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1103,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,   330,  1105,   332,   333,   334,   335,  1106,   336,   337,
     338,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,   411,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   815,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,   818,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  1116,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1118,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  2647,     0,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,  1089,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,  1092,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,  1102,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,  1106,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,  1116,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  1118,     0,     0,     0,     0,     0,     0,
    1119,  3294,  1121,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,  3234,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  3235,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,  1106,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,  3236,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,  1118,     0,     0,
       0,     0,     0,     0,  1119,  1120,  1121,     0,     0,     0,
       0,  1122,     0,  3237,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1076,   836,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,  3738,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,  1089,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,  3739,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,  1092,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,   284,   285,   286,   287,   288,   289,   290,
    1102,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,  1106,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,  3740,   484,   485,     0,     0,   486,   487,   488,
    1116,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,  1118,     0,     0,     0,     0,     0,     0,  1119,  1120,
    1121,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,  1079,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,  1089,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,  3739,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,  1092,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,     0,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,  1102,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,  1106,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
    1109,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,  1111,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,  3740,   484,   485,     0,
       0,   486,   487,   488,  1116,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,  1118,     0,     0,     0,     0,
       0,     0,  1119,  1120,  1121,     0,     0,     0,     0,  1122,
       0,  1123,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
     121,  1076,   836,  1077,  1078,  1079,  1080,  1081,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,  1082,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142, -2184,  1083,   145,  1084,  1085,     0,     0,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,   807,
       0,  1089,   167,   168,   169,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,  3739,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,  1092,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
     240,     0,   241,   242,   243,   244, -2184,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259, -2184,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,   273,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,     0,     0,   286,   287,   288,   289,   290,  1102,   291,
     292,   293,     0,     0,   294,   295,   296, -2184,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1103,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,   330,  1105,   332,   333,   334,   335,     0,   336,   337,
       0,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,  1109,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,   411,   412,   413,
     414,  1111,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0, -2184,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   815,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,   818,   481,   482,
    3740,   484,   485,     0,     0,   486,   487,   488,  1116,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531, -2184,
       0,     0,     0,     0,     0,     0,  1119,  1120,  1121,     0,
       0,     0,     0,  1122,     0,  1123,     0,     0,     0,     0,
    1124,  1125,  1126,  1127,   121,  1076,   836,  1077,  1078,  1079,
    1080,  1081,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,     0,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,  1109,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,     0,     0,     0,     0,     0,     0,
    1466,  1467,     0,     0,     0,     0,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   121,  1076,
     836,  1077,  1078,     0,  1080,  1081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,   284,
     285,   286,   287,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,     0,   336,   337,   338,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  2280,
    2281,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,     0,     0,
       0,     0,     0,     0,  2282,  2283,     0,     0,     0,     0,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   121,  1076,   836,  1077,  1078,  1079,  1080,  1081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,  1083,   145,  1084,  1085,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,  1087,  1088,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1090,   194,   195,  1091,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,  1094,   226,   227,   228,   229,   230,   231,
     808,  1095,   233,     0,   234,   235,  1096,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,  1097,  1098,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,  1099,  1100,     0,
    1101,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1104,   330,  1105,   332,   333,   334,   335,     0,
     336,   337,   338,   339,  1107,   810,   341,  1108,   343,   344,
     345,     0,   346,   347,     0,     0,  1109,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1110,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,  1111,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,  1112,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,  1113,  1114,     0,
       0,   473,   474,   816,   476,   817,  1115,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,  1117,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,     0,     0,     0,     0,     0,  1466,  1467,
       0,     0,     0,     0,     0,  1122,     0,  1123,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   121,  1076,   836,  1077,
    1078,     0,  1080,  1081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,  1082,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,  1083,   145,
    1084,  1085,     0,     0,   148,   149,   150,   151,   152,  1086,
     805,   153,   154,   155,   156,  1087,  1088,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1090,   194,   195,  1091,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,  1094,   226,   227,
     228,   229,   230,   231,   808,  1095,   233,     0,   234,   235,
    1096,   237,     0,   238,     0,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,  3255,  1097,  1098,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,  1099,  1100,     0,  1101,     0,   283,   284,   285,   286,
     287,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1103,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1104,   330,  1105,   332,
     333,   334,   335,     0,   336,   337,   338,   339,  1107,   810,
     341,  1108,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1110,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,  1112,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,  1113,  1114,     0,     0,   473,   474,   816,   476,   817,
    1115,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,  1117,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,     0,     0,     0,     0,
     121,  1076,   836,  1077,  1078,     0,  1080,  1081,     0,  1122,
       0,  2916,     0,     0,     0,     0,  1124,  1125,  1126,  1127,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,  1082,     0,     0,
     133,   134,   135,     0,   136,   137,   138,   139,   140,   141,
     142,   143,  1083,   145,  1084,  1085,     0,     0,   148,   149,
     150,   151,   152,  1086,   805,   153,   154,   155,   156,  1087,
    1088,   159,     0,   160,   161,   162,   163,   806,     0,   807,
       0,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
    1090,   194,   195,  1091,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,  1093,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,  1094,   226,   227,   228,   229,   230,   231,   808,  1095,
     233,     0,   234,   235,  1096,   237,     0,   238,     0,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
       0,  1097,  1098,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,   273,   274,
     275,   276,   277,   278,   279,  1099,  1100,     0,  1101,     0,
     283,   284,   285,   286,   287,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,   295,   296,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  1103,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1104,   330,  1105,   332,   333,   334,   335,     0,   336,   337,
     338,   339,  1107,   810,   341,  1108,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,   354,   355,   356,   812,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   813,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
    1112,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   815,
       0,     0,   460,   461,     0,   462,   463,   464,   465,   466,
     467,   468,   469,     0,   470,  1113,  1114,     0,     0,   473,
     474,   816,   476,   817,  1115,   478,   479,   818,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,  1117,   500,     0,   501,   502,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     0,
       0,     0,     0,     0,   121,  1076,   836,  1077,  1078,     0,
    1080,  1081,     0,  1122,     0,  2916,     0,     0,     0,     0,
    1124,  1125,  1126,  1127,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,  1082,     0,     0,   133,   134,   135,     0,   136,   137,
     138,   139,   140,   141,   142,   143,  1083,   145,  1084,  1085,
       0,     0,   148,   149,   150,   151,   152,  1086,   805,   153,
     154,   155,   156,  1087,  1088,   159,     0,   160,   161,   162,
     163,   806,     0,   807,     0,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,  1090,   194,   195,  1091,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,  1093,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,  1094,   226,   227,   228,   229,
     230,   231,   808,  1095,   233,     0,   234,   235,  1096,   237,
       0,   238,     0,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,     0,  1097,  1098,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,   273,   274,   275,   276,   277,   278,   279,  1099,
    1100,     0,  1101,     0,   283,   284,   285,   286,   287,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,   295,
     296,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,  1103,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,  1104,   330,  1105,   332,   333,   334,
     335,     0,   336,   337,   338,   339,  1107,   810,   341,  1108,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,   354,   355,   356,   812,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   813,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,  1110,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,   411,   412,   413,   414,  1111,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,  1112,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   815,     0,     0,   460,   461,     0,   462,
     463,   464,   465,   466,   467,   468,   469,     0,   470,  1113,
    1114,     0,     0,   473,   474,   816,   476,   817,  1115,   478,
     479,   818,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,  1117,   500,     0,   501,   502,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,     0,     0,     0,     0,   121,  1076,
     836,  1077,  1078,  1079,  1080,  1081,     0,  1122,     0,  1123,
       0,     0,     0,     0,  1124,  1125,  1126,  1127,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,  1082,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,     0,
    1083,   145,  1084,  1085,     0,     0,   148,   149,   150,   151,
     152,  1086,   805,   153,   154,   155,   156,  1087,  1088,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,  1089,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1090,   194,
     195,  1091,   197,  1092,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,     0,   220,     0,   221,   222,   223,   224,  1094,
     226,   227,   228,   229,   230,   231,   808,  1095,   233,     0,
     234,   235,  1096,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,     0,   246,   247,   248,     0,  1097,
    1098,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,  1099,  1100,     0,  1101,     0,   283,     0,
       0,   286,   287,   288,   289,   290,  1102,   291,   292,   293,
       0,     0,   294,   295,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1103,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1104,   330,
    1105,   332,   333,   334,   335,     0,   336,   337,     0,   339,
    1107,   810,   341,  1108,   343,   344,   345,     0,   346,   347,
       0,     0,  1109,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1110,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,  1111,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,  1112,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,  1113,  1114,     0,     0,   473,   474,   816,
     476,   817,  1115,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,  1116,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,  1117,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,     0,     0,
       0,     0,   121,     0,  1119,  1120,  1121,     0,     0,  1081,
       0,  1122,     0,  1123,     0,     0,     0,     0,  1124,  1125,
    1126,  1127,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,  1082,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,  1086,   805,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     808,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  1103,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,     0,   810,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   816,   476,   817,     0,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,     0,     0,     0,     0,   539,  2030,     0,     0,
       0,     0,  2031,  1081,     0,  1122,     0,  2194,     0,     0,
       0,     0,  1124,  1125,  1126,  1127,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,   135,     0,
       0,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,     0,     0,     0,   242,
     243,   540,     0,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,     0,     0,   286,
       0,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,     0,   296,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   541,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   339,     0,   340,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     372,     0,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,     0,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,     0,     0,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1124,  1125,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,  1030,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,  -585,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,  -585,
     234,   235,   236,   237,  -585,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,  -585,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,  -585,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,  -585,   346,   347,
       0,     0,   348,   349,   350,     0,  -585,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,  -585,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1199,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,   258,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
       0,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,  2454,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2593,  3456,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,  1293,     0,     0,     0,     0,  2455,   134,   135,     0,
    2456,   137,   138,  2457,   140,   141,   142,     0,     0,  2458,
       0,     0,     0,  1298,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,     0,     0,   159,     0,   160,
     161,   162,   163,     0,     0,  2459,     0,  2460,   167,   168,
     169,   170,   171,  2461,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,  2462,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   194,   195,     0,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   233,     0,   234,   235,
       0,   237,     0,   238,     0,   239,  2463,     0,  2464,   242,
     243,  2465,  2466,   246,   247,   248,     0,     0,     0,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,  2467,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,  2468,     0,   275,   276,   277,   278,
     279,     0,     0,     0,     0,     0,   283,  2469,  2470,   286,
    2471,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,  2472,   296,  2473,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  2474,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,  2475,     0,   332,
     333,   334,     0,     0,   336,   337,  2476,   339,     0,     0,
     341,     0,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,     0,  2477,   355,
    2478,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
       0,  2479,   374,   375,     0,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,  2480,   412,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,  1322,   429,   430,   431,   432,   433,   434,     0,
     436,   437,     0,  2481,   439,   440,     0,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,  2482,   458,     0,     0,     0,   460,   461,
       0,   462,  2483,   464,   465,   466,   467,   468,   469,     0,
     470,     0,     0,     0,     0,   473,   474,     0,   476,     0,
       0,   478,   479,  2484,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  2485,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,     0,     0,   500,     0,
     501,  2486,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
    2454,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   528,   529,   530,   531,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,  2487,     0,     0,  1293,     0,     0,     0,     0,
    2455,   134,   135,     0,  2456,   137,   138,  2457,   140,   141,
     142,     0,     0,  2458,     0,     0,     0,  1298,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,     0,
       0,   159,     0,   160,   161,   162,   163,     0,     0,  2459,
       0,  2460,   167,   168,   169,   170,   171,  2461,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,  2462,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   194,   195,     0,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     233,     0,   234,   235,     0,   237,     0,   238,     0,   239,
    2463,     0,  2464,   242,   243,  2465,  2466,   246,   247,   248,
       0,     0,     0,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,  2467,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,  2468,     0,
     275,   276,   277,   278,   279,     0,     0,     0,     0,     0,
     283,  2469,  2470,   286,  2471,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,  2472,   296,  2473,     0,   298,
     299,   300,   301,   302,   303,   304,   305,  2474,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,  2475,     0,   332,   333,   334,     0,     0,   336,   337,
    2476,   339,     0,     0,   341,     0,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,     0,  2477,   355,  2478,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,     0,  2479,   374,   375,     0,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,  2480,   412,   413,
     414,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,  1322,   429,   430,   431,
     432,   433,   434,     0,   436,   437,     0,  2481,   439,   440,
       0,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,  2482,   458,     0,
       0,     0,   460,   461,     0,   462,  2483,   464,   465,   466,
     467,   468,   469,     0,   470,     0,     0,     0,     0,   473,
     474,     0,   476,     0,     0,   478,   479,  2484,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,  2485,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
       0,     0,   500,     0,   501,  2486,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,     0,     0,     0,     0,   994,     0,
       0,     0,     0,     0,     0,   528,   529,   530,   531,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,  3202,   130,   131,   132,
       3,     4,     0,   575,     0,     0,     0,     0,   580,   134,
     135,     0,   582,   137,   138,   583,   140,   141,   142,   584,
     585,   586,   587,   588,     0,   590,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   593,   594,   159,
       0,   160,   161,   162,   163,   596,     0,   598,     0,   600,
     167,   168,   169,   170,   171,   601,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   604,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   606,   194,
     195,   607,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,    14,    15,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   617,
     226,   227,   228,   229,   230,   231,   618,     0,   233,     0,
     234,   235,   621,   237,     0,   238,     0,   239,   624,    23,
     626,   242,   243,   627,   628,   246,   247,   248,     0,   630,
     631,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   633,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   636,   637,   275,   276,
     277,   278,   279,   638,   639,     0,   641,     0,   283,   643,
     644,   286,   645,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,   649,   296,   650,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   652,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   653,   654,
     655,   332,   333,   334,   656,     0,   336,   337,   658,   339,
       0,   660,   341,   661,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   667,
     668,   355,   669,   670,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    26,    27,    28,     0,
     370,   371,   675,   676,   374,   375,   677,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   680,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   683,   412,   413,   414,   684,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    33,   686,   429,   430,   431,   432,   433,
     434,   687,   436,   437,    35,   689,   439,   440,   690,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   692,   458,   693,    37,     0,
     460,   461,    38,   462,   697,   464,   465,   466,   467,   468,
     469,     0,   470,   699,   700,     0,     0,   473,   474,   703,
     476,   704,     0,   478,   479,   706,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,   709,    40,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   995,   713,
     500,     0,   501,   715,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,    44,   511,   512,   513,   514,
     515,   516,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   730,   528,   529,   530,   531,     0,   121,    45,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   805,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,    14,    15,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   808,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,   240,    23,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,     0,   291,   292,   293,
     809,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
       0,   810,   341,   342,   343,   344,   345,     0,   346,   347,
       0,   811,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    26,    27,    28,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,   415,
     814,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    33,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    35,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,    37,     0,
     460,   461,    38,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   816,
     476,   817,     0,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,    40,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   819,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,    44,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,   121,    45,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   820,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   134,
     135,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   805,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   806,     0,   807,     0,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   808,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,   284,
     285,   286,   287,   288,   289,   290,     0,   291,   292,   293,
     809,     0,   294,   295,   296,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
       0,   810,   341,   342,   343,   344,   345,     0,   346,   347,
       0,   811,   348,   349,   350,     0,     0,   351,   352,   353,
     354,   355,   356,   812,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   813,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,   411,   412,   413,   414,   415,
     814,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   815,     0,     0,
     460,   461,     0,   462,   463,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   816,
     476,   817,     0,   478,   479,   818,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   819,   499,
     500,     0,   501,   502,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   121,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   820,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,   133,   134,   135,
       0,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   805,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   806,     0,   807,     0,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   808,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,   284,   285,
     286,   287,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,   295,   296,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,   336,   337,   338,   339,     0,
     810,   341,   342,   343,   344,   345,     0,   346,   347,     0,
     811,   348,   349,   350,     0,     0,   351,   352,   353,   354,
     355,   356,   812,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   813,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,   411,   412,   413,   414,   415,   814,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   815,     0,     0,   460,
     461,     0,   462,   463,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   816,   476,
     817,     0,   478,   479,   818,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,   502,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1038,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,   133,   134,   135,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
     805,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   806,     0,   807,     0,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   808,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,   284,   285,   286,
     287,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,   295,   296,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,     0,   810,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,   354,   355,
     356,   812,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     813,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,   411,   412,   413,   414,   415,   814,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   815,     0,     0,   460,   461,
       0,   462,   463,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   816,   476,   817,
       0,   478,   479,   818,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,   502,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,   133,   134,   135,     0,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,   805,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   806,     0,   807,     0,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,     0,   199,   200,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,     0,     0,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,     0,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   808,     0,   233,     0,   234,   235,   236,
     237,     0,   238,     0,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
       0,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,   283,   284,   285,   286,   287,
     288,   289,   290,     0,   291,   292,   293,     0,     0,   294,
     295,   296,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,   336,   337,   338,   339,     0,   810,   341,
     342,   343,   344,   345,     0,   346,   347,     0,     0,   348,
     349,   350,     0,     0,   351,   352,   353,   354,   355,   356,
     812,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,     0,     0,     0,   370,   371,   813,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   815,     0,     0,   460,   461,     0,
     462,   463,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   816,   476,   817,     0,
     478,   479,   818,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
     502,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3553,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,    14,    15,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,    23,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    26,    27,    28,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    33,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      35,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,    37,     0,   460,   461,    38,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,    40,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   819,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,    44,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   539,    45,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,   910,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,    23,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    26,    27,    28,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    33,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,    38,   911,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   912,
     472,     0,     0,   913,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,    40,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   819,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,    44,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   539,    45,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,    23,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    26,    27,    28,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    33,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,    38,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,    40,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   819,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,    44,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   539,    45,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,     0,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1014,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1523,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2155,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   134,   135,     0,     0,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,   169,   170,   171,     0,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,     0,     0,     0,   242,   243,   540,     0,   246,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,     0,     0,   286,     0,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,     0,   296,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   541,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   331,   332,   333,   334,   335,     0,   336,
     337,     0,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,     0,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,     0,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,     0,     0,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2306,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2593,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,     0,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
     258,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2738,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2963,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,   258,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
       0,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3451,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,   135,     0,
       0,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,     0,     0,     0,   242,
     243,   540,     0,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,     0,     0,   286,
       0,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,     0,   296,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   541,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   339,     0,   340,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     372,     0,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,     0,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,     0,     0,     0,
       0,     0,     0,     0,  3788,     0,     0,     0,     0,     0,
       0,  2262,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,     0,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,     0,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,   169,
     170,   171,     0,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,     0,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,     0,   199,   200,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,     0,     0,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,     0,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,     0,   239,     0,     0,     0,   242,   243,
     540,     0,   246,   247,   248,     0,   249,   250,   251,   252,
       0,   253,   254,   255,   256,   257,   258,   259,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,   283,     0,     0,   286,     0,
     288,   289,   290,     0,   291,   292,   293,     0,     0,   294,
       0,   296,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   541,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   331,   332,   333,
     334,   335,     0,   336,   337,     0,   339,     0,   340,   341,
     342,   343,   344,   345,     0,   346,   347,     0,     0,   348,
     349,   350,     0,     0,   351,   352,   353,     0,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,     0,     0,     0,   370,   371,   372,
       0,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,     0,     0,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2262,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,     0,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   258,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,  3096,  1395,   836,     0,     0,  2129,  1080,
       0,     0,     0,     0,     0,  2130,  2131,     0,     0,  3301,
    2132,  2133,  2134,   122,   123,   124,   125,   126,   127,   128,
     129,   571,   130,   131,   132,   572,   573,   574,  3097,   576,
     577,   578,   579,  3098,   134,   135,   581,  3099,   137,   138,
    3100,   140,   141,   142,     0,  1537,  3101,  1539,  1540,   589,
    3102,   148,   149,   150,   151,   152,   591,   592,   153,   154,
     155,   156,  1542,  1543,   159,   595,   160,   161,   162,   163,
       0,   597,  3103,   599,  3104,   167,   168,   169,   170,   171,
    3105,   173,   174,   175,   602,   176,   177,   178,   179,   180,
     181,   603,  3106,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,  1548,   194,   195,  1549,   197,   608,   198,
     609,   199,   200,   201,   202,   203,   204,   610,   611,   205,
     206,   207,   208,   612,   613,   209,   210,  1093,   212,   213,
     614,   214,   215,   216,   615,   217,   218,   219,   220,   616,
     221,   222,   223,   224,     0,   226,   227,   228,   229,   230,
     231,     0,   619,   233,   620,   234,   235,  1550,   237,   622,
     238,   623,   239,  3107,   625,  3108,   242,   243,  2465,  3109,
     246,   247,   248,   629,     0,     0,   251,   252,   632,   253,
     254,   255,   256,   257,   258,   259,  3110,   261,   262,   263,
     264,   634,   265,   266,   267,   268,   269,   270,   271,   635,
     272,  3111,     0,   275,   276,   277,   278,   279,  1556,  1557,
     640,  1558,   642,   283,  3112,  3113,   286,  3114,   288,   289,
     290,   646,   291,   292,   293,   647,   648,   294,  3115,   296,
    3116,   651,   298,   299,   300,   301,   302,   303,   304,   305,
    3117,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,  1565,  3118,  1567,   332,   333,   334,  3119,
     657,   336,   337,  3120,   339,   659,     0,   341,  1569,   343,
     344,   345,   662,   346,   347,   663,   664,  3121,   349,   350,
     665,   666,   351,   352,     0,  3122,   355,  3123,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   671,   672,   673,   674,   370,   371,     0,  3124,   374,
     375,     0,   377,   378,   379,   678,   380,   381,   382,   383,
     384,   385,   679,   386,   387,   388,   389,   390,  1573,   392,
     393,   394,   395,   681,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   682,   409,   410,
    3125,   412,   413,   414,  1575,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   685,  3126,
     429,   430,   431,   432,   433,   434,  3127,   436,   437,   688,
    3128,   439,   440,  1579,   442,   691,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
    3129,   458,     0,   694,   695,   460,   461,   696,   462,  3130,
     464,   465,   466,   467,   468,   469,   698,   470,  1582,  1583,
     701,   702,   473,   474,     0,   476,     0,   705,   478,   479,
    3131,   481,   482,   483,   484,   485,  3132,   708,   486,   487,
     488,  3133,   710,   489,   490,   491,   492,   711,   493,   494,
     495,   496,   497,     0,  1587,   500,   714,   501,  3134,   503,
     504,   505,   506,   507,   508,   509,   716,   717,   510,   718,
     719,   511,   512,   513,   514,   515,   516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   528,   529,
     530,   531,     0,   539,     0,  2135,  2136,  2137,  2129,  3135,
    3136,  2140,  2141,  2142,  2143,  2130,  2131,     0,     0,     0,
    2132,  2133,  2134,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,     0,     0,  2135,  2136,  2137,     0,  2138,
    2139,  2140,  2141,  2142,  2143,  1674,     0,     0,  1675,     0,
       0,     0,  1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,
       0,     0,     0,  1674,     0,     0,  1675,     0,     0,     0,
    1676,  1677,  1678,  1679,  1683,  1680,  1681,  1682,     0,     0,
       0,     0,     0,     0,  1685,     0,     0,     0,     0,     0,
       0,  1686,  1683,     0,     0,     0,     0,     0,  1674,     0,
       0,  1675,  1685,     0,     0,  1676,  1677,  1678,  1679,  1686,
    1680,  1681,  1682,     0,     0,     0,  1674,     0,  1687,  1675,
       0,     0,     0,  1676,  1677,  1678,  1679,  1683,  1680,  1681,
    1682,     0,     0,     0,     0,     0,  1687,  1685,     0,     0,
       0,     0,     0,     0,  1686,  1683,     0,     0,     0,     0,
       0,  1674,     0,     0,  1675,  1685,     0,     0,  1676,  1677,
    1678,  1679,  1686,  1680,  1681,  1682,     0,     0,     0,     0,
       0,  1687,     0,     0,     0,     0,     0,     0,     0,     0,
    1683,     0,     0,     0,     0,     0,     0,     0,     0,  1687,
    1685,     0,     0,  1674,     0,     0,  1675,  1686,     0,     0,
    1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,     0,
       0,     0,     0,     0,     0,     0,  1688,     0,     0,     0,
       0,     0,  1683,     0,  1687,     0,     0,     0,     0,     0,
       0,     0,  1685,  1689,  1688,     0,     0,     0,  1690,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1689,     0,     0,     0,     0,  1690,     0,     0,     0,
       0,  1691,  1692,     0,     0,     0,  1687,     0,     0,  1688,
       0,     0,     0,     0,     0,     0,     0,  1693,     0,  1691,
    1692,     0,     0,     0,     0,     0,  1689,  1688,     0,     0,
       0,  1690,     0,     0,     0,  1693,     0,     0,     0,     0,
       0,     0,     0,     0,  1689,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,  1691,  1692,     0,  1694,     0,     0,
    1695,     0,  1688,     0,     0,     0,     0,     0,     0,     0,
    1693,     0,  1691,  1692,  1696,  1694,     0,  1697,  1695,  1689,
       0,     0,     0,     0,  1690,     0,     0,     0,  1693,     0,
       0,     0,  1696,     0,     0,  1697,     0,     0,     0,     0,
       0,     0,     0,     0,  1688,     0,     0,  1691,  1692,     0,
    1694,     0,     0,  1695,     0,     0,     0,     0,     0,     0,
       0,  1689,     0,  1693,     0,     0,  1690,  1696,  1694,     0,
    1697,  1695,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1696,     0,     0,  1697,  1691,
    1692,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1694,     0,  1693,  1695,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1698,     0,     0,
    1696,     0,     0,  1697,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,     0,     0,     0,     0,
       0,     0,     0,  1674,     0,  1694,  1675,     0,  1695,     0,
    1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,     0,
       0,     0,  1696,     0,     0,  1697,     0,     0,     0,     0,
    1698,     0,  1683,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1685,     0,     0,     0,     0,     0,  1698,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1687,     0,     0,     0,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,  1699,
       0,     0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,
    1707,  1708,     0,     0,     0,     0,  3503,  1699,     0,     0,
    1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,
       0,     0,     0,     0,  3607,  1698,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1699,     0,     0,  1700,  1701,  1702,     0,  1703,
    1704,  1705,  1706,  1707,  1708,     0,     0,     0,     0,  3667,
    1699,     0,     0,  1700,  1701,  1702,     0,  1703,  1704,  1705,
    1706,  1707,  1708,     0,  1688,     0,     0,  3689,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1689,     0,     0,     0,  1699,  1690,     0,  1700,  1701,
    1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,
    1874,     0,     0,     0,  1674,     0,     0,  1675,     0,  1691,
    1692,  1676,  1677,  1678,  1679,     0,  1680,  1681,  1682,     0,
       0,     0,     0,     0,     0,  1693,     0,  1699,     0,     0,
    1700,  1701,  1702,  1683,  1703,  1704,  1705,  1706,  1707,  1708,
       0,     0,  2988,  1685,     0,     0,     0,     0,     0,     0,
    1686,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1694,     0,     0,  1695,     0,
       0,     0,     0,     0,     0,     0,     0,  1687,     0,     0,
       0,     0,  1696,     0,     0,  1697,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1688,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,     0,     0,     0,     0,
       0,     0,  1689,     0,     0,     0,     0,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1691,  1692,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1694,     0,     0,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1696,     0,     0,  1697,  1699,     0,     0,
    1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,
       0,     0,  3464,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1698,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   570,     0,     0,     0,  1699,     0,
       0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,     0,     0,  3647,   122,   123,   124,   125,   126,   127,
     128,   129,   571,   130,   131,   132,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   134,   135,   581,   582,   137,
     138,   583,   140,   141,   142,   584,   585,   586,   587,   588,
     589,   590,   148,   149,   150,   151,   152,   591,   592,   153,
     154,   155,   156,   593,   594,   159,   595,   160,   161,   162,
     163,   596,   597,   598,   599,   600,   167,   168,   169,   170,
     171,   601,   173,   174,   175,   602,   176,   177,   178,   179,
     180,   181,   603,   604,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   606,   194,   195,   607,   197,   608,
     198,   609,   199,   200,   201,   202,   203,   204,   610,   611,
     205,   206,   207,   208,   612,   613,   209,   210,   211,   212,
     213,   614,   214,   215,   216,   615,   217,   218,   219,   220,
     616,   221,   222,   223,   224,   617,   226,   227,   228,   229,
     230,   231,   618,   619,   233,   620,   234,   235,   621,   237,
     622,   238,   623,   239,   624,   625,   626,   242,   243,   627,
     628,   246,   247,   248,   629,   630,   631,   251,   252,   632,
     253,   254,   255,   256,   257,   258,   259,   633,   261,   262,
     263,   264,   634,   265,   266,   267,   268,   269,   270,   271,
     635,   272,   636,   637,   275,   276,   277,   278,   279,   638,
     639,   640,   641,   642,   283,   643,   644,   286,   645,   288,
     289,   290,   646,   291,   292,   293,   647,   648,   294,   649,
     296,   650,   651,   298,   299,   300,   301,   302,   303,   304,
     305,   652,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   653,   654,   655,   332,   333,   334,
     656,   657,   336,   337,   658,   339,   659,   660,   341,   661,
     343,   344,   345,   662,   346,   347,   663,   664,   348,   349,
     350,   665,   666,   351,   352,   667,   668,   355,   669,   670,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   671,   672,   673,   674,   370,   371,   675,   676,
     374,   375,   677,   377,   378,   379,   678,   380,   381,   382,
     383,   384,   385,   679,   386,   387,   388,   389,   390,   680,
     392,   393,   394,   395,   681,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   682,   409,
     410,   683,   412,   413,   414,   684,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   685,
     686,   429,   430,   431,   432,   433,   434,   687,   436,   437,
     688,   689,   439,   440,   690,   442,   691,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   692,   458,   693,   694,   695,   460,   461,   696,   462,
     697,   464,   465,   466,   467,   468,   469,   698,   470,   699,
     700,   701,   702,   473,   474,   703,   476,   704,   705,   478,
     479,   706,   481,   482,   483,   484,   485,   707,   708,   486,
     487,   488,   709,   710,   489,   490,   491,   492,   711,   493,
     494,   495,   496,   497,   712,   713,   500,   714,   501,   715,
     503,   504,   505,   506,   507,   508,   509,   716,   717,   510,
     718,   719,   511,   512,   513,   514,   515,   516,   720,   721,
     722,   723,   724,   725,   726,   727,   728,   729,   730,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,  2168,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,     0,     0,     0,     0,     0,     0,
       0,  2880,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   994,  1395,   836,     0,     0,     0,  1080,     0,     0,
    2883,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,   575,     0,     0,     0,
       0,   580,   134,   135,     0,   582,   137,   138,   583,   140,
     141,   142,   584,   585,   586,   587,   588,     0,   590,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     593,   594,   159,     0,   160,   161,   162,   163,   596,     0,
     598,     0,   600,   167,   168,   169,   170,   171,   601,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
     604,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   606,   194,   195,   607,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   617,   226,   227,   228,   229,   230,   231,   618,
    1396,   233,     0,   234,   235,   621,   237,     0,   238,     0,
     239,   624,     0,   626,   242,   243,   627,   628,   246,   247,
     248,     0,   630,   631,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,   633,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,   636,
     637,   275,   276,   277,   278,   279,   638,   639,     0,   641,
       0,   283,   643,   644,   286,   645,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,   649,   296,   650,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   652,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   653,   654,   655,   332,   333,   334,   656,     0,   336,
     337,   658,   339,     0,   660,   341,   661,   343,   344,   345,
       0,   346,   347,  1397,     0,   348,   349,   350,     0,     0,
     351,   352,   667,   668,   355,   669,   670,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   675,   676,   374,   375,   677,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   680,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,   683,   412,
     413,   414,   684,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   686,   429,   430,
     431,   432,   433,   434,   687,   436,   437,     0,   689,   439,
     440,   690,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   692,   458,
     693,     0,     0,   460,   461,     0,   462,   697,   464,   465,
     466,   467,   468,   469,     0,   470,   699,   700,     0,     0,
     473,   474,   703,   476,   704,  1398,   478,   479,   706,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,   709,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   712,   713,   500,     0,   501,   715,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   528,   529,   530,   531,
       0,     0,  1674,     0,     0,  1675,     0,  1399,  1400,  1676,
    1677,  1678,  1679,     0,  1680,  1681,  1682,     0,     0,     0,
    1674,     0,     0,  1675,     0,     0,     0,  1676,  1677,  1678,
    1679,  1683,  1680,  1681,  1682,     0,     0,     0,     0,     0,
       0,  1685,     0,     0,     0,     0,     0,     0,  1686,  1683,
       0,     0,     0,  1977,     0,  1674,     0,     0,  1675,  1685,
       0,     0,  1676,  1677,  1678,  1679,  1686,  1680,  1681,  1682,
       0,     0,     0,  1674,     0,  1687,  1675,     0,     0,     0,
    1676,  1677,  1678,  1679,  1683,  1680,  1681,  1682,     0,     0,
       0,     0,     0,  1687,  1685,     0,     0,     0,     0,     0,
       0,  1686,  1683,     0,     0,     0,  2019,     0,     0,     0,
       0,     0,  1685,     0,     0,     0,     0,     0,     0,  1686,
       0,     0,     0,     0,     0,     0,     0,     0,  1687,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1687,  1674,     0,     0,
    1675,     0,     0,     0,  1676,  1677,  1678,  1679,     0,  1680,
    1681,  1682,  3776,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1688,     0,     0,  1683,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1685,     0,     0,     0,
    1689,  1688,     0,  1686,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1689,     0,
       0,     0,     0,  1690,     0,     0,     0,     0,  1691,  1692,
    1687,     0,     0,     0,     0,     0,  1688,     0,     0,     0,
       0,     0,     0,     0,  1693,     0,  1691,  1692,     0,     0,
       0,     0,     0,  1689,  1688,     0,     0,     0,  1690,     0,
       0,     0,  1693,     0,     0,     0,     0,     0,     0,     0,
       0,  1689,     0,     0,     0,     0,  1690,     0,     0,     0,
       0,  1691,  1692,     0,  1694,     0,     0,  1695,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1693,     0,  1691,
    1692,  1696,  1694,     0,  1697,  1695,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1693,     0,     0,     0,  1696,
       0,     0,  1697,  2024,     0,     0,     0,     0,  1688,     0,
       0,     0,     0,     0,  3777,     0,     0,  1694,     0,     0,
    1695,     0,     0,     0,     0,  1689,     0,     0,     0,     0,
    1690,     0,     0,     0,  1696,  1694,     0,  1697,  1695,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1696,  1691,  1692,  1697,     0,     0,     0,     0,
       0,  1984,     0,     0,     0,     0,     0,     0,     0,  1693,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1698,     0,     0,     0,     0,     0,     0,  1694,
    1674,     0,  1695,  1675,     0,     0,     0,  1676,  1677,  1678,
    1679,     0,  1680,  1681,  1682,     0,  1696,     0,     0,  1697,
       0,     0,     0,     0,     0,     0,     0,  1698,     0,  1683,
       0,     0,     0,  2026,     0,     0,     0,     0,     0,  1685,
       0,     0,     0,     0,     0,  1698,  1686,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1687,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1699,     0,     0,  1700,
    1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,
       0,     0,     0,     0,  1699,     0,     0,  1700,  1701,  1702,
       0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,  1698,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1699,
       0,     0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,
    1707,  1708,     0,     0,     0,     0,     0,  1699,     0,     0,
    1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,
       0,  1688,  1674,     0,     0,  1675,     0,     0,     0,  1676,
    1677,  1678,  1679,     0,  1680,  1681,  1682,     0,  1689,     0,
       0,     0,     0,  1690,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1685,     0,     0,     0,     0,  1691,  1692,  1686,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1699,  1693,     0,  1700,  1701,  1702,     0,  1703,  1704,
    1705,  1706,  1707,  1708,     0,  1687,     0,     0,     0,  1674,
       0,     0,  1675,     0,     0,     0,  1676,  1677,  1678,  1679,
    2631,  1680,  1681,  1682,     0,     0,     0,     0,     0,     0,
       0,     0,  1694,     0,     0,  1695,     0,     0,  1683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1685,  1696,
       0,     0,  1697,     0,     0,  1686,     0,     0,     0,     0,
       0,  1674,     0,     0,  1675,     0,     0,     0,  1676,  1677,
    1678,  1679,     0,  1680,  1681,  1682,     0,     0,     0,     0,
       0,     0,  1687,     0,     0,     0,     0,     0,     0,     0,
    1683,     0,     0,  2160,     0,     0,     0,     0,     0,     0,
    1685,     0,     0,  1688,     0,     0,     0,  1686,     0,     0,
       0,     0,     0,     0,  1674,     0,     0,  1675,     0,     0,
    1689,  1676,  1677,  1678,  1679,  1690,  1680,  1681,  1682,     0,
       0,     0,     0,     0,  1687,     0,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,     0,     0,  2962,  1691,  1692,
       0,     0,  1698,  1685,     0,     0,     0,     0,     0,     0,
    1686,     0,     0,     0,  1693,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1688,     0,     0,     0,     0,     0,     0,  1687,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1689,     0,     0,
       0,     0,  1690,     0,  1694,     0,  1674,  1695,     0,  1675,
       0,     0,     0,  1676,  1677,  1678,  1679,     0,  1680,  1681,
    1682,  1696,     0,     0,  1697,  1691,  1692,     0,     0,     0,
       0,     0,  1688,     0,     0,  1683,     0,     0,     0,     0,
       0,  1693,     0,     0,     0,  1685,     0,     0,     0,  1689,
       0,     0,  1686,     0,  1690,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1699,     0,     0,  1700,  1701,  1702,
       0,  1703,  1704,  1705,  1706,  1707,  1708,  1691,  1692,  1687,
       0,  1694,     0,     0,  1695,  1688,     0,     0,     0,     0,
       0,     0,     0,  1693,     0,     0,     0,     0,  1696,     0,
       0,  1697,  1689,     0,     0,     0,     0,  1690,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,     0,     0,     0,     0,     0,
    1691,  1692,     0,  1694,     0,     0,  1695,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1693,     0,     0,     0,
    1696,     0,     0,  1697,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1688,     0,     0,
       0,     0,     0,     0,     0,     0,  1694,     0,     0,  1695,
       0,     0,     0,     0,  1689,     0,     0,     0,     0,  1690,
       0,  1698,     0,  1696,     0,     0,  1697,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1691,  1692,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1699,     0,  1693,  1700,
    1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,     0,
       0,  1674,     0,     0,  1675,     0,     0,     0,  1676,  1677,
    1678,  1679,     0,  1680,  1681,  1682,     0,     0,  1694,     0,
       0,  1695,     0,     0,     0,     0,     0,     0,     0,  2946,
    1683,     0,     0,     0,     0,  1696,     0,     0,  1697,     0,
    1685,     0,     0,     0,     0,     0,  1698,  1686,     0,     0,
       0,     0,     0,  1699,     0,     0,  1700,  1701,  1702,     0,
    1703,  1704,  1705,  1706,  1707,  1708,     0,     0,     0,     0,
       0,     0,     0,     0,  1687,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1699,     0,     0,  1700,  1701,
    1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1698,     0,
       0,     0,  1674,     0,     0,  1675,     0,     0,     0,  1676,
    1677,  1678,  1679,     0,  1680,  1681,  1682,     0,  1699,     0,
       0,  1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,
    1708,  1683,  1688,     0,     0,     0,     0,     0,     0,     0,
       0,  1685,     0,  1674,     0,     0,  1675,     0,  1686,  1689,
    1676,  1677,     0,     0,  1690,  1680,  1681,  1682,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1683,     0,     0,  1687,     0,  1887,  1692,     0,
       0,     0,  1685,     0,     0,     0,     0,     0,     0,  1686,
       0,  1674,     0,  1693,  1675,     0,     0,     0,  1676,  1677,
       0,     0,     0,  1680,  1681,  1682,     0,     0,     0,     0,
    1699,     0,     0,  1700,  1701,  1702,  1687,  1703,  1704,  1705,
    1706,  1707,  1708,     0,     0,     0,     0,     0,     0,     0,
    1685,     0,     0,  1694,     0,     0,  1695,  1686,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1696,     0,     0,  1697,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1687,     0,     0,     0,     0,     0,
       0,     0,     0,  1688,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1689,     0,     0,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1688,     0,     0,     0,  1691,  1692,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1689,     0,     0,  1693,     0,  1690,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,  1691,
    1692,     0,  1688,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1694,  1693,     0,  1695,     0,  1689,
       0,     0,     0,     0,  1690,     0,     0,     0,     0,     0,
       0,  1696,     0,     0,  1697,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2184, -2184,     0,
       0,     0,     0,     0,     0,  1694,     0,     0,  1695,     0,
       0,     0,     0,  1693,     0,     0,     0,     0,     0,     0,
       0,     0,  1696,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1699, -2184,     0,  1700,  1701,
    1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,     0,     0,
    1696,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1698,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1698,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1699,     0,     0,  1700,
    1701,  1702,     0,  1703,  1704,  1705,  1706,  2293,  1708,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1699,     0,     0,
    1700,  1701,  1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   570,     0,
    2184,     0,     0,     0,     0,  1699,     0,     0,  1700,  1701,
    1702,     0,  1703,  1704,  1705,  1706,  1707,  1708,   122,   123,
     124,   125,   126,   127,   128,   129,   571,   130,   131,   132,
     572,   573,   574,   575,   576,   577,   578,   579,   580,   134,
     135,   581,   582,   137,   138,   583,   140,   141,   142,   584,
     585,   586,   587,   588,   589,   590,   148,   149,   150,   151,
     152,   591,   592,   153,   154,   155,   156,   593,   594,   159,
     595,   160,   161,   162,   163,   596,   597,   598,   599,   600,
     167,   168,   169,   170,   171,   601,   173,   174,   175,   602,
     176,   177,   178,   179,   180,   181,   603,   604,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   606,   194,
     195,   607,   197,   608,   198,   609,   199,   200,   201,   202,
     203,   204,   610,   611,   205,   206,   207,   208,   612,   613,
     209,   210,   211,   212,   213,   614,   214,   215,   216,   615,
     217,   218,   219,   220,   616,   221,   222,   223,   224,   617,
     226,   227,   228,   229,   230,   231,   618,   619,   233,   620,
     234,   235,   621,   237,   622,   238,   623,   239,   624,   625,
     626,   242,   243,   627,   628,   246,   247,   248,   629,   630,
     631,   251,   252,   632,   253,   254,   255,   256,   257,   258,
     259,   633,   261,   262,   263,   264,   634,   265,   266,   267,
     268,   269,   270,   271,   635,   272,   636,   637,   275,   276,
     277,   278,   279,   638,   639,   640,   641,   642,   283,   643,
     644,   286,   645,   288,   289,   290,   646,   291,   292,   293,
     647,   648,   294,   649,   296,   650,   651,   298,   299,   300,
     301,   302,   303,   304,   305,   652,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   653,   654,
     655,   332,   333,   334,   656,   657,   336,   337,   658,   339,
     659,   660,   341,   661,   343,   344,   345,   662,   346,   347,
     663,   664,   348,   349,   350,   665,   666,   351,   352,   667,
     668,   355,   669,   670,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   671,   672,   673,   674,
     370,   371,   675,   676,   374,   375,   677,   377,   378,   379,
     678,   380,   381,   382,   383,   384,   385,   679,   386,   387,
     388,   389,   390,   680,   392,   393,   394,   395,   681,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   682,   409,   410,   683,   412,   413,   414,   684,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   685,   686,   429,   430,   431,   432,   433,
     434,   687,   436,   437,   688,   689,   439,   440,   690,   442,
     691,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   692,   458,   693,   694,   695,
     460,   461,   696,   462,   697,   464,   465,   466,   467,   468,
     469,   698,   470,   699,   700,   701,   702,   473,   474,   703,
     476,   704,   705,   478,   479,   706,   481,   482,   483,   484,
     485,   707,   708,   486,   487,   488,   709,   710,   489,   490,
     491,   492,   711,   493,   494,   495,   496,   497,   712,   713,
     500,   714,   501,   715,   503,   504,   505,   506,   507,   508,
     509,   716,   717,   510,   718,   719,   511,   512,   513,   514,
     515,   516,   720,   721,   722,   723,   724,   725,   726,   727,
     728,   729,   730,   528,   529,   530,   531,   570,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,   571,   130,   131,   132,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   134,   135,
     581,   582,   137,   138,   583,   140,   141,   142,   584,   585,
     586,   587,   588,   589,   590,   148,   149,   150,   151,   152,
     591,   592,   153,   154,   155,   156,   593,   594,   159,   595,
     160,   161,   162,   163,   596,   597,   598,   599,   600,   167,
     168,   169,   170,   171,   601,   173,   174,   175,   602,   176,
     177,   178,   179,   180,   181,   603,   604,   183,   184,   185,
     186,   187,   188,   605,   190,   191,   192,   606,   194,   195,
     607,   197,   608,   198,   609,   199,   200,   201,   202,   203,
     204,   610,   611,   205,   206,   207,   208,   612,   613,   209,
     210,   211,   212,   213,   614,   214,   215,   216,   615,   217,
     218,   219,   220,   616,   221,   222,   223,   224,   617,   226,
     227,   228,   229,   230,   231,   618,   619,   233,   620,   234,
     235,   621,   237,   622,   238,   623,   239,   624,   625,   626,
     242,   243,   627,   628,   246,   247,   248,   629,   630,   631,
     251,   252,   632,   253,   254,   255,   256,   257,   258,   259,
     633,   261,   262,   263,   264,   634,   265,   266,   267,   268,
     269,   270,   271,   635,   272,   636,   637,   275,   276,   277,
     278,   279,   638,   639,   640,   641,   642,   283,   643,   644,
     286,   645,   288,   289,   290,   646,   291,   292,   293,   647,
     648,   294,   649,   296,   650,   651,   298,   299,   300,   301,
     302,   303,   304,   305,   652,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   653,   654,   655,
     332,   333,   334,   656,   657,   336,   337,   658,   339,   659,
     660,   341,   661,   343,   344,   345,   662,   346,   347,   663,
     664,   348,   349,   350,   665,   666,   351,   352,   667,   668,
     355,   669,   670,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   671,   672,   673,   674,   370,
     371,   675,   676,   374,   375,   677,   377,   378,   379,   678,
     380,   381,   382,   383,   384,   385,   679,   386,   387,   388,
     389,   390,   680,   392,   393,   394,   395,   681,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   682,   409,   410,   683,   412,   413,   414,   684,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   685,   686,   429,   430,   431,   432,   433,   434,
     687,   436,   437,   688,   689,   439,   440,   690,   442,   691,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   692,   458,   693,   694,   695,   460,
     461,   696,   462,   697,   464,   465,   466,   467,   468,   469,
     698,   470,   699,   700,   701,   702,   473,   474,   703,   476,
     704,   705,   478,   479,   706,   481,   482,   483,   484,   485,
     707,   708,   486,   487,   488,   709,   710,   489,   490,   491,
     492,   711,   493,   494,   495,   496,   497,   712,   713,   500,
     714,   501,   715,   503,   504,   505,   506,   507,   508,   509,
     716,   717,   510,   718,   719,   511,   512,   513,   514,   515,
     516,   720,   721,   722,   723,   724,   725,   726,   727,   728,
     729,   730,   528,   529,   530,   531,   570,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,   571,   130,   131,   132,   572,   573,
     574,   575,   576,   577,   578,   579,   580,   134,   135,   581,
     582,   137,   138,   583,   140,   141,   142,   584,   585,   586,
     587,   588,   589,   590,   148,   149,   150,   151,   152,   591,
     592,   153,   154,   155,   156,   593,   594,   159,   595,   160,
     161,   162,   163,   596,   597,   598,   599,   600,   167,   168,
     169,   170,   171,   601,   173,   174,   175,   602,   176,   177,
     178,   179,   180,   181,   603,   604,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   606,   194,   195,   607,
     197,   608,   198,   609,   199,   200,   201,   202,   203,   204,
     610,   611,   205,   206,   207,   208,   612,   613,   209,   210,
     211,   212,   213,   614,   214,   215,   216,   615,   217,   218,
     219,   220,   616,   221,   222,   223,   224,   617,   226,   227,
     228,   229,   230,   231,   618,   619,   233,   620,   234,   235,
     621,   237,   622,   238,   623,   239,   624,   625,   626,   242,
     243,   627,   628,   246,   247,   248,   629,   630,   631,   251,
     252,   632,   253,   254,   255,   256,   257,   970,   259,   633,
     261,   262,   263,   264,   634,   265,   266,   267,   268,   269,
     270,   271,   635,   272,   636,   637,   275,   276,   277,   278,
     279,   638,   639,   640,   641,   642,   283,   643,   644,   286,
     645,   288,   289,   290,   646,   291,   292,   293,   647,   648,
     294,   649,   296,   650,   651,   298,   299,   300,   301,   302,
     303,   304,   305,   652,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   653,   654,   655,   332,
     333,   334,   656,   657,   336,   337,   658,   339,   659,   660,
     341,   661,   343,   344,   345,   662,   346,   347,   663,   664,
     348,   349,   350,   665,   666,   351,   352,   667,   668,   355,
     669,   670,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   671,   672,   673,   674,   370,   371,
     675,   676,   374,   375,   677,   377,   378,   379,   678,   380,
     381,   382,   383,   384,   385,   679,   386,   387,   388,   389,
     390,   680,   392,   393,   394,   395,   681,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     682,   409,   410,   683,   412,   413,   414,   684,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   685,   686,   429,   430,   431,   432,   433,   434,   687,
     436,   437,   688,   689,   439,   440,   690,   442,   691,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   692,   458,   693,   694,   695,   460,   461,
     696,   462,   697,   464,   465,   466,   467,   468,   469,   698,
     470,   699,   700,   701,   702,   473,   474,   703,   476,   704,
     705,   478,   479,   706,   481,   482,   483,   484,   485,   707,
     708,   486,   487,   488,   709,   710,   489,   490,   491,   492,
     711,   493,   494,   495,   496,   497,   712,   713,   500,   714,
     501,   715,   503,   504,   505,   506,   507,   508,   509,   716,
     717,   510,   718,   719,   511,   512,   513,   514,   515,   516,
     720,   721,   722,   723,   724,   725,   726,   727,   728,   729,
     730,   528,   529,   530,   531,   570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,   571,   130,   131,   132,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   134,   135,   581,   582,
     137,   138,   583,   140,   141,   142,   584,   585,   586,   587,
     588,   589,   590,   148,   149,   150,   151,   152,   591,   592,
     153,   154,   155,   156,   593,   594,   159,   595,   160,   161,
     162,   163,   596,   597,   598,   599,   600,   167,   168,   169,
     170,   171,   601,   173,   174,   175,   602,   176,   177,   178,
     179,   180,   181,   603,   604,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   606,   194,   195,   607,   197,
     608,   198,   609,   199,   200,   201,   202,   203,   204,   610,
     611,   205,   206,   207,   208,   612,   613,   209,   210,   211,
     212,   213,   614,   214,   215,   216,   615,   217,   218,   219,
     220,   616,   221,   222,   223,   224,   617,   226,   227,   228,
     229,   230,   231,   618,   619,   233,   620,   234,   235,   621,
     237,   622,   238,   623,   239,   624,   625,   626,   242,   243,
     627,   628,   246,   247,   248,   629,   630,   631,   251,   252,
     632,   253,   254,   255,   256,   257,   258,   259,   633,   261,
     262,   263,   264,   634,   265,   266,   267,   268,   269,   270,
     271,   635,   272,   636,   637,   275,   276,   277,   278,   279,
     638,   639,   640,   641,   642,   283,   643,   644,   286,   645,
     288,   289,   290,   646,   291,   292,   293,   647,   648,   294,
     649,   296,   650,   651,   298,   299,   300,   301,   302,   303,
     304,   305,   652,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   653,   654,   655,   332,   333,
     334,   656,   657,   336,   337,   658,   339,   659,   660,   341,
     661,   343,   344,   345,   662,   346,   347,   663,   664,   348,
     349,   350,   665,   666,   351,   352,   667,   668,   355,   669,
     670,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   671,   672,   673,   674,   370,   371,   675,
     676,   374,   375,   677,   377,   378,   379,   678,   380,   381,
     382,   383,   384,   385,   679,   386,   387,   388,   389,   390,
     680,   392,   393,   394,   395,   681,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   682,
     409,   410,   683,   412,   413,   414,   684,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     685,   686,   429,   430,   431,   432,   433,   434,   687,   436,
     437,   688,   689,   439,   440,   690,   442,   691,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   692,   458,   693,   694,   695,   460,   461,   696,
     462,   697,   464,   465,   466,   467,   468,   469,   698,   470,
     699,   700,   701,   702,   473,   474,   703,   476,   704,   705,
     478,   479,   706,   481,   482,   483,   484,   485,   707,   708,
     486,   487,   488,   709,   710,   489,   490,   491,   492,   711,
     493,   494,   495,   496,   497,   712,   713,   500,   714,   501,
     715,   503,   504,   505,   506,   507,   508,   509,   716,   717,
     510,   718,   719,   511,   512,   513,   514,   515,   516,   720,
     721,   722,   723,   724,   725,   726,   727,   728,   729,   730,
     528,   529,   530,   531,   570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,  2345,   127,
     128,   129,   571,   130,   131,   132,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   134,   135,   581,   582,   137,
     138,   583,   140,   141,   142,   584,   585,   586,   587,   588,
     589,   590,   148,   149,   150,   151,   152,   591,   592,   153,
     154,   155,   156,   593,   594,   159,   595,   160,   161,   162,
     163,   596,   597,   598,   599,   600,   167,   168,   169,   170,
     171,   601,   173,   174,   175,   602,   176,   177,   178,   179,
     180,   181,   603,   604,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   606,   194,   195,   607,   197,   608,
     198,   609,   199,   200,   201,   202,   203,   204,   610,   611,
     205,   206,   207,   208,   612,   613,   209,   210,   211,  2346,
     213,   614,   214,   215,   216,   615,   217,   218,   219,   220,
     616,   221,   222,   223,   224,   617,   226,   227,   228,   229,
     230,   231,   618,   619,   233,   620,   234,   235,   621,   237,
     622,   238,   623,   239,   624,   625,   626,   242,   243,   627,
     628,   246,   247,   248,   629,   630,   631,   251,   252,   632,
     253,   254,   255,   256,   257,   258,   259,   633,   261,   262,
     263,   264,   634,   265,   266,   267,   268,   269,   270,   271,
     635,   272,   636,   637,   275,   276,   277,   278,   279,   638,
     639,   640,   641,   642,   283,   643,   644,   286,   645,   288,
     289,   290,   646,   291,   292,   293,   647,   648,   294,   649,
     296,   650,   651,   298,   299,   300,   301,   302,   303,   304,
     305,   652,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   653,   654,   655,   332,   333,   334,
     656,   657,   336,   337,   658,   339,   659,   660,   341,   661,
     343,   344,   345,   662,   346,   347,   663,   664,   348,   349,
     350,   665,   666,   351,   352,   667,   668,   355,   669,   670,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   671,   672,   673,   674,   370,   371,   675,   676,
     374,   375,   677,   377,   378,   379,   678,   380,   381,   382,
     383,   384,   385,   679,   386,   387,   388,   389,   390,   680,
     392,   393,   394,   395,   681,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   682,   409,
     410,   683,   412,   413,   414,   684,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   685,
     686,   429,   430,   431,   432,   433,  2347,   687,   436,   437,
     688,   689,   439,   440,   690,   442,   691,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   692,   458,   693,   694,   695,   460,   461,   696,   462,
     697,   464,   465,   466,   467,   468,   469,   698,   470,   699,
     700,   701,   702,   473,   474,   703,   476,   704,   705,   478,
     479,   706,   481,   482,   483,   484,   485,   707,   708,   486,
     487,   488,   709,   710,   489,   490,   491,   492,   711,   493,
     494,   495,   496,   497,   712,   713,   500,   714,   501,   715,
     503,   504,   505,   506,   507,   508,   509,   716,   717,   510,
     718,   719,   511,   512,   513,   514,   515,   516,   720,   721,
     722,   723,   724,   725,   726,   727,   728,   729,   730,   528,
     529,   530,   531,   994,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     3,     4,     0,   575,     0,
       0,     0,     0,   580,   134,   135,     0,   582,   137,   138,
     583,   140,   141,   142,   584,   585,   586,   587,   588,     0,
     590,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   593,   594,   159,     0,   160,   161,   162,   163,
     596,     0,   598,     0,   600,   167,   168,   169,   170,   171,
     601,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,   604,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   606,   194,   195,   607,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   617,   226,   227,   228,   229,   230,
     231,   618,     0,   233,     0,   234,   235,   621,   237,     0,
     238,     0,   239,   624,     0,   626,   242,   243,   627,   628,
     246,   247,   248,     0,   630,   631,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,   633,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,   636,   637,   275,   276,   277,   278,   279,   638,   639,
       0,   641,     0,   283,   643,   644,   286,   645,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,   649,   296,
     650,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     652,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   653,   654,   655,   332,   333,   334,   656,
       0,   336,   337,   658,   339,     0,   660,   341,   661,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   667,   668,   355,   669,   670,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   675,   676,   374,
     375,   677,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   680,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
     683,   412,   413,   414,   684,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   686,
     429,   430,   431,   432,   433,   434,   687,   436,   437,     0,
     689,   439,   440,   690,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     692,   458,   693,     0,     0,   460,   461,     0,   462,   697,
     464,   465,   466,   467,   468,   469,     0,   470,   699,   700,
       0,     0,   473,   474,   703,   476,   704,     0,   478,   479,
     706,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,   709,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   712,   713,   500,     0,   501,   715,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   720,   721,   722,
     723,   724,   725,   726,   727,   728,   729,   730,   528,   529,
     530,   531,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
       0,     0,   133,   134,   135,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   805,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   806,
       0,   807,     0,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     808,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,   284,   285,   286,   287,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,   295,   296,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,     0,   810,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,   354,   355,   356,   812,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   813,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   815,     0,     0,   460,   461,     0,   462,   463,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   816,   476,   817,     0,   478,   479,   818,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,   502,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,   133,   134,   135,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,   284,   285,   286,   287,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,   295,   296,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,   502,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,  1810,   160,   161,   162,   163,   164,     0,     0,
    1811,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,  1812,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,  1813,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,  1814,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,  1815,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,  1816,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,  1810,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
    1812,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,  1813,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
     258,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,  2433,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,  1815,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,  1816,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,  1532,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,  1533,     0,     0,  -865,     0,  1534,   134,
     135,     0,  1535,   137,   138,  1536,   140,   141,   142,     0,
    1537,  1538,  1539,  1540,     0,  1541,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,  1542,  1543,   159,
       0,   160,   161,   162,   163,     0,     0,  1544,     0,  1545,
     167,   168,   169,   170,   171,  1546,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,  1547,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,  1548,   194,
     195,  1549,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,  1093,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,     0,
     226,   227,   228,   229,   230,   231,     0,     0,   233,     0,
     234,   235,  1550,   237,     0,   238,     0,   239,  1551,     0,
    1552,   242,   243,  -865,  1553,   246,   247,   248,     0,     0,
       0,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,  1554,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,  1555,     0,   275,   276,
     277,   278,   279,  1556,  1557,     0,  1558,     0,   283,  1559,
    1560,   286,  1561,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,  1562,   296,  1563,     0,   298,   299,   300,
     301,   302,   303,   304,   305,  1564,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,  1565,  1566,
    1567,   332,   333,   334,     0,     0,   336,   337,  1568,   339,
       0,     0,   341,  1569,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,     0,
    1570,   355,  1571,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,     0,  1572,   374,   375,     0,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1573,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,  1574,   412,   413,   414,  1575,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,  1576,   429,   430,   431,   432,   433,
     434,  1577,   436,   437,     0,  1578,   439,   440,  1579,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,  1580,   458,     0,     0,     0,
     460,   461,     0,   462,  1581,   464,   465,   466,   467,   468,
     469,     0,   470,  1582,  1583,     0,     0,   473,   474,     0,
     476,     0,     0,   478,   479,  1584,   481,   482,   483,   484,
     485,  1585,     0,   486,   487,   488,  1586,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,     0,  1587,
     500,     0,   501,  1588,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   539,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,   528,   529,   530,   531,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     3,     4,     0,     0,     0,     0,
       0,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,   565,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   134,   135,     0,     0,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,   169,   170,   171,     0,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,     0,     0,     0,   242,   243,   540,     0,   246,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,     0,     0,   286,     0,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,     0,   296,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   541,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   331,   332,   333,   334,   335,     0,   336,
     337,     0,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,     0,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,     0,   374,   375,   376,
     566,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,     0,     0,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,   811,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,     0,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
     923,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,   811,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,   968,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   258,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,  1208,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,   258,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
     811,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,  1532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,  1533,     0,     0,     0,     0,  1534,   134,   135,     0,
    1535,   137,   138,  1536,   140,   141,   142,     0,  1537,  1538,
    1539,  1540,     0,  1541,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,  1542,  1543,   159,     0,   160,
     161,   162,   163,     0,     0,  1544,     0,  1545,   167,   168,
     169,   170,   171,  1546,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,  1547,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1548,   194,   195,  1549,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   233,     0,   234,   235,
    1550,   237,     0,   238,     0,   239,  1551,     0,  1552,   242,
     243,     0,  1553,   246,   247,   248,     0,     0,     0,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,  1554,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,  1555,     0,   275,   276,   277,   278,
     279,  1556,  1557,     0,  1558,     0,   283,  1559,  1560,   286,
    1561,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,  1562,   296,  1563,     0,   298,   299,   300,   301,   302,
     303,   304,   305,  1564,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1565,  1566,  1567,   332,
     333,   334,     0,     0,   336,   337,  1568,   339,     0,     0,
     341,  1569,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,     0,  1570,   355,
    1571,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
       0,  1572,   374,   375,     0,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1573,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,  1574,   412,   413,   414,  1575,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,  1576,   429,   430,   431,   432,   433,   434,  1577,
     436,   437,     0,  1578,   439,   440,  1579,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,  1580,   458,     0,     0,     0,   460,   461,
       0,   462,  1581,   464,   465,   466,   467,   468,   469,     0,
     470,  1582,  1583,     0,     0,   473,   474,     0,   476,     0,
       0,   478,   479,  1584,   481,   482,   483,   484,   485,  1585,
       0,   486,   487,   488,  1586,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,     0,  1587,   500,     0,
     501,  1588,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,   528,   529,   530,   531,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,  2040,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,  2041,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,  2042,   462,     0,   464,   465,  2043,
     467,  2044,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,  2045,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,  1532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,  1533,     0,     0,     0,     0,  1534,
     134,   135,     0,  1535,   137,   138,  1536,   140,   141,   142,
       0,  1537,  1538,  1539,  1540,     0,  1541,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,  1542,  1543,
     159,     0,   160,   161,   162,   163,     0,     0,  1544,     0,
    1545,   167,   168,   169,   170,   171,  1546,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,  1547,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,  1548,
     194,   195,  1549,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,  1093,   212,   213,     0,   214,   215,   216,
       0,  2447,   218,   219,   220,     0,   221,   222,   223,   224,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   233,
       0,   234,   235,  1550,   237,     0,   238,     0,   239,  1551,
       0,  1552,   242,   243,     0,  1553,   246,   247,   248,     0,
       0,     0,   251,   252,     0,   253,   254,   255,   256,   257,
     258,   259,  1554,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,  1555,     0,   275,
     276,   277,   278,   279,  1556,  1557,     0,  1558,     0,   283,
    1559,  1560,   286,  1561,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,  1562,   296,  1563,     0,   298,   299,
     300,   301,   302,   303,   304,   305,  1564,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,  1565,
    1566,  1567,   332,   333,   334,     0,     0,   336,   337,  1568,
     339,     0,     0,   341,  1569,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
       0,  1570,   355,  1571,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,     0,  1572,   374,   375,     0,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,  1573,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,  1574,   412,   413,   414,
    1575,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,  1576,   429,   430,   431,   432,
     433,   434,  1577,   436,   437,     0,  1578,   439,   440,  1579,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,  1580,   458,     0,     0,
       0,   460,   461,     0,   462,  1581,   464,   465,   466,   467,
     468,   469,     0,   470,  1582,  1583,     0,     0,   473,   474,
       0,   476,     0,     0,   478,   479,  1584,   481,   482,   483,
     484,   485,  1585,     0,   486,   487,   488,  1586,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,     0,
    1587,   500,     0,   501,  1588,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   539,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,   528,   529,   530,   531,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,   836,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,   842,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   134,   135,     0,     0,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,   169,   170,   171,     0,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,     0,     0,     0,   242,   243,   540,     0,   843,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,     0,     0,   286,     0,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,     0,   296,     0,     0,
     298,   299,   844,   301,   302,   303,   304,   305,   541,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   331,   332,   333,   334,   335,     0,   336,
     337,     0,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,     0,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,     0,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   845,   434,   435,   436,   437,     0,     0,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,   465,
     466,   467,   468,   469,     0,   470,   846,   472,     0,     0,
     847,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   848,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,   258,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   881,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,     0,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
     918,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,   921,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,   925,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
       0,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,   135,     0,
       0,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,     0,     0,     0,   242,
     243,   540,     0,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,   956,   259,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,     0,     0,   286,
       0,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,     0,   296,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   541,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   339,     0,   340,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     372,     0,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,     0,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,     0,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,     0,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,   169,
     170,   171,     0,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,     0,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,     0,   199,   200,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,     0,     0,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,     0,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,     0,   239,     0,     0,     0,   242,   243,
     540,     0,   246,   247,   248,     0,   249,   250,   251,   252,
       0,   253,   254,   255,   256,   257,   984,   259,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,   283,     0,     0,   286,     0,
     288,   289,   290,     0,   291,   292,   293,     0,     0,   294,
       0,   296,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   541,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   331,   332,   333,
     334,   335,     0,   336,   337,     0,   339,     0,   340,   341,
     342,   343,   344,   345,     0,   346,   347,     0,     0,   348,
     349,   350,     0,     0,   351,   352,   353,     0,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,     0,     0,     0,   370,   371,   372,
       0,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,     0,     0,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,     0,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,   987,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,  1030,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
    1057,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   246,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   433,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   471,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,   842,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   134,   135,     0,     0,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,   169,   170,   171,     0,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,     0,     0,     0,   242,   243,   540,     0,   246,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   258,   259,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,     0,     0,   286,     0,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,     0,   296,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   541,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   331,   332,   333,   334,   335,     0,   336,
     337,     0,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,     0,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,     0,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,     0,     0,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,   465,
     466,   467,   468,   469,     0,   470,   846,   472,     0,     0,
     847,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,  1352,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,     0,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
    1354,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,  1357,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,  1359,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
       0,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   134,   135,     0,
       0,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,     0,     0,     0,   242,
     243,   540,     0,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,  1361,   259,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,     0,     0,   286,
       0,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,     0,   296,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   541,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   339,     0,   340,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     372,     0,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   435,
     436,   437,     0,     0,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,   564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,     0,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,     0,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,   169,
     170,   171,     0,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,     0,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,     0,   199,   200,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,     0,     0,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,     0,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,     0,   239,     0,     0,     0,   242,   243,
     540,     0,   246,   247,   248,     0,   249,   250,   251,   252,
       0,   253,   254,   255,   256,   257,  2341,   259,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,   283,     0,     0,   286,     0,
     288,   289,   290,     0,   291,   292,   293,     0,     0,   294,
       0,   296,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   541,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   331,   332,   333,
     334,   335,     0,   336,   337,     0,   339,     0,   340,   341,
     342,   343,   344,   345,     0,   346,   347,     0,     0,   348,
     349,   350,     0,     0,   351,   352,   353,     0,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,     0,     0,     0,   370,   371,   372,
       0,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,     0,     0,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,     0,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,  3180,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,   258,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   539,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   134,   135,     0,     0,   137,   138,     0,
     140,   141,   142,   143,   144,     0,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,   157,   158,   159,     0,   160,   161,   162,   163,   164,
       0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,     0,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,   211,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,     0,   233,     0,   234,   235,   236,   237,     0,   238,
       0,   239,     0,     0,     0,   242,   243,   540,     0,   858,
     247,   248,     0,   249,   250,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,     0,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
       0,   274,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,   283,     0,     0,   286,     0,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,     0,   296,     0,
       0,   298,   299,   859,   301,   302,   303,   304,   305,   541,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,     0,   331,   332,   333,   334,   335,     0,
     336,   337,     0,   339,     0,   340,   341,   342,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,   353,     0,   355,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,   372,     0,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   860,   421,
     422,   423,   424,   425,   426,   427,   428,     0,     0,   429,
     430,   431,   432,   861,   434,   435,   436,   437,     0,     0,
     439,   440,   441,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   542,
     458,   459,     0,     0,   460,   461,     0,   462,     0,   464,
     465,   466,   467,   468,   469,     0,   470,   862,   472,     0,
       0,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
       0,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   863,     0,   501,     0,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,   125,   126,   127,   128,   129,     0,
     130,   131,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   134,   135,     0,     0,   137,   138,     0,   140,
     141,   142,   143,   144,     0,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,     0,   153,   154,   155,   156,
     157,   158,   159,     0,   160,   161,   162,   163,   164,     0,
       0,     0,   166,   167,   168,   169,   170,   171,     0,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,     0,
       0,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,     0,   199,
     200,   201,   202,   203,   204,     0,     0,   205,   206,   207,
     208,     0,     0,   209,   210,   211,   212,   213,     0,   214,
     215,   216,     0,   217,   218,   219,   220,     0,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
       0,   233,     0,   234,   235,   236,   237,     0,   238,     0,
     239,     0,     0,     0,   242,   243,   540,     0,   246,   247,
     248,     0,   249,   250,   251,   252,     0,   253,   254,   255,
     256,   257,   916,   259,     0,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,     0,   272,     0,
     274,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,   283,     0,     0,   286,     0,   288,   289,   290,     0,
     291,   292,   293,     0,     0,   294,     0,   296,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   541,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   331,   332,   333,   334,   335,     0,   336,
     337,     0,   339,     0,   340,   341,   342,   343,   344,   345,
       0,   346,   347,     0,     0,   348,   349,   350,     0,     0,
     351,   352,   353,     0,   355,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
       0,     0,     0,   370,   371,   372,     0,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   435,   436,   437,     0,     0,   439,
     440,   441,   442,     0,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   542,   458,
     459,     0,     0,   460,   461,     0,   462,     0,   464,   465,
     466,   467,   468,   469,     0,   470,   471,   472,     0,     0,
     473,   474,   475,   476,   477,     0,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,   486,   487,   488,     0,
       0,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,     0,   501,     0,   503,   504,   505,
     506,   507,   508,   509,     0,     0,   510,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,   251,   252,     0,   253,   254,   255,   256,
     257,   980,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,   135,     0,     0,   137,   138,     0,   140,   141,   142,
     143,   144,     0,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,     0,   153,   154,   155,   156,   157,   158,
     159,     0,   160,   161,   162,   163,   164,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,     0,     0,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,     0,   199,   200,   201,
     202,   203,   204,     0,     0,   205,   206,   207,   208,     0,
       0,   209,   210,   211,   212,   213,     0,   214,   215,   216,
       0,   217,   218,   219,   220,     0,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,     0,   233,
       0,   234,   235,   236,   237,     0,   238,     0,   239,     0,
       0,     0,   242,   243,   540,     0,   246,   247,   248,     0,
     249,   250,   251,   252,     0,   253,   254,   255,   256,   257,
     258,   259,     0,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,     0,   272,     0,   274,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,   283,
       0,     0,   286,     0,   288,   289,   290,     0,   291,   292,
     293,     0,     0,   294,     0,   296,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   541,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
       0,   331,   332,   333,   334,   335,     0,   336,   337,     0,
     339,     0,   340,   341,   342,   343,   344,   345,     0,   346,
     347,     0,     0,   348,   349,   350,     0,     0,   351,   352,
     353,     0,   355,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,     0,     0,     0,
       0,   370,   371,   372,     0,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   860,   421,   422,   423,   424,
     425,   426,   427,   428,     0,     0,   429,   430,   431,   432,
     433,   434,   435,   436,   437,     0,     0,   439,   440,   441,
     442,     0,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   542,   458,   459,     0,
       0,   460,   461,     0,   462,     0,   464,   465,   466,   467,
     468,   469,     0,   470,   862,   472,     0,     0,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,   485,     0,     0,   486,   487,   488,     0,     0,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   501,     0,   503,   504,   505,   506,   507,
     508,   509,     0,     0,   510,     0,     0,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
     135,     0,     0,   137,   138,     0,   140,   141,   142,   143,
     144,     0,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,     0,   153,   154,   155,   156,   157,   158,   159,
       0,   160,   161,   162,   163,   164,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,     0,     0,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,     0,   199,   200,   201,   202,
     203,   204,     0,     0,   205,   206,   207,   208,     0,     0,
     209,   210,   211,   212,   213,     0,   214,   215,   216,     0,
     217,   218,   219,   220,     0,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,     0,   233,     0,
     234,   235,   236,   237,     0,   238,     0,   239,     0,     0,
       0,   242,   243,   540,     0,   246,   247,   248,     0,   249,
     250,   251,   252,     0,   253,   254,   255,   256,   257,  1363,
     259,     0,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,     0,   272,     0,   274,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,   283,     0,
       0,   286,     0,   288,   289,   290,     0,   291,   292,   293,
       0,     0,   294,     0,   296,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   541,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,     0,
     331,   332,   333,   334,   335,     0,   336,   337,     0,   339,
       0,   340,   341,   342,   343,   344,   345,     0,   346,   347,
       0,     0,   348,   349,   350,     0,     0,   351,   352,   353,
       0,   355,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,     0,     0,     0,     0,
     370,   371,   372,     0,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,     0,   429,   430,   431,   432,   433,
     434,   435,   436,   437,     0,     0,   439,   440,   441,   442,
       0,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   542,   458,   459,     0,     0,
     460,   461,     0,   462,     0,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,     0,     0,   473,   474,   475,
     476,   477,     0,   478,   479,   480,   481,   482,   483,   484,
     485,     0,     0,   486,   487,   488,     0,     0,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,     0,   501,     0,   503,   504,   505,   506,   507,   508,
     509,     0,     0,   510,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   134,   135,
       0,     0,   137,   138,     0,   140,   141,   142,   143,   144,
       0,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,     0,   153,   154,   155,   156,   157,   158,   159,     0,
     160,   161,   162,   163,   164,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,     0,     0,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,     0,   199,   200,   201,   202,   203,
     204,     0,     0,   205,   206,   207,   208,     0,     0,   209,
     210,   211,   212,   213,     0,   214,   215,   216,     0,   217,
     218,   219,   220,     0,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,     0,   233,     0,   234,
     235,   236,   237,     0,   238,     0,   239,     0,     0,     0,
     242,   243,   540,     0,   246,   247,   248,     0,   249,   250,
     251,   252,     0,   253,   254,   255,   256,   257,  1374,   259,
       0,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,     0,   272,     0,   274,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,   283,     0,     0,
     286,     0,   288,   289,   290,     0,   291,   292,   293,     0,
       0,   294,     0,   296,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   541,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,     0,   331,
     332,   333,   334,   335,     0,   336,   337,     0,   339,     0,
     340,   341,   342,   343,   344,   345,     0,   346,   347,     0,
       0,   348,   349,   350,     0,     0,   351,   352,   353,     0,
     355,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,     0,     0,     0,     0,   370,
     371,   372,     0,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,     0,   429,   430,   431,   432,   433,   434,
     435,   436,   437,     0,     0,   439,   440,   441,   442,     0,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   542,   458,   459,     0,     0,   460,
     461,     0,   462,     0,   464,   465,   466,   467,   468,   469,
       0,   470,   471,   472,     0,     0,   473,   474,   475,   476,
     477,     0,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,   486,   487,   488,     0,     0,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
       0,   501,     0,   503,   504,   505,   506,   507,   508,   509,
       0,     0,   510,     0,     0,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   539,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,     0,     0,     0,  1733,     0,     0,   134,   135,     0,
       0,   137,   138,     0,   140,   141,   142,   143,   144,     0,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,   157,   158,   159,     0,   160,
     161,   162,   163,   164,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,     0,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
     211,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,     0,   233,     0,   234,   235,
     236,   237,     0,   238,     0,   239,     0,     0,     0,   242,
     243,   540,     0,   246,   247,   248,     0,   249,   250,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,     0,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,     0,   274,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,   283,     0,     0,   286,
       0,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,     0,   296,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   541,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,     0,   331,   332,
     333,   334,   335,     0,   336,   337,     0,   339,     0,   340,
     341,   342,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,   353,     0,   355,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
     372,     0,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   435,
     436,   437,     0,     0,   439,   440,   441,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   542,   458,   459,     0,     0,   460,   461,
       0,   462,     0,   464,   465,   466,   467,   468,   469,     0,
     470,   471,   472,     0,     0,   473,   474,   475,   476,   477,
       0,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,     0,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,     0,
     501,     0,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   134,   135,     0,     0,
     137,   138,     0,   140,   141,   142,   143,   144,     0,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,     0,
     153,   154,   155,   156,   157,   158,   159,     0,   160,   161,
     162,   163,   164,     0,     0,     0,   166,   167,   168,   169,
     170,   171,     0,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,     0,     0,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,     0,   199,   200,   201,   202,   203,   204,     0,
       0,   205,   206,   207,   208,     0,     0,   209,   210,   211,
     212,   213,     0,   214,   215,   216,     0,   217,   218,   219,
     220,     0,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,     0,   233,     0,   234,   235,   236,
     237,     0,   238,     0,   239,     0,     0,     0,   242,   243,
     540,     0,   246,   247,   248,     0,   249,   250,   251,   252,
       0,   253,   254,   255,   256,   257,  1935,   259,     0,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,     0,   272,     0,   274,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,   283,     0,     0,   286,     0,
     288,   289,   290,     0,   291,   292,   293,     0,     0,   294,
       0,   296,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   541,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,     0,   331,   332,   333,
     334,   335,     0,   336,   337,     0,   339,     0,   340,   341,
     342,   343,   344,   345,     0,   346,   347,     0,     0,   348,
     349,   350,     0,     0,   351,   352,   353,     0,   355,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,     0,     0,     0,   370,   371,   372,
       0,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,     0,   429,   430,   431,   432,   433,   434,   435,   436,
     437,     0,     0,   439,   440,   441,   442,     0,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   542,   458,   459,     0,     0,   460,   461,     0,
     462,     0,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,     0,     0,   473,   474,   475,   476,   477,     0,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
     486,   487,   488,     0,     0,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,     0,   501,
       0,   503,   504,   505,   506,   507,   508,   509,     0,     0,
     510,     0,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   134,   135,     0,     0,   137,
     138,     0,   140,   141,   142,   143,   144,     0,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,     0,   153,
     154,   155,   156,   157,   158,   159,     0,   160,   161,   162,
     163,   164,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,     0,     0,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,     0,   199,   200,   201,   202,   203,   204,     0,     0,
     205,   206,   207,   208,     0,     0,   209,   210,   211,   212,
     213,     0,   214,   215,   216,     0,   217,   218,   219,   220,
       0,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,     0,   233,     0,   234,   235,   236,   237,
       0,   238,     0,   239,     0,     0,     0,   242,   243,   540,
       0,   246,   247,   248,     0,   249,   250,   251,   252,     0,
     253,   254,   255,   256,   257,  2323,   259,     0,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
       0,   272,     0,   274,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,   283,     0,     0,   286,     0,   288,
     289,   290,     0,   291,   292,   293,     0,     0,   294,     0,
     296,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   541,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,     0,   331,   332,   333,   334,
     335,     0,   336,   337,     0,   339,     0,   340,   341,   342,
     343,   344,   345,     0,   346,   347,     0,     0,   348,   349,
     350,     0,     0,   351,   352,   353,     0,   355,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,     0,     0,     0,     0,   370,   371,   372,     0,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
       0,   429,   430,   431,   432,   433,   434,   435,   436,   437,
       0,     0,   439,   440,   441,   442,     0,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   542,   458,   459,     0,     0,   460,   461,     0,   462,
       0,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,     0,     0,   473,   474,   475,   476,   477,     0,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,   486,
     487,   488,     0,     0,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,     0,   501,     0,
     503,   504,   505,   506,   507,   508,   509,     0,     0,   510,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     129,     0,   130,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,     0,   137,   138,
       0,   140,   141,   142,   143,   144,     0,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,     0,   153,   154,
     155,   156,   157,   158,   159,     0,   160,   161,   162,   163,
     164,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,     0,     0,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
       0,   199,   200,   201,   202,   203,   204,     0,     0,   205,
     206,   207,   208,     0,     0,   209,   210,   211,   212,   213,
       0,   214,   215,   216,     0,   217,   218,   219,   220,     0,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,     0,   233,     0,   234,   235,   236,   237,     0,
     238,     0,   239,     0,     0,     0,   242,   243,   540,     0,
     246,   247,   248,     0,   249,   250,   251,   252,     0,   253,
     254,   255,   256,   257,  2343,   259,     0,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,     0,
     272,     0,   274,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,   283,     0,     0,   286,     0,   288,   289,
     290,     0,   291,   292,   293,     0,     0,   294,     0,   296,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     541,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,     0,   331,   332,   333,   334,   335,
       0,   336,   337,     0,   339,     0,   340,   341,   342,   343,
     344,   345,     0,   346,   347,     0,     0,   348,   349,   350,
       0,     0,   351,   352,   353,     0,   355,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,     0,     0,     0,     0,   370,   371,   372,     0,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,     0,
     429,   430,   431,   432,   433,   434,   435,   436,   437,     0,
       0,   439,   440,   441,   442,     0,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     542,   458,   459,     0,     0,   460,   461,     0,   462,     0,
     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,
       0,     0,   473,   474,   475,   476,   477,     0,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,   486,   487,
     488,     0,     0,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,   501,     0,   503,
     504,   505,   506,   507,   508,   509,     0,     0,   510,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,  3377,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,   125,   126,   127,   128,   129,
       0,   130,   131,   132,     0,     0,     0,  3097,     0,     0,
       0,     0,  3098,   134,   135,     0,  3099,   137,   138,  3100,
     140,   141,   142,     0,  1537,  3101,  1539,  1540,     0,  3102,
     148,   149,   150,   151,   152,     0,     0,   153,   154,   155,
     156,  1542,  1543,   159,     0,   160,   161,   162,   163,     0,
       0,  3103,     0,  3104,   167,   168,   169,   170,   171,  3105,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
       0,  3106,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,  1548,   194,   195,  1549,   197,     0,   198,     0,
     199,   200,   201,   202,   203,   204,     0,     0,   205,   206,
     207,   208,     0,     0,   209,   210,  1093,   212,   213,     0,
     214,   215,   216,     0,   217,   218,   219,   220,     0,   221,
     222,   223,   224,     0,   226,   227,   228,   229,   230,   231,
       0,     0,   233,     0,   234,   235,  1550,   237,     0,   238,
       0,   239,  3107,     0,  3108,   242,   243,  2465,  3109,   246,
     247,   248,     0,     0,     0,   251,   252,     0,   253,   254,
     255,   256,   257,   258,   259,  3110,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,     0,   272,
    3111,     0,   275,   276,   277,   278,   279,  1556,  1557,     0,
    1558,     0,   283,  3112,  3113,   286,  3114,   288,   289,   290,
       0,   291,   292,   293,     0,     0,   294,  3115,   296,  3116,
       0,   298,   299,   300,   301,   302,   303,   304,   305,  2474,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,  1565,  3118,  1567,   332,   333,   334,     0,     0,
     336,   337,  3120,   339,     0,     0,   341,  1569,   343,   344,
     345,     0,   346,   347,     0,     0,   348,   349,   350,     0,
       0,   351,   352,     0,  3122,   355,  3123,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,     0,     0,     0,   370,   371,     0,  3124,   374,   375,
       0,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1573,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,  3125,
     412,   413,   414,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,  3126,   429,
     430,   431,   432,   433,   434,     0,   436,   437,     0,  3128,
     439,   440,  1579,   442,     0,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,  2482,
     458,     0,     0,     0,   460,   461,     0,   462,  3130,   464,
     465,   466,   467,   468,   469,     0,   470,  1582,  1583,     0,
       0,   473,   474,     0,   476,     0,     0,   478,   479,  3131,
     481,   482,   483,   484,   485,     0,     0,   486,   487,   488,
    3133,     0,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,     0,  1587,   500,     0,   501,  3134,   503,   504,
     505,   506,   507,   508,   509,     0,     0,   510,     0,     0,
     511,   512,   513,   514,   515,   516,  1842,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   528,   529,   530,
     531,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     126,   127,   128,   129,     0,   130,   131,   132,     0,     0,
       0,  1533,     0,     0,     0,     0,  1534,   134,   135,     0,
    1535,   137,   138,  1536,   140,   141,   142,     0,  1537,  1538,
    1539,  1540,     0,  1541,   148,   149,   150,   151,   152,     0,
       0,   153,   154,   155,   156,  1542,  1543,   159,     0,   160,
     161,   162,   163,     0,     0,  1544,     0,  1545,   167,   168,
     169,   170,   171,  1546,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,     0,  1547,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,  1548,   194,   195,  1549,
     197,     0,   198,     0,   199,   200,   201,   202,   203,   204,
       0,     0,   205,   206,   207,   208,     0,     0,   209,   210,
    1093,   212,   213,     0,   214,   215,   216,     0,   217,   218,
     219,   220,     0,   221,   222,   223,   224,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   233,     0,   234,   235,
    1550,   237,     0,   238,     0,   239,  1551,     0,  1552,   242,
     243,     0,  1553,   246,   247,   248,     0,     0,     0,   251,
     252,     0,   253,   254,   255,   256,   257,   258,   259,  1554,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,     0,   272,  1555,     0,   275,   276,   277,   278,
     279,  1556,  1557,     0,  1558,     0,   283,  1559,  1560,   286,
    1561,   288,   289,   290,     0,   291,   292,   293,     0,     0,
     294,  1562,   296,  1563,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,  1565,  1566,  1567,   332,
     333,   334,     0,     0,   336,   337,  1568,   339,     0,     0,
     341,  1569,   343,   344,   345,     0,   346,   347,     0,     0,
     348,   349,   350,     0,     0,   351,   352,     0,  1570,   355,
    1571,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,     0,     0,     0,     0,   370,   371,
       0,  1572,   374,   375,     0,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,  1573,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,  1574,   412,   413,   414,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,  1576,   429,   430,   431,   432,   433,   434,     0,
     436,   437,     0,  1578,   439,   440,  1579,   442,     0,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,     0,   458,     0,     0,     0,   460,   461,
       0,   462,  1581,   464,   465,   466,   467,   468,   469,     0,
     470,  1582,  1583,     0,     0,   473,   474,     0,   476,     0,
       0,   478,   479,  1584,   481,   482,   483,   484,   485,     0,
       0,   486,   487,   488,  1586,     0,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,     0,  1587,   500,     0,
     501,  1588,   503,   504,   505,   506,   507,   508,   509,     0,
       0,   510,     0,     0,   511,   512,   513,   514,   515,   516,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   528,   529,   530,   531,     0,     0,     0,     0,     0,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   134,   135,     0,     0,   137,   138,     0,   140,   141,
     142,   143,   144,     0,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,     0,   153,   154,   155,   156,   157,
     158,   159,     0,   160,   161,   162,   163,   164,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,     0,     0,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,     0,   199,   200,
     201,   202,   203,   204,     0,     0,   205,   206,   207,   208,
       0,     0,   209,   210,   211,   212,   213,     0,   214,   215,
     216,     0,   217,   218,   219,   220,     0,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,     0,
     233,     0,   234,   235,   236,   237,     0,   238,     0,   239,
       0,     0,     0,   242,   243,   540,     0,   246,   247,   248,
       0,   249,   250,     0,   252,     0,   253,   254,   255,   256,
     257,   258,   259,     0,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,     0,   272,     0,   274,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
     283,     0,     0,   286,     0,   288,   289,   290,     0,   291,
     292,   293,     0,     0,   294,     0,   296,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   541,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,     0,   331,   332,   333,   334,   335,     0,   336,   337,
       0,   339,     0,   340,   341,   342,   343,   344,   345,     0,
     346,   347,     0,     0,   348,   349,   350,     0,     0,   351,
     352,   353,     0,   355,     0,   357,   358,   359,   360,   361,
     362,   363,     0,   365,   366,   367,   368,   369,     0,     0,
       0,     0,   370,   371,   372,     0,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,     0,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,   412,   413,
     414,   415,     0,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,     0,   429,   430,   431,
     432,   433,   434,   435,   436,   437,     0,     0,   439,   440,
     441,   442,     0,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   542,   458,   459,
       0,     0,   460,   461,     0,   462,     0,   464,   465,   466,
     467,   468,   469,     0,   470,   471,   472,     0,     0,   473,
     474,   475,   476,   477,     0,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,   486,   487,   488,     0,     0,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,     0,   501,     0,   503,   504,   505,   506,
     507,   508,   509,     0,     0,   510,     0,     0,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   764,
       0,     3,     4,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   764,     0,     6,
       0,     0,     0,     0,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
       0,     0,     8,     0,     0,     0,     7,     0,     0,     0,
       0,     0,     0,    10,     0,     0,     0,     0,     0,     0,
       8,     0,     0,     0,     0,    11,     0,   765,     0,     0,
       0,    10,     0,     0,     0,     0,     0,     0,    13,     0,
       0,     0,     0,    11,     0,   765,     0,     0,     0,     0,
       0,     0,     0,    14,    15,     0,    13,     0,     0,     0,
       0,     0,     0,     0,   766,     0,     0,     0,     0,     0,
      18,    14,    15,     0,     0,     0,     0,     0,     0,    19,
       0,     0,   766,     0,     0,     0,     0,     0,    18,     0,
       0,     0,     0,     0,     0,     0,    22,    19,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    22,     0,     0,     0,    23,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1525,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1525,     0,     0,     0,     0,     0,     0,     0,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
       0,     0,     0,     0,     0,    29,     0,     0,    30,     0,
       0,     0,     0,     0,     0,    26,    27,    28,     0,     0,
       0,     0,     0,    29,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,    33,     0,    32,     0,     0,     0,
       0,    34,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,    36,     0,    34,
       0,     0,     0,    35,     0,     0,     0,     0,     0,    37,
       0,     0,     0,    38,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,    38,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,    39,     0,    42,     0,     0,     0,     0,    43,
       0,     0,     0,     0,   767,     0,    40,     0,     0,     0,
       0,     0,    42,     0,     0,     0,    44,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   768,     0,     0,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46
};

static const yytype_int16 yycheck[] =
{
       7,     0,     0,     0,   880,     0,     0,     0,     0,    16,
      46,   759,     0,     0,   856,     0,    23,     0,  1019,   922,
      16,   907,    20,   985,  1269,  1761,   830,    38,    20,   822,
     955,   950,   934,     7,  1490,  1268,    89,  1065,  1197,  1010,
      37,  1634,  1718,     7,  1256,  1010,  1607,  1875,  1474,    23,
    1010,    20,    93,  1010,   989,  1960,  1002,  1114,  2277,    23,
    1525,  1647,    93,   760,  1245,  2339,  1811,     0,  1690,  2263,
    2078,     0,  1826,    23,  1248,  1883,   869,  1377,  1328,  1671,
    1672,  2826,  1203,  1594,    91,    92,    17,  2242,     0,  2244,
    1162,  2783,  1273,     0,     0,  1167,     0,  2783,  2330,    45,
    2840,  2208,  2262,   114,     0,  1002,     0,     0,   105,    23,
    1864,   922,  2847,   924,     0,   926,  2413,    91,    92,    34,
     768,  2823,  1123,   767,  2700,  2647,  1028,    91,    92,     0,
     825,     0,  1008,  1903,  1722,     0,   831,     0,     0,  2491,
       0,    91,    92,     0,     0,     0,  2053,     0,     0,  1899,
    1690,     9,     0,     0,     5,    19,  2736,  1087,  1088,  2066,
    2740,     5,    13,    14,     5,  2015,  2043,  2044,  2045,  2963,
       5,    41,     0,  1781,     0,  1105,  1896,    91,    92,     3,
    3175,     5,     4,    19,  3187,     5,    10,     9,    10,  1870,
       0,     5,     5,    13,    14,     9,  3191,     5,  2430,     5,
       0,     5,    81,     5,     5,    13,    14,  1011,    91,    92,
      19,    13,    14,     5,     5,  2426,     5,  2420,     9,     5,
     786,    13,    14,    46,     5,     5,  1779,  1173,  1675,  2388,
       5,     5,    11,  2825,  2425,   175,   125,    16,   174,    46,
      13,    14,     4,    83,    56,  1142,  1122,     9,    75,    31,
     140,     5,    13,    14,    94,   109,   928,    39,    11,   902,
       3,     4,     5,    16,  1292,   174,     9,   902,    47,    11,
     120,  3071,   193,    15,    16,  1303,  1173,  1179,  2592,     4,
      19,   123,   875,    60,     9,    31,    83,  2519,  2520,  1208,
    2522,   101,  3380,    39,   123,   295,   174,    94,   183,    11,
     248,   101,    81,    15,    16,    47,   229,  3178,  1091,   293,
     201,  1257,   123,     5,  1260,  1261,   296,  1012,     9,  1034,
     820,    65,  3145,   108,  1039,  1108,  1041,   316,   229,  1024,
    1489,    75,    64,   301,   301,  1128,    64,  1130,  2693,    81,
    2695,  1066,  2425,   319,   171,  1060,     3,    64,   120,   281,
     195,   205,   108,   374,  1002,   278,   108,    60,  1234,  1003,
    1257,   296,   174,  1260,  1261,  1577,  1525,   133,   316,  2998,
    1817,  3000,     0,   215,    41,   118,   133,   278,    35,    36,
      11,   118,   166,   109,    31,   388,   215,    42,  1230,  1231,
     195,   118,    20,  3636,   351,    23,    31,    41,  1191,   375,
      84,  3590,   107,  2231,   168,  1102,   397,   121,  3477,    37,
    3479,    31,  3407,   121,   256,   118,  2571,   406,    46,    39,
     467,  3738,   151,   174,   347,    34,   166,    13,    14,   164,
    1985,   379,   271,   390,   809,  3127,   442,  3182,   492,  3557,
     526,  1360,   528,   321,   322,   323,   517,   123,  1173,  1335,
      81,    60,   827,  3198,  3583,  3584,   193,   253,   406,   530,
     514,  2016,   138,    91,    92,    93,   150,  1392,   194,  3304,
     427,  3306,   127,  1920,   203,   398,  2750,   105,   221,   295,
    3797,   528,  3184,   197,   280,   295,   133,   493,   327,   197,
    2751,  3734,  3561,   277,   234,   295,    91,   398,   133,  3688,
     244,   244,  1399,  1400,   440,  2724,   241,   528,   335,  3638,
     388,   178,   460,   285,   280,  2747,   173,  2749,   175,   364,
    3024,  3524,   278,   480,   290,   379,  1583,  2634,   528,   532,
    1977,  1256,   464,   290,   178,   130,   390,   528,  1038,   528,
    3340,   464,  1989,   280,   528,    13,  2901,   523,   528,   427,
     255,    19,    27,   550,  3425,  3378,   361,   367,   285,  3359,
     495,   266,    30,   464,   532,   532,   330,   367,  2079,  2155,
     479,  3689,  2019,   427,   300,  3663,    44,    45,   467,  2026,
     528,   517,   467,   169,   462,  2393,  2394,  2395,   528,  1232,
     414,   415,  2214,   285,   530,   473,   486,  1232,   605,  3228,
     440,   424,  3194,  3438,  1480,  2919,  2071,   528,  1280,   605,
    2871,  1204,  1542,  1543,  1207,  2208,   109,   424,   395,   469,
    3623,  2068,   464,   405,  1190,  2072,   480,   379,  1376,  3624,
     457,  2834,  1882,  1381,   366,   464,   477,  1567,   366,  1387,
    2799,   532,   427,   440,   112,  1945,  2878,   526,   492,   366,
     528,   530,  1494,   464,  2246,  2102,  2867,  3397,   334,   405,
     530,    76,   526,   138,  2672,  2856,   530,  3461,  1913,   527,
     514,   531,   532,  1515,  2214,  1468,  2284,   528,  2266,  2529,
     490,  2588,  2432,  2276,   528,   536,  1383,   528,  3380,   440,
     490,   527,  1720,   528,  3380,  2572,  2573,  2574,  2575,  1629,
    1630,   536,   528,   531,   528,   531,  2387,  2427,   528,   533,
     534,   533,   534,   526,   528,   528,   528,   530,   313,   529,
     528,   531,   528,   532,   528,  2495,   528,   528,  1625,   529,
    2283,   531,   768,  3309,  1610,  1611,   528,   528,   492,   528,
    3092,  1638,   528,  1640,  1620,   524,  1394,   528,   528,  1393,
    3272,  3331,  3049,   528,   528,   528,  3336,   519,   520,  1635,
     514,   768,  1664,  1665,  1666,   490,  1549,   528,  3042,   767,
     473,   524,  1669,  2856,   528,   767,   519,   520,  3523,   521,
     522,   523,   524,   284,   820,   405,  1569,  1502,   527,   514,
    3530,  1667,  1487,     4,   519,   520,  3531,   109,     9,   768,
     532,    11,   809,  2710,   532,    15,    16,  1522,  1017,   521,
     522,   523,   524,   820,    11,   417,   827,  3321,    15,    16,
     827,   478,  3326,  1606,   299,   528,  2076,   150,   519,   520,
     180,   872,   439,   186,    64,   809,   426,    47,   433,   164,
      60,   872,  1611,   280,   169,   809,   820,  3076,   285,   856,
     857,  1620,  1577,   827,   907,  3084,   820,   365,   120,   809,
    1653,   526,  3022,   827,   875,   530,   467,   523,   175,  2028,
     820,    81,   479,   880,   530,    11,   466,   827,   105,   202,
     482,  1778,  1779,   936,  2892,   896,  2694,   395,   363,  3634,
     365,   890,   890,   890,   244,   890,   890,   890,   890,   490,
    1846,   402,   890,   890,   133,   890,   820,   890,   345,   878,
    1856,    47,  2071,  1859,     4,   427,   241,   523,  3620,     9,
     395,  3028,   550,   514,   530,   932,   933,   528,   149,   936,
     937,     4,  2232,   162,   254,   881,     9,   820,  1841,  1687,
     123,  3173,   517,   858,   859,    81,   861,   209,   863,  1846,
    1675,   134,   407,   528,   174,  2411,   183,   890,  1043,  1856,
     280,   890,  1859,   146,  1049,  3749,  2038,   292,   528,  2977,
    2592,  3663,   164,  3757,  2802,  2803,   431,  3663,   890,  3681,
    1905,  1943,   989,   890,   890,  1947,   890,  2434,  1950,  1924,
    1876,  1877,  1878,   346,   890,  1002,   890,   890,  1809,   220,
    1007,  1008,  1038,  2748,   890,  1003,  1013,   314,   531,  1016,
    1017,  1003,  1019,  1020,  1021,  1022,   278,  1952,   280,   890,
    2774,   890,   375,  3768,   955,   890,    25,   890,   890,  1036,
    1841,  1038,   215,   890,   890,   890,  2336,   890,   890,  2793,
    1047,  2634,   890,   890,  2491,    72,    73,    38,   278,   241,
    1861,   278,    83,   492,    83,  1866,   285,  1064,  1065,  1066,
       5,   290,  1036,    94,  1038,    94,   205,  2659,  3342,   351,
     248,    31,  1036,  1047,  1038,   514,   432,  3525,   434,  1086,
     301,   526,   432,  1047,   434,   530,  1036,  1123,  1038,   528,
      27,   526,  1817,    83,   401,   530,    33,  1047,   566,  1106,
     292,   321,   322,   323,  1852,   432,    38,   434,   390,  1857,
     460,  1118,  1119,  1120,  2570,  1122,  1123,   478,  1125,   109,
     119,  2366,  1036,  3317,  1038,  2551,    86,  2248,     0,  1125,
    2251,    54,   176,  1047,   529,    95,   366,   532,   316,   767,
     768,   843,   844,   845,    27,   427,   848,  2306,  2024,  2399,
      33,  1158,   526,  1036,   528,  1038,   530,    27,   216,   119,
    2607,  2989,   164,    33,  1047,   395,   532,   169,   388,  1176,
    1177,   280,  1213,  1214,  3622,  1216,   490,  3625,   492,   264,
     265,   809,  1213,  1214,   175,  1216,   176,  1048,   133,  2086,
    2783,  1052,   820,  1204,  2375,  1920,  1207,   133,   480,   827,
     529,   138,  1968,   532,   361,   249,  1972,   427,  1215,  1975,
     437,     5,  1219,  1220,  3222,   205,   347,   162,   447,   176,
     211,   109,  1229,  1230,  1231,  3499,   162,  1234,   406,   458,
     191,   192,   432,   193,   434,   456,   227,  2238,  2114,   241,
     379,   528,   462,   175,   872,   529,   206,   238,   532,  1256,
     492,   390,  1977,   473,   528,   138,   179,  1466,  1467,   249,
     361,  1272,   890,  1472,  1989,   386,  3171,  2441,   138,    13,
      14,   529,   514,   196,   532,    13,    14,  2451,   201,   211,
     529,   464,   460,   532,  3732,  1292,   528,   432,   427,   434,
     292,   386,   249,   761,  2019,   227,  1303,  2919,  3043,   384,
     385,  2026,   205,   264,   265,   257,   238,   351,   528,   519,
     520,   521,   522,   523,   524,    13,    14,   240,  2194,   149,
     445,  1328,   519,   520,   521,   522,   523,   524,   858,   859,
    2345,   861,  2347,   863,   164,   280,  2783,    13,    14,   169,
     285,   480,   480,  2068,   280,   290,   390,  2072,  2245,   285,
     528,  1350,   427,  2078,   290,  1350,  1350,  2243,  3166,   383,
     529,  1368,   299,   532,  2820,  1350,  2747,   386,  2749,  2955,
    1377,    75,  1368,   529,   528,  1003,   532,  2102,  2825,   370,
    2342,   529,  2344,   427,   532,  2282,  2283,  1394,   529,   379,
     220,   532,   374,   375,   351,  1393,   529,   169,   389,   532,
     390,  1393,   529,   174,  1411,   532,    27,   451,  1036,  1416,
    1038,   241,    33,   881,   118,  1411,   299,  2928,   529,  1047,
    2931,   532,  2933,   384,   385,  1394,   363,    13,    14,   299,
    2895,  2590,   528,   390,  2593,  3028,   480,   427,   370,  1479,
     529,  1481,  1482,   532,   514,   529,   529,  3008,   532,   532,
      13,    14,   529,   413,  1082,   532,   416,   389,   395,  1466,
    1467,   451,   292,  2160,   528,  1472,  1094,  1474,   528,  2311,
     427,   301,  1479,  1480,  1481,  1482,   359,   400,   529,   529,
     363,   532,   532,   899,   521,   901,  3760,  1494,  1495,   359,
     480,    13,    14,   363,   451,  1123,   529,   511,  1505,   532,
    1474,  1508,   447,    19,   529,  2424,  1513,   532,  1515,  1516,
    1474,   447,   395,   458,  1521,   528,  3735,   138,  3737,    13,
      14,  2766,   458,   480,  1474,   395,   529,    13,    14,   532,
     528,  1505,  2765,   470,  1508,    13,    14,   529,  3693,  1513,
     532,  1505,  1516,   529,  1508,   529,   532,  1521,   532,  1513,
     530,   529,  1516,  3708,   532,  1505,   529,  1521,  1508,   532,
     226,   529,   529,  1513,   532,   532,  1516,    13,    14,   528,
    1577,  1521,    13,    14,   295,   529,   280,  3796,   532,    13,
      14,   285,  2639,  2640,  2817,  1213,  1214,   470,  1216,   528,
    2764,  1505,  2766,   248,  1508,    27,    13,    14,   528,  1513,
     470,    33,  1516,  1610,  1611,   529,   528,  1521,   532,  1607,
    1607,   528,  1619,  1620,  1607,  1607,  3521,    13,    14,  1607,
    1607,  1628,  1505,   528,  1607,  1508,   456,  3782,  1635,   529,
    1513,   335,   532,  1516,   529,  1642,   529,   532,  1521,   532,
    3795,   532,  3470,  3471,  2615,  3092,  2647,   511,   180,   353,
    2615,  2616,  2617,   173,  2614,  1662,  1663,   248,  2615,  2616,
    1667,   316,   529,  1670,   529,   532,   528,  1720,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,   299,    13,
      14,  1688,  1689,  1690,   529,   529,  1693,   532,  1684,   529,
    1697,   529,   532,  1700,  1701,  1702,  1703,  1704,  1705,  1706,
    1707,  1708,    13,    14,  1711,     5,   138,   529,   174,  2434,
     532,  1718,   244,  1720,  2611,  2612,  1690,   529,     6,   300,
     532,   222,    10,  1764,   379,   316,   529,    60,  1196,   532,
      18,  1738,   528,  1764,    13,    14,    13,    14,   359,    13,
      14,  3188,   363,    27,    32,    13,    14,  3194,    36,    33,
     428,   406,   174,   457,    13,    14,   511,  2505,    13,    14,
    1767,    13,    14,   467,   226,  1393,  2491,  1736,    13,    14,
      27,  1778,  1779,   154,   395,   359,    33,   180,    13,    14,
     154,  1990,  1991,  1992,  1993,  1994,  1995,  3380,   379,  1998,
    1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,   374,
     375,   359,   205,   154,   803,   460,   154,  3483,   154,     8,
    1817,  2713,    11,   374,   375,   406,    15,    16,   154,  3266,
    1827,    20,    21,    22,  1831,   374,   375,   127,   128,   268,
     269,  1827,   384,   385,   109,  1831,   835,    13,    14,   472,
     473,   244,  2492,  2493,    41,  3090,   529,   379,   427,   470,
    3714,  3715,  2268,  2269,   138,  3703,  3704,  3744,  3745,  1176,
    1177,   860,   280,   528,   480,  1872,    90,   299,  1875,   460,
     494,   154,   154,   528,   174,  1882,  1872,  1505,  1885,  1886,
    1508,   138,  2607,   530,   154,  1513,  2783,   154,  1516,   295,
     361,   528,   440,  1521,   528,   429,  2738,   300,   897,   528,
     432,   529,   434,   528,   222,   248,  2831,    47,   227,   528,
     305,  2787,  2874,  1920,   227,  3127,  1384,  1924,  1386,   227,
     528,  1918,  2808,  2858,   302,    41,   528,   359,   460,   239,
     528,   363,     5,  3380,  2853,     5,   528,   528,  1945,   331,
     528,   528,     5,     5,     5,  1952,  1953,  2672,   528,     5,
     528,   528,     9,   491,   528,  3691,  1963,   528,   307,  3695,
     532,   105,  2990,   395,   532,   529,   222,   467,   395,   169,
    1977,   292,    60,   316,  1981,  1982,   379,  1984,   169,  1607,
    2189,  2190,  1989,  1990,  1991,  1992,  1993,  1994,  1995,   290,
     239,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,   528,   201,  1002,  3430,   440,  2013,  2014,    94,   440,
    2017,  1010,  2019,   532,   440,   299,    60,  2024,    60,  2026,
     440,   321,   322,   323,   271,   224,   440,    19,   224,   432,
     528,   434,  2929,  3769,   490,   440,   379,   154,   470,    41,
     440,  2048,   299,   101,   386,   528,   280,  2054,   280,  2056,
      41,   280,    41,  2060,   457,   280,   528,   460,  2783,    61,
     280,  2068,  1690,   406,   280,  2072,   201,  2074,    13,  2076,
    3663,  2078,   154,   174,   149,   359,   530,   529,   529,   363,
    2054,   174,   529,   532,   529,   529,  2060,   529,   388,   164,
    2054,   529,     0,   487,   169,  2102,  2060,   227,   297,   399,
    2825,   529,   359,   528,  2054,   107,   363,  2114,  2115,   528,
    2060,   395,   227,   287,  2121,   287,   528,   460,   528,   532,
     477,   530,   530,   423,   528,    40,   528,   427,   180,   528,
     528,  3093,  3094,  1132,   486,  3081,  1764,   528,   395,   528,
    2054,     9,   248,  1142,   438,   220,  2060,  2154,   438,    11,
     361,  2158,   528,   205,   527,   532,  2163,  2164,  2194,    19,
     532,  3394,   462,   180,  3590,  1164,   241,  2892,   537,   438,
     528,  2054,   285,   473,  1173,   440,  2924,  2060,   183,   165,
     174,   229,  2189,  2190,  3081,   528,   470,  2194,  3644,  3086,
     490,   532,   244,   101,   529,   248,    41,   220,   229,   271,
     532,   467,   204,  2210,   467,   398,  2213,  2214,  2215,  3635,
     316,   296,   319,   470,   514,   319,  3663,   292,   532,   183,
     532,   222,   529,   359,  2231,  2232,   301,   244,   528,   528,
     229,  2238,   229,   280,  2241,   530,  3237,    60,  3135,  3136,
    2214,   149,  3035,    60,    60,    60,   180,   301,   300,   287,
    2257,   287,  2977,   255,  2261,   528,   164,   529,   293,   340,
     154,   169,  3688,   316,   266,   480,   174,  2241,  2275,   154,
     154,   205,   154,   379,   154,   183,   278,  2241,   490,   532,
     188,   532,  1281,  2257,    41,  2292,  2293,  2261,   154,     3,
    1918,  2241,   528,  2257,  3453,   280,     3,  2261,    41,   295,
     406,    60,  2309,   320,  2311,   295,    11,  2257,   310,   174,
     244,  2261,   220,    41,  3062,  2322,   515,   516,   517,   169,
     519,   520,   521,   522,   523,   524,   379,  2241,   529,  2336,
     183,   529,   169,   241,   529,   529,   528,     3,  2345,  2346,
    2347,   528,   528,  2257,  1812,    40,     3,  2261,   526,  2345,
    2346,  2347,   529,   406,   460,  1823,   526,  1825,   527,   532,
    1828,   440,   379,   365,   440,   529,   300,  3092,   529,   386,
    1838,   440,  1840,   440,   537,   530,   529,   529,  2261,   511,
     432,   456,   434,  2390,   292,  1853,   320,   295,   390,   511,
    1858,   529,  2399,   301,  1862,  1863,   529,  1865,   359,  1867,
    1868,   530,  3127,   150,   529,   457,   529,   460,   460,   411,
     174,  1410,   511,   440,   528,   432,   528,   434,   528,  2418,
     528,  3666,   528,  2418,  2418,   157,  2054,  2434,   528,    41,
      60,   464,  2060,  2418,   342,   532,   487,   517,   479,   513,
     296,  3360,   296,   460,   247,   379,    60,    60,   532,   271,
     280,   526,   386,   440,   529,   530,   440,   528,   154,   367,
     205,   154,   154,  3188,   528,   440,   440,  2676,  2677,  3194,
     440,   440,    41,  3370,  3371,   528,    41,   532,   528,   293,
     529,   490,   118,  3380,  2491,   528,   361,  2494,   528,   295,
    2497,    41,   529,   154,   528,   285,   528,  3222,   432,   529,
     434,  2497,   149,   174,  2511,   529,  3310,   528,   528,    60,
     529,   529,   188,    14,   529,  2511,   169,   164,    81,   427,
     526,   529,   169,   457,   144,   529,   460,   529,   174,   532,
      19,   529,   306,   254,   529,   528,   367,   154,   174,   183,
     528,  3266,   296,   178,  2551,   451,   529,   528,   456,   529,
     532,   528,    87,   529,   532,    41,   529,   528,   530,   467,
      41,   529,   529,  3439,   529,  3441,  2194,    41,   528,   528,
     528,    41,   467,   220,   174,   532,   528,  2551,   529,   487,
     489,   489,   490,  3485,     8,  2592,  2214,  2551,   529,   529,
     201,    15,    16,    75,   241,   527,    20,    21,    22,    81,
    2607,  2551,  2230,   527,   532,    41,   529,   529,  2619,  3451,
     529,  2647,    94,  2241,   473,   295,   486,  2624,   526,   517,
      60,   529,   530,   531,  2631,  2632,   529,   529,   529,  2257,
     529,   207,   490,  2261,  2687,   118,   118,    41,   120,   528,
    2647,   229,    89,   285,   285,   292,  2682,   194,   529,  3650,
    3454,   530,  3456,  2660,   301,  3380,  2663,   530,  2665,   530,
     517,   530,   440,   530,   440,  2672,  2673,   530,   529,  2676,
    2677,    41,   527,   309,  2681,  2682,  3595,   280,   530,   530,
    2889,  2688,   530,   530,   530,   321,   322,   323,   530,   530,
     530,   530,   530,  2700,    41,   530,  3582,   530,  2705,   527,
     529,  3604,  2738,     0,   530,   530,   530,   108,   529,  2716,
     530,   530,  2709,   490,    61,   427,   295,   530,   530,   530,
     530,   530,   530,   530,   528,   530,  2700,   209,   530,  1728,
     530,  2738,   530,  3575,   529,     8,   532,   528,    11,   528,
       9,   360,    15,    16,   528,   528,   532,    20,    21,    22,
     342,   532,   388,    60,  1753,  1754,    38,   529,   529,   201,
     107,    43,   527,   532,   194,   532,  3663,   529,   529,   472,
      92,   529,   353,  2780,    41,   528,  2783,  2784,   154,  2786,
    2787,  2788,   530,   529,  2780,  2253,   125,   154,  2784,    41,
    2786,   427,   529,   375,    41,  2802,  2803,   375,   280,   529,
      41,   528,   528,   285,   101,   467,   528,   532,  2815,   456,
     315,    37,   253,   528,   285,  2851,   193,   252,  2825,  2447,
     102,    75,   467,   451,   528,   298,   462,  2824,    81,  2865,
      75,  2830,     9,   377,   528,  2830,  2830,   473,   529,   529,
     529,   527,   527,    60,    94,  2830,   134,   436,    60,   517,
    1017,  2858,   149,   335,   490,  3064,   278,   204,  2855,    41,
     451,  2868,   295,   528,   298,   528,   298,   164,   472,   529,
    1869,   353,   169,   297,   529,   529,   207,   174,   514,   526,
    2916,   295,  2889,   530,  3632,  2892,   183,   295,  1887,  1888,
     529,   188,   528,   175,   281,   395,   436,   464,   123,   374,
     473,   183,  2909,  2910,   150,  2912,   521,   473,   255,  2916,
      26,    37,  2919,   374,   303,  3086,  2337,  2340,   528,   266,
     529,  2767,  1737,   220,     7,     8,  1839,   890,  3804,   211,
      13,   278,  2511,  1888,  1872,  2417,    19,  2780,  3663,  2946,
      23,  3610,    25,  2820,   241,   227,    29,    30,    31,  3727,
    3353,    34,  3676,  3667,    37,    38,   238,  3720,    41,  2966,
     804,    44,    45,   310,  2971,  2972,  3409,  1243,  1967,  2976,
    2977,  2328,  3665,  2346,  2981,   457,  2444,  2984,  2985,  2757,
    1817,  3017,  2989,  2990,  1817,   467,  2993,  3674,  2786,  2325,
    2997,  3662,   274,  2492,  1347,   292,  2493,  3214,   295,  2858,
    2715,  1376,  2500,  3010,   301,  1952,  1394,  2841,    91,    92,
    3008,  3008,  3221,   295,  3552,  3008,  3008,  3487,   365,  2647,
    3008,  3008,   105,  2997,   297,  3008,  2714,   110,   111,   112,
     113,   114,   115,  2997,  3635,  3586,  1002,  3754,  3661,   321,
    3759,  3325,  3008,   390,  2309,   342,   328,  2997,   897,  3056,
    1196,  3309,  2788,  1220,  2682,  1803,  1035,  3064,  2275,  2570,
    3644,  1223,  1229,  1222,   411,     8,  2292,  1767,    11,  3563,
     367,  3443,    15,    16,  1802,  1225,  3083,    23,  2257,  1035,
    2065,  2709,  2919,  2997,  3261,  3092,  1012,  2551,   370,  2550,
    2599,   515,   516,   517,  1056,   519,   520,   521,   522,   523,
     524,    38,  3374,  1010,    47,  2081,    43,   389,  3567,  3566,
    2738,    54,  2165,  1010,  2997,  2632,  2276,  1010,     8,  1010,
    3127,    11,  1010,  1010,  1010,    15,    16,  1010,  2214,  2116,
     427,  2211,  1010,  1495,  3010,  2656,  2168,  2968,    81,  1736,
     153,  2074,    -1,   867,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,   456,
      -1,   174,    -1,    -1,    54,   102,    -1,    -1,    -1,    -1,
     467,  3178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     462,  3188,  3178,    -1,    -1,   467,    -1,  3194,  3185,    -1,
     487,    81,   489,   490,    -1,    -1,  2824,  3204,  3205,    -1,
    3207,  3237,    -1,    -1,   147,    -1,    -1,  3214,    -1,    -1,
      -1,    -1,    -1,    -1,  3221,  3222,    -1,    -1,  3214,    -1,
      -1,    -1,    -1,  2851,    -1,    -1,    -1,  2855,    -1,   526,
    3237,    -1,   529,   530,   531,    -1,   179,  2865,   175,    -1,
      -1,    -1,   515,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,   196,    -1,    -1,    -1,   147,   201,  3266,
      -1,    -1,    -1,    -1,    -1,  3272,    -1,    -1,    -1,    -1,
      -1,    -1,    41,  2741,   211,  2743,    -1,   153,    -1,    -1,
      -1,  3288,  3289,    -1,    -1,  3292,    -1,  3294,  2916,   179,
     227,    -1,    61,    -1,    -1,    -1,    -1,   240,   174,  1466,
    1467,   238,  3309,    -1,  2772,  1472,   196,    -1,   321,   322,
     323,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3327,  2789,  2790,  2791,  2792,    -1,  2794,  2795,  2796,  2797,
    2798,    -1,    -1,    -1,    -1,  3309,    -1,   274,   107,   108,
      -1,    -1,    -1,    -1,  3351,    -1,    -1,    -1,    37,   118,
     240,    -1,    41,  2352,   297,    -1,    -1,     8,   295,    -1,
      11,  1017,    -1,    -1,    15,    16,    -1,    -1,    -1,  2997,
      -1,    -1,    -1,  3380,    -1,   388,    -1,    -1,    -1,    -1,
    3008,    -1,    -1,    -1,   321,    -1,    -1,    -1,    -1,  3017,
      -1,   328,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      -1,    -1,  3399,    54,    -1,    -1,    -1,   297,    -1,   178,
      -1,    -1,  2411,    -1,   427,    -1,   105,    -1,  3425,    -1,
      -1,    -1,   111,  3430,   113,    -1,   115,    -1,    -1,  3425,
      81,    -1,  3439,   370,  3441,   204,  3443,    -1,    -1,    -1,
    3447,    -1,  3449,    -1,  3451,   321,   322,   323,    -1,   462,
      -1,    -1,   389,    -1,    -1,    -1,  3430,   400,  3465,    -1,
     473,    -1,    -1,  3470,  3471,    -1,  3430,    -1,   551,    -1,
      -1,    -1,    -1,   556,    -1,    -1,  3483,   490,    -1,    -1,
    3430,    -1,    -1,   566,    -1,    -1,   255,  3484,    -1,  3486,
      -1,    -1,    -1,  3500,    -1,    -1,   147,   266,  3505,    -1,
      -1,   514,    -1,    -1,  3500,    -1,    -1,    -1,    -1,   278,
     400,   280,   388,    -1,    -1,   528,  2515,    -1,  2517,    -1,
      -1,    -1,  2521,    -1,  2523,   462,    -1,    -1,   179,    -1,
     467,    -1,  3529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   310,    -1,    -1,    -1,   196,  3553,    -1,    -1,  3546,
     201,   427,    -1,    -1,    -1,    -1,  3563,  3185,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3575,   512,
      -1,    -1,    -1,  1229,    -1,    -1,   519,   520,   521,   522,
     523,   524,    -1,  3590,    -1,  3592,   462,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,  3063,   365,   473,    -1,    -1,
    1767,    -1,    -1,    -1,  3611,    -1,    -1,    -1,    -1,  3237,
      -1,    -1,    -1,    -1,   490,    -1,  3590,    -1,    -1,    -1,
      -1,   390,   512,   127,   128,    -1,  3590,    -1,  3635,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,   514,    -1,
    3590,    -1,   411,  3650,   413,    -1,   297,   416,    -1,    -1,
      -1,    -1,   528,    -1,    -1,    -1,  3663,    -1,  3665,    -1,
      -1,  3635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3665,
     174,  3635,    -1,    -1,    -1,    -1,   759,   760,   761,    -1,
      -1,  3688,    -1,  3680,    -1,  3635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3702,  3703,  3704,    -1,   174,
      -1,    -1,    -1,    -1,     8,    -1,  3713,    11,    -1,  3706,
      -1,    15,    16,    -1,  3688,  1066,    20,    21,    22,    -1,
     803,   804,    -1,    -1,  3688,    -1,   809,    -1,   811,    -1,
      -1,  3738,    -1,    37,    -1,    -1,    -1,   820,  3688,    -1,
      -1,   824,   825,    47,   827,    -1,    -1,   830,   831,   400,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
     843,   844,   845,    -1,    -1,   848,    -1,    -1,    -1,    -1,
      -1,  3399,    -1,   856,   857,   858,   859,    81,   861,    -1,
     863,    -1,    -1,    -1,  2783,    -1,    -1,    -1,    -1,    -1,
    3797,    -1,   875,    -1,    -1,    -1,  3424,  3804,   881,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   892,
    1466,  1467,    -1,   896,   897,    -1,  1472,   321,   322,   323,
      -1,  2820,    -1,  1990,  1991,  1992,  1993,  1994,  1995,    -1,
      -1,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,    -1,    -1,     0,    -1,    -1,   321,   322,   323,    -1,
      -1,    -1,  2851,    -1,    -1,    -1,  3484,    -1,  3486,    -1,
      -1,   512,   551,    -1,   947,   948,    -1,   556,   519,   520,
     521,   522,   523,   524,    -1,   179,    -1,    -1,   961,   962,
     963,   964,   965,   966,   388,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    38,  3362,   399,   979,   201,    43,    -1,
      -1,  3529,    -1,    -1,    -1,  1256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,    -1,  3383,  3384,    -1,  3546,   423,
     224,   225,    -1,   427,    -1,    -1,    -1,    -1,  1011,  1012,
      -1,  1014,    -1,    -1,  1017,    -1,   240,    -1,  3406,    -1,
    1023,  1024,    -1,    -1,   101,    -1,    -1,  1030,    -1,    -1,
      -1,    -1,   427,  1036,    -1,  1038,    -1,   102,   462,    -1,
      -1,    -1,    -1,    -1,  1047,    -1,    -1,    -1,    -1,   473,
       8,    -1,    -1,    11,  1057,    -1,   280,    15,    16,   283,
      -1,    -1,    20,    21,    22,    -1,   490,   462,    -1,    -1,
      -1,  1074,   149,   297,    -1,    -1,   300,    -1,   473,    -1,
      -1,    -1,  3001,    -1,    -1,    -1,    -1,   164,    -1,    47,
     514,    -1,   169,    -1,    -1,   490,    54,   174,    -1,  1102,
      -1,    -1,  2189,  2190,   528,    -1,   183,    -1,    -1,    99,
     175,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,    -1,    81,  1127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3680,   528,    -1,    -1,    -1,   127,   128,    -1,
    1716,    -1,    -1,   220,    -1,    -1,   211,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3706,    -1,
      -1,    -1,   227,    -1,   241,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,    -1,   400,    -1,  1181,    -1,
      -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
      -1,  1767,    -1,  1196,  1197,    -1,    -1,    -1,    -1,    -1,
      -1,  1204,   811,    -1,  1207,    -1,    -1,    -1,    -1,   274,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,   179,  2309,    -1,   301,    -1,  1229,  1230,  1231,    -1,
     295,    -1,    -1,    -1,  1237,    -1,    -1,  1240,   196,  1242,
    1243,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1255,    -1,    -1,    -1,   321,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,   342,    -1,  3655,    -1,  1272,
      -1,    -1,    -1,  1276,    -1,    -1,    -1,    -1,    -1,  1282,
      -1,    -1,   240,   892,    -1,    -1,    -1,    -1,   512,    -1,
     367,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   370,  1577,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,    -1,    -1,    -1,   947,   297,
      -1,  1344,    -1,  1346,    -1,    -1,    -1,    -1,  1351,    -1,
     427,    -1,   961,   962,   963,   964,   965,     3,    -1,    -1,
      -1,    -1,     8,    -1,  1367,    11,    -1,    -1,    -1,    15,
      16,    17,    18,  1376,    20,    21,    22,    -1,  1381,   456,
    1383,  1384,    -1,  1386,  1387,    -1,  3305,    -1,    -1,    -1,
     467,    37,    -1,    -1,    -1,    41,    -1,   462,   388,    -1,
      -1,    47,    -1,    -1,  1675,  1014,    -1,    -1,    54,   399,
     487,    -1,   489,   490,  1990,  1991,  1992,  1993,  1994,  1995,
      -1,    -1,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
    2006,  2007,    -1,   423,    -1,    81,     8,   427,    -1,    11,
      -1,    -1,   400,    15,    16,    -1,  1066,    -1,    -1,   526,
      -1,    -1,   529,   530,   531,    -1,    -1,    -1,   448,    -1,
      -1,  3380,  1066,  1466,  1467,    -1,    -1,    -1,    -1,  1472,
      -1,  1474,   462,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    54,   473,  1487,    -1,  1489,  1490,    -1,    -1,
      -1,  1494,  1495,    -1,  1497,    -1,    -1,    -1,    -1,  3418,
     490,    -1,  1505,    -1,    -1,  1508,    -1,    -1,    -1,    81,
    1513,    -1,  1515,  1516,    -1,    -1,    -1,    -1,  1521,    -1,
    1523,    -1,  1525,    -1,   514,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,   179,    -1,    -1,    15,    16,   528,    13,
      -1,    20,    21,    22,    -1,    19,  1817,    -1,    -1,    23,
     196,    -1,    -1,    -1,   512,   201,    30,   515,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,    -1,
      44,    45,    -1,    -1,    56,   147,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,  1066,    -1,    -1,  2676,
    2677,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,  3522,    -1,    11,    -1,   179,    -1,    15,
      16,    -1,    -1,  2189,  2190,    -1,    -1,    91,    92,    -1,
      -1,   103,    -1,    -1,   196,    -1,    -1,    -1,  1237,   201,
      -1,  1634,    -1,  1242,   280,    -1,  1256,   283,   112,    -1,
      -1,    47,   124,    -1,  1647,    -1,  1255,    -1,    54,  1920,
      -1,   297,  1256,    -1,   300,     8,    -1,    -1,    11,    -1,
     142,    -1,    15,    16,    -1,   147,     8,  1276,   240,    11,
      -1,    -1,    -1,    15,    16,    81,    -1,    -1,    20,    21,
      22,    -1,    -1,    -1,  1687,    -1,    -1,  1690,   170,    -1,
      -1,   173,    -1,    -1,    47,    37,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,  1977,   189,    -1,    41,
      -1,    -1,    -1,    -1,    -1,  1718,    -1,    -1,  1989,    -1,
      -1,    -1,   201,    -1,    -1,   297,    -1,    -1,    81,    61,
    1733,    -1,  1735,  2309,  1737,    -1,    -1,  1346,    -1,    -1,
      -1,   147,  1351,    -1,  3663,   224,  1749,    -1,  2019,  1752,
    1753,  1754,    -1,    -1,   400,  2026,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1767,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,    -1,   107,  1256,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,  1792,
     196,  1794,    -1,    -1,   147,   201,    -1,  2068,    -1,    -1,
      -1,  2072,  2889,   285,    -1,  1808,    -1,  2078,  1811,  1812,
      -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,
    1823,  1824,  1825,  1826,    -1,  1828,   179,    -1,   400,  2916,
      -1,  2102,    -1,   315,   240,  1838,    -1,  1840,    -1,    -1,
      -1,    -1,    -1,   196,   102,    -1,   178,    -1,   201,  1852,
    1853,    -1,    -1,    -1,  1857,  1858,    -1,    -1,    -1,  1862,
    1863,  1864,  1865,   345,  1867,  1868,   512,    -1,    -1,   515,
     516,   517,   204,   519,   520,   521,   522,   523,   524,  2966,
      -1,    -1,   224,    -1,    -1,    -1,  1889,   240,  1497,    -1,
      -1,   297,    -1,    -1,    -1,  1898,  1899,  1900,  1901,  1902,
    1903,  1904,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1916,    -1,    -1,    -1,   175,    -1,    -1,
      -1,    -1,    -1,   255,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,    -1,    -1,  1940,    -1,    -1,
     512,    -1,    -1,    -1,   297,    -1,   278,   519,   520,   521,
     522,   523,   524,   211,    -1,   297,    -1,  1577,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,
      -1,    -1,    -1,  1577,    -1,    -1,    -1,  3064,   310,    -1,
     238,    -1,    -1,    -1,    -1,    -1,    -1,  1990,  1991,  1992,
    1993,  1994,  1995,    -1,   400,  1998,  1999,  2000,  2001,  2002,
    2003,  2004,  2005,  2006,  2007,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,  2028,    -1,    -1,    15,    16,
      -1,    -1,    -1,   365,    -1,    -1,   515,   516,   517,  2042,
     519,   520,   521,   522,   523,   524,    -1,   400,    -1,    -1,
      -1,  2054,    -1,    -1,    -1,  1675,    -1,  2060,   390,    -1,
      47,    -1,  2065,   321,    -1,    -1,    -1,    54,  2071,    -1,
     328,  1675,    -1,    -1,    -1,    -1,    -1,  2080,  2081,   411,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   566,    -1,    81,     8,    -1,  1577,    11,    -1,
    2676,  2677,    15,    16,    -1,    -1,   512,    20,    21,    22,
      -1,    -1,   370,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,    37,    -1,  1735,    -1,  1737,    -1,
      -1,   389,    -1,    -1,  3221,    -1,    -1,    -1,    -1,    -1,
    1749,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2155,    -1,    -1,    -1,    -1,  2160,    -1,   512,
      -1,    -1,  2165,  2434,    -1,    -1,   519,   520,   521,   522,
     523,   524,    -1,   515,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,  1792,    -1,    -1,  2189,  2190,    -1,    -1,
      -1,    -1,   179,    -1,    -1,  1675,    -1,  1817,    -1,    -1,
      -1,    -1,    -1,    -1,   462,  2208,    -1,    -1,    -1,   196,
      -1,  2214,    -1,  1817,   201,   309,    -1,    -1,    -1,    -1,
    2491,    -1,    -1,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,  1066,    -1,    -1,    -1,    -1,    -1,    -1,  2241,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    2253,    -1,    11,   240,  2257,    -1,    15,    16,  2261,  2262,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    -1,   760,   761,    -1,  1898,
    1899,  1900,  1901,  1902,   388,  1904,    -1,    37,    -1,    -1,
    1920,    -1,    42,  2306,    -1,    -1,  2309,    47,  2311,  2312,
     297,   224,    -1,  2889,    54,    -1,  1920,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1066,    -1,    -1,  2330,    -1,    -1,
      -1,    -1,    -1,   427,    -1,    -1,  2607,  1817,    -1,    -1,
    2916,    81,    -1,    -1,    -1,    -1,   820,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,  1977,    15,    16,
      -1,    -1,  3449,    20,    21,    22,    -1,    -1,   462,  1989,
      -1,    -1,    -1,  1977,    -1,    -1,    -1,    -1,    -1,   473,
      37,    -1,    -1,    -1,   297,  1989,    -1,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,  2019,
      -1,  2672,    -1,    -1,    -1,    -1,  2026,   881,    -1,    -1,
    2413,    -1,    -1,   400,    -1,  2019,  2419,    -1,    -1,    -1,
     514,  1256,  2026,    -1,    -1,    -1,    -1,  2430,  2431,  2432,
    2433,    -1,    -1,  2042,   528,    -1,    -1,    -1,    -1,   179,
    1920,  2444,    -1,  2446,    -1,    -1,    -1,  2450,  2068,    -1,
    2453,    -1,  2072,    -1,    -1,    -1,   196,    -1,  2078,    -1,
      -1,   201,    -1,    -1,  2068,   224,    -1,    -1,  2072,    -1,
      -1,    -1,    -1,    -1,  2078,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2102,    -1,   224,   225,    -1,    -1,  3064,    -1,
      -1,    -1,  2495,    -1,    -1,    -1,  2499,  1977,  2102,    -1,
     240,    -1,  2505,    -1,    -1,    -1,    -1,    -1,    -1,  1989,
      -1,    -1,  2783,    -1,  1256,    -1,  2519,  2520,    -1,  2522,
      -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,   522,   523,   524,   297,  2019,
     280,    -1,    -1,   283,    -1,    -1,  2026,    -1,  2551,    -1,
      -1,    -1,    -1,    -1,  2825,    -1,  1030,   297,    -1,    -1,
     300,    -1,  1036,    -1,  1038,    -1,  2569,   224,    -1,    -1,
      -1,    -1,    -1,  1047,  2577,  2578,  2579,    -1,    -1,    -1,
      -1,    -1,    -1,  1057,    -1,    -1,    -1,  2590,  2068,  2592,
    2593,    -1,  2072,    -1,    -1,    -1,  2599,    -1,  2078,    -1,
      -1,    -1,   515,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,  2619,    -1,    -1,    -1,
      -1,  2892,  2102,    -1,    -1,    -1,    -1,    -1,  1102,    -1,
      -1,  2634,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     297,    -1,    -1,  2646,    -1,  3221,    -1,  2650,    -1,    -1,
      -1,    -1,    -1,  1127,    -1,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2676,  2677,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2700,    -1,    -1,
      -1,    -1,    -1,    -1,  2707,    -1,  2977,    -1,    -1,    -1,
      -1,  2714,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1196,  1197,    -1,    -1,    -1,   467,    -1,  2732,
      -1,    -1,    -1,  2736,    -1,  2738,    -1,  2740,  2741,  2742,
    2743,    -1,  1577,    -1,  2747,  2748,  2749,    -1,  2751,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,  2772,
      -1,  2774,   512,    -1,    -1,   515,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,  2789,  2790,  2791,  2792,
    2793,  2794,  2795,  2796,  2797,  2798,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2419,    -1,    -1,    -1,  2434,    -1,    -1,    -1,    -1,    -1,
    2823,  3092,  2431,  2432,  2433,    -1,    -1,    -1,    -1,  2832,
    2434,    -1,    -1,    -1,    -1,  1577,    -1,  2446,  2841,    -1,
    1675,  2450,    -1,    -1,  2453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3127,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,  2871,    -1,
      -1,  2491,    -1,  3449,    -1,  2878,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2889,  2491,    -1,    -1,
    2499,    -1,  2895,    -1,    -1,    -1,    -1,    -1,    -1,  2902,
    2903,  2904,  2905,    -1,    -1,    -1,    -1,    -1,    -1,  1383,
    1384,    -1,  1386,  2916,    -1,    -1,  2919,  3188,    -1,    -1,
    2923,  2924,    -1,  3194,    -1,    -1,    -1,     8,    -1,  2932,
      11,    -1,    -1,  1675,    15,    16,    17,    18,    -1,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3222,  2955,    -1,  2434,    -1,    37,    -1,    -1,  2962,
    2963,    -1,    -1,    -1,    -1,    -1,    47,    -1,  2577,  2578,
    2579,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1817,    -1,    -1,    -1,    -1,  2607,    -1,    -1,
      -1,    -1,  2995,    -1,  2997,  3266,    -1,    -1,    -1,    -1,
      81,    -1,    -1,  2607,    -1,    -1,    -1,  3010,    -1,    -1,
      -1,  2491,    -1,    -1,  3017,  1489,    -1,    -1,    -1,  3022,
      -1,    -1,    -1,    -1,    -1,  3028,    -1,    -1,    -1,    -1,
      -1,  1505,    -1,    -1,  1508,    -1,    -1,    -1,    -1,  1513,
    3043,    -1,  1516,    -1,    -1,    -1,  3049,  1521,    -1,  1523,
      -1,  1525,  2672,    -1,    -1,    -1,    -1,    -1,    -1,  3062,
    3063,  3064,    -1,    -1,    -1,    -1,    -1,  3070,  2672,    -1,
      -1,    -1,    -1,    -1,    -1,  1817,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3087,  1920,    -1,    -1,   169,    -1,
      -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3380,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,  2732,    -1,    -1,    -1,  2607,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1977,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1989,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,  2783,    -1,    -1,  3169,    -1,    -1,    -1,
    3173,    -1,    -1,  1647,    -1,    -1,    -1,    -1,  1920,  2783,
      -1,  3184,    -1,    -1,  2019,    -1,    -1,    -1,    -1,    -1,
      -1,  2026,  2672,    -1,    27,    -1,    -1,    -1,    -1,   280,
      33,    -1,   283,    -1,    -1,  2825,    -1,    -1,    41,    -1,
      -1,    -1,    -1,  3216,    -1,    -1,   297,    -1,  3221,   300,
      -1,  2825,    -1,  2832,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,  2068,    -1,  1977,    -1,  2072,    -1,    -1,
      -1,    -1,    -1,  2078,  3247,    -1,    -1,  1989,    -1,    -1,
      -1,  3254,    -1,    -1,    -1,    -1,    -1,    -1,  3261,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2102,    -1,    -1,
      -1,    -1,  2892,    -1,   107,  3278,    -1,  2019,    -1,    -1,
      -1,    -1,    -1,    -1,  2026,    -1,    -1,    -1,  2892,    -1,
      -1,    -1,    -1,  2902,  2903,  2904,  2905,    -1,  3301,    -1,
      -1,    -1,    -1,  2783,    -1,   138,  3309,  3310,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,
    1794,    -1,    -1,    -1,    -1,    -1,  2068,    -1,  3331,    -1,
    2072,    -1,    -1,  3336,    -1,    -1,  2078,    -1,  1812,    -1,
      -1,    -1,    -1,    -1,    -1,  2825,    -1,    -1,     3,  1823,
       5,  1825,    -1,    -1,  1828,     8,    -1,  2977,    11,  3362,
    2102,    -1,    15,    16,  1838,    -1,  1840,    20,    21,    22,
      -1,   204,    -1,  2977,    -1,    -1,    -1,    -1,    -1,  1853,
    3383,  3384,    -1,    -1,  1858,    -1,    -1,    -1,  1862,  1863,
      -1,  1865,  3663,  1867,  1868,    -1,    -1,    -1,  3401,    -1,
    3403,    -1,    -1,  3406,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2892,    -1,    69,    70,    -1,    -1,    -1,    -1,
      -1,    -1,   255,    -1,  3427,    -1,    -1,  3430,    -1,    -1,
      -1,   512,    -1,   266,   515,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,   278,  3449,    -1,  3451,    -1,
    3453,  3454,    -1,  3456,    -1,   110,   111,    -1,  3461,   114,
     115,  3070,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,
      -1,    -1,  3092,    -1,    -1,    -1,    -1,   310,    -1,    -1,
    3483,    -1,    -1,    -1,  3487,    -1,    -1,    -1,  3092,    -1,
      -1,    -1,    -1,    -1,    -1,  3498,    -1,  2977,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,  3127,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,    -1,  3127,    -1,  3528,   359,    -1,    -1,    -1,
     363,    -1,   365,    -1,    -1,    37,   191,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,  2028,    -1,    -1,   390,    -1,    -1,
      -1,    -1,   395,    -1,  3567,    -1,    -1,    -1,  3188,    -1,
      -1,   224,  3575,    -1,  3194,    -1,    -1,    -1,   411,    81,
    2054,    -1,    -1,    -1,  3188,    -1,  2060,  3590,    -1,    -1,
    3194,  2065,    -1,   856,   857,    -1,    -1,  2071,    -1,  2434,
      -1,    -1,  3222,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,  3092,   268,   269,    -1,    -1,  3620,  3222,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3632,
    3633,    -1,  3635,  3636,    -1,    -1,    -1,   470,    -1,    -1,
      -1,  3644,    -1,    -1,   297,    -1,  3266,  3127,    -1,    -1,
      -1,    -1,  3655,    -1,    -1,    -1,  2491,    -1,    -1,    -1,
      -1,    -1,  3266,    -1,    -1,    -1,    -1,    -1,    -1,   932,
      -1,    -1,    -1,   936,   937,    -1,    -1,   179,  3681,    -1,
      -1,  2155,    -1,    -1,    -1,  3688,  2160,    -1,   343,   344,
      -1,  2165,  2434,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3188,    -1,
      -1,    -1,    -1,    -1,  3194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,   989,    -1,    -1,   384,
     385,  3734,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,  3222,    -1,  1007,    -1,  3749,    -1,    -1,  2491,
    1013,  3754,    -1,  1016,  3757,    -1,  1019,  1020,  1021,  1022,
    3380,    -1,    -1,    -1,    -1,    -1,    -1,  2241,    -1,    -1,
      -1,    -1,  2607,    -1,    -1,    -1,  3380,    -1,   280,  2253,
      -1,   283,    -1,  2257,    -1,    -1,  3266,  2261,    -1,    -1,
      -1,    -1,  3401,    -1,    -1,   297,    -1,    -1,   300,    -1,
      -1,  1064,  1065,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3427,    -1,
      -1,    -1,    -1,  1086,    -1,    -1,    -1,    -1,    -1,   484,
     485,    -1,  2306,    -1,    -1,    -1,    -1,  2672,  2312,    -1,
      -1,    -1,    -1,  1106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,  1118,  1119,  1120,    -1,  1122,
    1123,    -1,   515,   516,   517,  2607,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3498,
      -1,    -1,    -1,    -1,    -1,  1158,    -1,    -1,   400,    -1,
    3380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1176,  1177,    -1,    -1,    -1,    -1,  3528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2672,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2783,    -1,
      -1,    -1,  1215,    -1,    -1,    -1,  1219,  1220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,  1231,    -1,
    2444,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    2825,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,    -1,    47,  1292,
     532,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
    1303,  2783,    -1,  3663,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2892,    -1,  3663,
      -1,    -1,    81,    -1,    -1,  1328,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,  2825,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    37,    15,    16,    -1,    41,    -1,    20,    21,    22,
      -1,    47,    -1,    -1,    -1,    -1,  2590,    -1,    54,  2593,
       8,    -1,    -1,    11,    37,  2599,    -1,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2977,    -1,    -1,    81,    -1,    -1,    -1,    37,
    2892,    -1,    -1,  1416,    -1,    -1,    -1,    -1,    -1,    47,
     179,     8,    -1,    -1,    11,    -1,    54,    -1,    15,    16,
      17,    18,  2646,    20,    21,    22,  2650,   196,    -1,    -1,
      -1,    -1,   201,  3663,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,    -1,    -1,   224,   225,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1479,    -1,  1481,  1482,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1494,  1495,    -1,    81,  2977,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1515,    -1,    -1,    -1,    -1,  3092,    -1,    -1,
     196,   280,  2736,    -1,   283,   201,  2740,  2741,    -1,  2743,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,
      -1,   179,  3127,    -1,    -1,    -1,    -1,    -1,  2772,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   196,    -1,
      -1,   224,    -1,   201,    -1,  2789,  2790,  2791,  2792,    -1,
    2794,  2795,  2796,  2797,  2798,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,   196,
    3092,    -1,   240,  3188,   201,    -1,  1619,    -1,    -1,  3194,
      -1,   297,    -1,    -1,   300,  1628,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,  1642,
      -1,   400,    -1,    -1,   297,  3127,    -1,  3222,    -1,    -1,
      -1,    -1,   280,   240,    -1,   283,    -1,    -1,    -1,  1662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1670,    -1,   297,
      -1,    -1,   300,  1676,  1677,  1678,  1679,  1680,  1681,  1682,
    1683,  2895,    -1,    -1,    -1,  1688,  1689,    -1,    -1,    -1,
    1693,  3266,    -1,   280,  1697,    -1,   283,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,  1708,  3188,    -1,  1711,  2923,
     297,    -1,  3194,   300,    -1,  1718,    -1,  1720,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1738,    -1,    -1,    -1,    -1,
    3222,  2955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2963,
      -1,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,  1778,  1779,    -1,    -1,    -1,
      -1,    -1,    -1,  2997,  3266,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,  3380,    -1,    -1,    -1,    41,
      -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,  3063,
      -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,  1875,    -1,    -1,   107,    -1,    -1,    -1,  1882,
      -1,    -1,  1885,  1886,   512,    -1,    -1,   515,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,  3380,    -1,
      -1,   529,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,   529,    -1,    23,    -1,    -1,    -1,    -1,  1952,
    1953,    -1,    -1,    -1,    33,    -1,    35,    36,    -1,    -1,
    1963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,   204,    -1,    53,    -1,    -1,    -1,  1981,  1982,
      -1,  1984,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    87,    -1,
    2013,  2014,    -1,    -1,  2017,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,   255,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,   112,   266,    -1,    15,    16,    17,    18,
    3254,    20,    21,    22,    -1,  2048,   278,  3261,   127,   128,
     129,    -1,    -1,  2056,    -1,    -1,    -1,    -1,    37,   138,
      -1,    -1,    -1,    -1,    -1,   144,    -1,   299,    47,    -1,
      -1,  2074,    -1,  2076,   153,    54,   155,   156,   310,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3663,    -1,
      -1,   170,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2115,    -1,    -1,    -1,    -1,  3331,  2121,    -1,
      -1,   200,  3336,    -1,    -1,    -1,    -1,   359,    -1,    -1,
      -1,   363,    -1,   365,    -1,    -1,    -1,   216,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3362,    -1,
      -1,  2154,    -1,    -1,  1017,  2158,    -1,    -1,   390,    -1,
    2163,  2164,    -1,   395,   243,    -1,    -1,    -1,    -1,  3383,
    3384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,
      -1,  3663,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,  2210,    -1,    -1,
    2213,    -1,  2215,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,  2231,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,  3453,
      -1,    -1,   321,   322,   323,   224,   225,  3461,    -1,    -1,
     329,    -1,    -1,   332,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1143,    -1,    -1,    -1,   363,    -1,    -1,    -1,    -1,  2292,
    2293,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   280,    -1,    -1,   283,    -1,    -1,    -1,  2311,   388,
      -1,    69,    70,    -1,    -1,    -1,   395,    -1,   297,  2322,
     399,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1192,
      -1,    -1,   411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,   427,    -1,
      -1,    -1,   110,   111,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,  1229,    11,    -1,   448,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    -1,    -1,   462,    -1,    -1,   465,  2390,    -1,   468,
      -1,    -1,    -1,    37,   473,    -1,  2399,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,   490,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,   400,    -1,  1286,    15,    16,    17,    18,    -1,    20,
      21,    22,    -1,   191,   192,   514,    -1,    81,    -1,    -1,
      -1,  3655,    -1,    -1,    -1,    -1,    37,    -1,    -1,   528,
      -1,    -1,   531,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1334,    -1,    -1,    -1,    -1,  1339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,  2494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,    -1,
     268,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1390,    -1,    -1,
      -1,    -1,    -1,   512,    -1,   179,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
     529,  1414,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   343,   344,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,  1462,
      -1,  1464,    -1,  1466,  1467,   196,  1469,    -1,    -1,  1472,
     201,    -1,  1475,    -1,    -1,  1478,    -1,    -1,    -1,    -1,
    1483,  2624,    -1,  1486,    -1,    -1,   384,   385,  2631,  2632,
      -1,    -1,    -1,   224,   225,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,  2647,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   297,    -1,    -1,   300,  2660,    -1,    -1,
    2663,    -1,  2665,    -1,    -1,  1528,    -1,    -1,    -1,    -1,
    2673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2681,  2682,
      -1,    -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,   280,
      -1,    -1,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2705,    -1,    -1,    -1,   297,    -1,    -1,   300,
      -1,    -1,    -1,  2716,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   484,   485,    -1,     8,
      -1,    -1,    11,    -1,    -1,  2738,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     508,   509,  1615,    -1,    -1,    -1,   400,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,  1632,
     528,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
    1643,  1644,  1645,    -1,    -1,  2788,    -1,  1650,    -1,    -1,
      -1,  1654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2802,
    2803,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,   400,
      -1,    -1,  2815,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1717,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2868,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1761,    -1,
     179,    -1,    -1,    -1,    -1,    -1,  2909,  2910,    -1,  2912,
      -1,    -1,    -1,    -1,  1777,    -1,    -1,   196,    -1,  1782,
      -1,   512,   201,    -1,   515,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,  1799,    -1,   529,    -1,
      -1,    -1,    -1,  2946,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,  2966,    -1,    -1,    -1,    -1,  2971,  2972,
      -1,    -1,    -1,  2976,    -1,    -1,    -1,    -1,  2981,    -1,
      -1,  2984,  2985,    -1,    -1,    -1,  2989,  2990,    -1,    -1,
    2993,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   280,    -1,     8,   283,    -1,    11,  3010,    -1,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,   297,    -1,
      -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,  3056,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,
    3083,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1979,    -1,    -1,    -1,
      -1,   400,    -1,    -1,  1987,  1988,    -1,  1990,  1991,  1992,
    1993,  1994,  1995,    -1,    -1,  1998,  1999,  2000,  2001,  2002,
    2003,  2004,  2005,  2006,  2007,  2008,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    70,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
       8,  3204,  3205,    11,  3207,    -1,    -1,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    37,
     114,   115,    -1,   512,  3237,   240,   515,   516,   517,    47,
     519,   520,   521,   522,   523,   524,    54,    -1,    -1,    -1,
     529,    -1,    -1,    -1,    -1,  2118,    -1,    -1,    -1,  2122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3272,
      -1,    -1,    -1,    81,    -1,   280,    -1,    -1,   283,    -1,
      -1,    -1,    -1,    -1,    -1,  3288,  3289,    -1,    -1,  3292,
    2153,  3294,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2167,    -1,    -1,   191,   192,  2172,
      -1,    -1,    -1,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2183,    -1,    -1,    -1,  3327,    -1,  2189,  2190,    -1,  2192,
    2193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2206,    -1,    -1,  2209,    -1,  3351,    -1,
      -1,    -1,    -1,    -1,  2217,  2218,  2219,  2220,  2221,  2222,
    2223,  2224,  2225,  2226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   179,    -1,    -1,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,    -1,   268,   269,    -1,    -1,   196,  2252,
      -1,    -1,    -1,   201,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3443,    -1,    -1,    -1,  3447,    -1,  2309,    -1,  3451,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   343,
     344,    -1,  3465,    -1,    -1,    -1,    -1,  3470,  3471,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
    3483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,
      -1,    -1,   300,    -1,    -1,    25,    -1,    -1,    -1,    -1,
     384,   385,  3505,    -1,    -1,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,   529,    -1,    -1,    -1,  2391,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,  2402,
    2403,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
    3553,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3563,    -1,    -1,    37,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,  3575,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3592,
      -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     484,   485,    -1,    -1,    -1,    -1,    -1,    81,  3611,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,
      -1,    -1,    -1,    -1,   508,   509,    -1,    -1,   158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   171,    -1,    -1,    -1,  2508,   176,    -1,    -1,    -1,
    2513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2526,  2527,  2528,    -1,    -1,  2531,  2532,
    2533,  2534,  2535,  2536,    -1,   205,    -1,  2540,  2541,  2542,
    2543,  2544,  2545,  2546,  2547,  2548,  2549,    -1,    -1,    -1,
      -1,  2554,  2555,    -1,    -1,    -1,    -1,    -1,    -1,  3702,
    3703,  3704,    -1,    -1,   512,   179,    -1,   515,   516,   517,
    3713,   519,   520,   521,   522,   523,   524,  2580,    -1,   249,
      -1,   529,   196,    -1,   254,    -1,  2589,   201,    -1,     8,
      -1,    -1,    11,    -1,    -1,  3738,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
    2623,    -1,    -1,    -1,    -1,    -1,   240,  2630,    47,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,  2642,
      -1,    -1,    -1,    -1,    -1,  2648,    -1,    -1,    -1,    -1,
    2653,  2654,    -1,    -1,  3797,    -1,   326,    -1,  2661,  2662,
      -1,    -1,    81,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,   341,  2675,  2676,  2677,  2678,    -1,  2680,    -1,    -1,
      -1,  2684,    -1,   297,    -1,    -1,   300,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   376,    -1,    -1,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,    -1,    -1,   393,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,  2744,    -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,   427,    -1,    -1,
     179,    -1,    -1,    47,    -1,   435,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,   445,    -1,   196,    -1,    -1,
      -1,   451,   201,    -1,    -1,    -1,   400,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,   240,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
      -1,   280,    -1,  2866,   283,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,
      -1,   300,    -1,    -1,    -1,    -1,  2889,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,   179,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,   196,    -1,    -1,   529,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,  2947,    -1,  2949,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2958,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2970,    -1,    -1,
    2973,    -1,  2975,    -1,    -1,    -1,  2979,    -1,    -1,  2982,
    2983,   400,    -1,  2986,  2987,    -1,    -1,    -1,    -1,    -1,
     179,  2994,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,    -1,    -1,  3009,   196,    -1,    -1,
      -1,    -1,   201,   297,    -1,    -1,   300,    -1,    -1,    -1,
      -1,    -1,  3025,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3064,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   280,    -1,   512,   283,    -1,   515,   516,   517,    82,
     519,   520,   521,   522,   523,   524,    -1,    -1,   297,    -1,
     529,   300,    -1,    -1,    -1,    98,   400,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,   148,    -1,  3170,    54,    -1,
      -1,    -1,    -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,    -1,   176,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3212,
      -1,   400,    -1,    -1,    -1,    -1,    -1,  3220,  3221,    -1,
      -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,  3245,  3246,    -1,   529,  3249,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   249,  3270,    -1,    -1,
      -1,   254,    -1,    -1,    -1,    -1,  3279,    -1,    -1,  3282,
    3283,  3284,    -1,    -1,  3287,    -1,    -1,  3290,  3291,    -1,
      -1,    -1,    -1,   179,    -1,    -1,  3299,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,   320,   224,   225,
     529,    -1,    -1,   326,    -1,  3348,    -1,    -1,    -1,    -1,
      -1,  3354,    -1,    -1,   240,    -1,    -1,    -1,   341,    -1,
      -1,    -1,    -1,    -1,  3367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   280,    -1,   379,   283,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
     393,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,  3422,
    3423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3431,    -1,
     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,    -1,    -1,    -1,    -1,
      -1,   434,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   445,    -1,  3467,  3468,  3469,    -1,   451,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3494,    -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,
      -1,    -1,    -1,  3506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3568,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3578,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3606,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,  3631,   515,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3658,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3678,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,  3741,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,  3752,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,   514,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,   529,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,   514,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,   514,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,   529,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,    -1,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,   462,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,   529,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,    -1,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      39,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,   529,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,   487,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,    -1,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,    -1,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,   461,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,   521,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,    -1,   526,    -1,   528,    -1,    -1,    -1,    -1,
     533,   534,   535,   536,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,    -1,    -1,    -1,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,    -1,    -1,    -1,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,    -1,    -1,    -1,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,   526,
      -1,   528,    -1,    -1,    -1,    -1,   533,   534,   535,   536,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,   526,    -1,   528,    -1,    -1,    -1,    -1,
     533,   534,   535,   536,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,   526,    -1,   528,
      -1,    -1,    -1,    -1,   533,   534,   535,   536,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,    -1,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,     3,    -1,   519,   520,   521,    -1,    -1,    10,
      -1,   526,    -1,   528,    -1,    -1,    -1,    -1,   533,   534,
     535,   536,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,
      -1,    -1,     9,    10,    -1,   526,    -1,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,   536,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,
      -1,    48,    49,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,   534,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,   167,   168,   169,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,   456,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   529,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
      -1,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528,   529,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    56,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
      77,    78,    79,    -1,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,   115,    -1,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,   159,   160,    -1,    -1,   163,    -1,   165,   166,
      -1,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,    -1,    -1,    -1,    -1,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    -1,   274,    -1,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,    -1,    -1,
     287,    -1,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,    -1,    -1,    -1,    -1,   442,   443,    -1,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,    -1,    -1,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,   529,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    -1,
      -1,    74,    -1,    76,    77,    78,    79,    -1,    -1,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,   115,    -1,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,   168,    -1,   170,    -1,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
      -1,    -1,    -1,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,    -1,
     213,   214,   215,   216,   217,    -1,    -1,    -1,    -1,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
      -1,   274,    -1,   276,   277,   278,    -1,    -1,   281,   282,
     283,   284,    -1,    -1,   287,    -1,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,    -1,   328,   329,   330,    -1,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
      -1,    -1,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,    -1,    -1,    -1,    -1,   442,
     443,    -1,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,   461,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
      -1,    -1,   475,    -1,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,   529,    32,    33,    34,
      35,    36,    -1,    38,    -1,    -1,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,     3,   514,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,   296,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,     3,   514,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
     235,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,   296,   297,   298,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
     296,   297,   298,   299,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,   429,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,   478,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,    -1,   121,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,    -1,    -1,   297,
     298,   299,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,    -1,   477,
     478,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     528,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,     3,   514,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,     3,   514,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,   174,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,   462,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,     3,   514,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
      -1,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,
      -1,    48,    49,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,
      48,    49,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,    -1,   121,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,    -1,    -1,   297,
     298,   299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,    -1,
     428,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,    -1,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     528,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    15,    16,    -1,    -1,   528,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,    -1,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,    -1,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,
     510,   511,    -1,     3,    -1,   515,   516,   517,     8,   519,
     520,   521,   522,   523,   524,    15,    16,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,   515,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    37,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    37,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    47,    -1,    -1,    15,    16,    17,    18,    54,
      20,    21,    22,    -1,    -1,    -1,     8,    -1,    81,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    37,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    81,    47,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    37,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    47,    -1,    -1,    15,    16,
      17,    18,    54,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      47,    -1,    -1,     8,    -1,    -1,    11,    54,    -1,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    47,   196,   179,    -1,    -1,    -1,   201,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    81,    -1,    -1,   179,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,   196,   179,    -1,    -1,
      -1,   201,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,   224,   225,    -1,   280,    -1,    -1,
     283,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,   224,   225,   297,   280,    -1,   300,   283,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,   224,   225,    -1,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,   240,    -1,    -1,   201,   297,   280,    -1,
     300,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,   300,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   280,    -1,   240,   283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,
     297,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,   280,    11,    -1,   283,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      -1,    -1,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,
     400,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,   400,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,   529,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,   529,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,   529,
     512,    -1,    -1,   515,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,   179,    -1,    -1,   529,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,   512,   201,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   224,
     225,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,   512,    -1,    -1,
     515,   516,   517,    37,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   297,    -1,    -1,   300,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      82,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,   461,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
      -1,    -1,     8,    -1,    -1,    11,    -1,   519,   520,    15,
      16,    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    37,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,    37,
      -1,    -1,    -1,    41,    -1,     8,    -1,    -1,    11,    47,
      -1,    -1,    15,    16,    17,    18,    54,    20,    21,    22,
      -1,    -1,    -1,     8,    -1,    81,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    37,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    81,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    37,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    -1,    20,
      21,    22,   168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
     196,   179,    -1,    54,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,   224,   225,
      81,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,   196,   179,    -1,    -1,    -1,   201,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,   224,   225,    -1,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,   224,
     225,   297,   280,    -1,   300,   283,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   297,
      -1,    -1,   300,   174,    -1,    -1,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,   330,    -1,    -1,   280,    -1,    -1,
     283,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,   297,   280,    -1,   300,   283,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   297,   224,   225,   300,    -1,    -1,    -1,    -1,
      -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,    -1,   280,
       8,    -1,   283,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    -1,    20,    21,    22,    -1,   297,    -1,    -1,   300,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    47,
      -1,    -1,    -1,    -1,    -1,   400,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   400,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,   179,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    -1,    20,    21,    22,    -1,   196,    -1,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    -1,    -1,    -1,   224,   225,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   240,    -1,   515,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    81,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   280,    -1,    -1,   283,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,   297,
      -1,    -1,   300,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,   179,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     196,    15,    16,    17,    18,   201,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,   224,   225,
      -1,    -1,   400,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,   280,    -1,     8,   283,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,   297,    -1,    -1,   300,   224,   225,    -1,    -1,    -1,
      -1,    -1,   179,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    47,    -1,    -1,    -1,   196,
      -1,    -1,    54,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,   224,   225,    81,
      -1,   280,    -1,    -1,   283,   179,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,   297,    -1,
      -1,   300,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,   280,    -1,    -1,   283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     297,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,   400,    -1,   297,    -1,    -1,   300,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,   240,   515,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    -1,    20,    21,    22,    -1,    -1,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   436,
      37,    -1,    -1,    -1,    -1,   297,    -1,    -1,   300,    -1,
      47,    -1,    -1,    -1,    -1,    -1,   400,    54,    -1,    -1,
      -1,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    -1,    20,    21,    22,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    37,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,     8,    -1,    -1,    11,    -1,    54,   196,
      15,    16,    -1,    -1,   201,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    81,    -1,   224,   225,    -1,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,     8,    -1,   240,    11,    -1,    -1,    -1,    15,    16,
      -1,    -1,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    81,   519,   520,   521,
     522,   523,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    -1,    -1,   280,    -1,    -1,   283,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     297,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,   240,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   280,   240,    -1,   283,    -1,   196,
      -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,   297,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   283,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,    -1,    -1,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    -1,    38,    -1,
      -1,    -1,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,   461,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,   478,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      82,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,   478,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    -1,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,   171,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,   171,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    -1,    -1,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,    -1,
     155,   156,   157,   158,   159,   160,    -1,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,   182,    -1,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,    -1,   281,   282,   283,   284,
      -1,    -1,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,    -1,    -1,    -1,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,    -1,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,    -1,   474,
     475,    -1,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    35,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,   296,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,   296,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
     296,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    -1,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,   159,   160,    -1,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,    -1,    -1,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,    -1,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,    -1,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,    -1,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    -1,    -1,    82,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,   173,
      -1,   175,   176,   177,    -1,   179,   180,   181,   182,    -1,
      -1,    -1,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,    -1,   281,   282,   283,
     284,    -1,    -1,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,    -1,   328,   329,   330,    -1,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
      -1,   425,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
      -1,   445,    -1,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,    -1,
     474,   475,    -1,   477,   478,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
      -1,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,
      -1,    48,    49,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,
      48,    49,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,    -1,   121,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,    -1,    -1,   297,
     298,   299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,    -1,
     428,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,    -1,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
      -1,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,
      -1,    48,    49,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,
      48,    49,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,    -1,   121,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,    -1,    -1,   297,
     298,   299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,    -1,
     428,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,    -1,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    -1,    -1,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,    -1,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,   304,    -1,   306,    -1,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,    -1,   477,    -1,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,   121,
     122,   123,   124,   125,   126,    -1,    -1,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,   167,   168,    -1,   170,    -1,
     172,    -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,   290,   291,
      -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,
     302,   303,   304,    -1,   306,    -1,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,
     432,   433,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,    -1,   477,    -1,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    -1,    48,    49,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,    -1,   121,   122,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,   167,   168,    -1,   170,    -1,   172,    -1,
      -1,    -1,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
     284,    -1,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,
     304,    -1,   306,    -1,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,   430,   431,   432,   433,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    -1,    48,    49,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    -1,    -1,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,   121,   122,   123,   124,
     125,   126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,
      -1,   176,   177,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,    -1,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
      -1,   286,   287,   288,   289,   290,   291,    -1,   293,   294,
      -1,    -1,   297,   298,   299,    -1,    -1,   302,   303,   304,
      -1,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,   430,   431,   432,   433,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,    -1,   477,    -1,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    49,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,    -1,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,   167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,
     176,   177,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,    -1,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,   284,    -1,
     286,   287,   288,   289,   290,   291,    -1,   293,   294,    -1,
      -1,   297,   298,   299,    -1,    -1,   302,   303,   304,    -1,
     306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,    -1,   428,    -1,   430,   431,   432,   433,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
      -1,   477,    -1,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    -1,
      -1,    48,    49,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    -1,    -1,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,    -1,   286,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,   304,    -1,   306,
      -1,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
      -1,   428,    -1,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,    -1,
     477,    -1,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,
      48,    49,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,    -1,   121,   122,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,    -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,    -1,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,    -1,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,    -1,    -1,   297,
     298,   299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,    -1,
     428,    -1,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,    -1,   477,
      -1,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      49,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      -1,    -1,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,   121,   122,   123,   124,   125,   126,    -1,    -1,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
      -1,   170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,   284,    -1,   286,   287,   288,
     289,   290,   291,    -1,   293,   294,    -1,    -1,   297,   298,
     299,    -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,    -1,   428,
      -1,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    49,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,    -1,
     170,    -1,   172,    -1,    -1,    -1,   176,   177,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,    -1,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,   284,    -1,   286,   287,   288,   289,
     290,   291,    -1,   293,   294,    -1,    -1,   297,   298,   299,
      -1,    -1,   302,   303,   304,    -1,   306,    -1,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,    -1,   428,    -1,
     430,   431,   432,   433,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,    -1,   477,    -1,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    -1,
      -1,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
     121,   122,   123,   124,   125,   126,    -1,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,    -1,   150,
     151,   152,   153,    -1,   155,   156,   157,   158,   159,   160,
      -1,    -1,   163,    -1,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,   182,    -1,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,    -1,
     281,   282,   283,   284,    -1,    -1,   287,   288,   289,   290,
     291,    -1,   293,   294,    -1,    -1,   297,   298,   299,    -1,
      -1,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,    -1,   328,   329,   330,
      -1,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,    -1,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,    -1,    -1,    -1,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,   443,    -1,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,   459,   460,
     461,    -1,   463,   464,   465,   466,    -1,   468,   469,   470,
     471,   472,    -1,   474,   475,    -1,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,   493,   494,   495,   496,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    -1,    -1,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,   121,   122,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,   148,    -1,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,   159,   160,    -1,    -1,   163,    -1,   165,   166,
     167,   168,    -1,   170,    -1,   172,   173,    -1,   175,   176,
     177,    -1,   179,   180,   181,   182,    -1,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,    -1,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,    -1,    -1,
     287,   288,   289,   290,   291,    -1,   293,   294,    -1,    -1,
     297,   298,   299,    -1,    -1,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,    -1,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,    -1,   421,    -1,    -1,    -1,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,   443,    -1,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,   459,   460,   461,    -1,   463,   464,   465,   466,
      -1,   468,   469,   470,   471,   472,    -1,   474,   475,    -1,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,   494,   495,   496,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    49,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    -1,    -1,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,   121,   122,
     123,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,   177,   178,    -1,   180,   181,   182,
      -1,   184,   185,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,    -1,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,    -1,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,    -1,    -1,   297,   298,   299,    -1,    -1,   302,
     303,   304,    -1,   306,    -1,   308,   309,   310,   311,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,    -1,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,    -1,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,    -1,   477,    -1,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    35,    36,    -1,    -1,    -1,    -1,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    76,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,    -1,
      -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   127,   128,    -1,   112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,
     144,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,   153,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,   144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   170,   153,    -1,    -1,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,   332,    -1,
      -1,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,    -1,
      -1,    -1,    -1,   329,    -1,    -1,   332,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,    -1,    -1,
      -1,    -1,    -1,    -1,   388,    -1,   372,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,   388,    -1,    -1,    -1,    -1,   411,    -1,   395,
      -1,    -1,    -1,   399,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,   427,    -1,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,   427,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,
      -1,    -1,   448,    -1,   468,    -1,    -1,    -1,    -1,   473,
      -1,    -1,    -1,    -1,   478,    -1,   462,    -1,    -1,    -1,
      -1,    -1,   468,    -1,    -1,    -1,   490,   473,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   490,    -1,    -1,    -1,    -1,    -1,
     514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,   514,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    23,    33,    35,    36,    48,    53,    62,    76,    85,
      87,    99,   101,   112,   127,   128,   129,   138,   144,   153,
     155,   156,   170,   174,   200,   243,   321,   322,   323,   329,
     332,   363,   372,   388,   395,   399,   411,   423,   427,   448,
     462,   465,   468,   473,   490,   514,   528,   539,   540,   541,
     542,   543,   544,   551,   566,   567,   568,   575,   576,   578,
     589,   602,   652,   662,   673,   676,   683,   685,   689,   690,
     694,   700,   702,   706,   713,   717,   718,   719,   726,   731,
     747,   748,   751,   762,   763,   766,   768,   769,   770,   771,
     773,   775,   776,   780,   840,   841,  1021,  1024,  1025,  1026,
    1027,  1032,  1035,  1041,  1042,  1043,  1046,   442,   493,  1022,
     109,   205,   379,   390,   427,   480,   109,   194,   300,   569,
    1022,     3,    23,    24,    25,    26,    27,    28,    29,    30,
      32,    33,    34,    43,    44,    45,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    61,    62,
      63,    64,    65,    68,    69,    70,    71,    72,    73,    74,
      76,    77,    78,    79,    80,    82,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    95,    96,    97,    98,
      99,   100,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   119,   121,
     122,   123,   124,   125,   126,   129,   130,   131,   132,   135,
     136,   137,   138,   139,   141,   142,   143,   145,   146,   147,
     148,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   163,   165,   166,   167,   168,   170,   172,
     173,   175,   176,   177,   178,   179,   180,   181,   182,   184,
     185,   186,   187,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   202,   203,   204,   205,   206,
     207,   208,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   221,   223,   224,   225,   226,   227,   228,   229,
     230,   232,   233,   234,   237,   238,   239,   240,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   281,   282,   283,   284,
     286,   287,   288,   289,   290,   291,   293,   294,   297,   298,
     299,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     336,   337,   338,   339,   340,   341,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   400,   401,
     402,   403,   404,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     425,   426,   428,   429,   430,   431,   432,   433,   434,   435,
     437,   438,   439,   442,   443,   444,   445,   446,   448,   449,
     450,   451,   452,   453,   454,   455,   458,   459,   460,   463,
     464,   465,   466,   468,   469,   470,   471,   472,   473,   474,
     475,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     488,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   582,   655,   656,   657,   922,  1010,  1014,     3,
     178,   250,   420,   577,   582,   655,   295,  1022,    56,   174,
     528,   599,   180,   244,   300,   320,   379,   432,   434,   457,
     460,   650,   678,   725,     5,    31,   332,   582,   583,  1009,
       3,    31,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    46,    47,    50,    54,    55,    56,    57,    58,    59,
      60,    66,    67,    72,    73,    75,    80,    81,    82,    83,
      84,    90,    94,   101,   102,   109,   113,   116,   118,   120,
     127,   128,   133,   134,   140,   144,   149,   154,   161,   162,
     164,   167,   169,   171,   173,   174,   175,   178,   179,   183,
     184,   185,   188,   196,   201,   209,   211,   212,   218,   219,
     220,   221,   222,   224,   225,   227,   231,   235,   236,   238,
     240,   241,   250,   273,   274,   275,   279,   280,   283,   285,
     286,   288,   292,   295,   296,   300,   301,   304,   305,   307,
     308,   321,   322,   323,   324,   327,   328,   331,   335,   342,
     348,   353,   367,   370,   374,   388,   389,   396,   399,   400,
     403,   405,   420,   422,   423,   424,   427,   429,   436,   438,
     439,   440,   441,   444,   446,   447,   450,   456,   457,   461,
     462,   467,   473,   474,   476,   478,   486,   487,   489,   490,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   588,   655,   659,   661,    25,    82,    98,   148,   158,
     171,   176,   205,   249,   254,   326,   341,   376,   379,   390,
     393,   413,   427,   434,   435,   445,   451,   480,   678,   695,
     696,   699,  1022,  1009,    33,   101,   138,   478,   528,   543,
     544,   551,   575,   576,   589,   602,   652,   662,   673,   683,
     685,   689,   690,   694,   702,   709,   713,   719,   726,   747,
     751,   762,   763,   766,   768,  1021,  1024,  1025,  1027,  1032,
    1035,  1041,  1046,   109,    76,    67,    80,    82,   161,   235,
     286,   296,   308,   327,   375,   422,   444,   446,   450,   473,
     528,   581,   582,   583,   769,   841,   843,   845,   846,   856,
     863,   864,   922,   924,   925,   109,     5,   582,   584,   749,
     582,  1009,    31,   180,   244,   394,   438,   442,   475,   582,
    1033,  1034,  1045,  1022,    31,   133,   792,   793,   180,   244,
     379,   394,   438,   475,  1036,  1037,  1045,  1022,   581,   582,
     583,   768,   780,   863,   427,   789,   581,   175,   528,  1029,
     528,   351,   781,   782,  1009,   781,   769,   770,  1041,     0,
     531,   478,   707,   123,   215,   256,   464,   216,   149,   220,
     301,   456,   795,   796,   846,   846,   769,   771,   773,   532,
      31,   428,   438,   442,   581,   768,   194,   582,   194,   581,
    1009,   194,   581,   194,   863,   194,   581,   280,   361,   584,
     347,  1023,   526,   530,   585,   586,   528,    83,   109,   176,
     205,   249,   379,   390,   427,   451,   480,   580,   109,   768,
     581,   432,   434,   432,   434,   361,   194,   581,   176,   249,
     351,   390,   427,   451,   480,   669,   386,   205,    31,  1009,
     194,   588,   257,   445,   108,   427,   427,   480,   383,   386,
     194,   582,   697,  1016,   194,  1006,  1009,   194,  1009,   528,
     705,   300,   434,   709,     3,   473,   655,   659,   710,   712,
     713,   715,   716,   707,   582,   584,   577,   528,   528,   169,
     528,   769,   864,   528,   528,   581,   528,   528,   174,   528,
     528,   528,   528,   769,   841,   846,   856,   521,   585,    19,
      41,   582,   857,   858,   857,   388,   532,   772,   528,   769,
     863,   864,    38,    43,   102,   175,   211,   227,   238,   274,
     321,   328,   370,   389,   462,   860,   858,    41,   582,   857,
     859,   514,   868,   584,   517,   528,   528,   764,  1034,  1034,
    1034,   511,   226,  1034,   530,   295,     4,     6,     7,     8,
       9,    10,    40,    55,    57,    58,    66,    72,    73,    84,
     113,   116,   118,   137,   154,   162,   167,   184,   185,   218,
     219,   221,   231,   250,   273,   275,   280,   285,   288,   297,
     348,   374,   403,   438,   439,   447,   461,   474,   512,   519,
     520,   521,   526,   528,   533,   534,   535,   536,   582,   584,
     769,   830,   880,   883,   886,   887,   888,   890,   891,   892,
     893,   895,   896,   912,   914,   915,   916,   917,   918,   919,
     920,   921,   922,   923,   925,   926,   941,   942,   953,   975,
     981,   989,   990,   991,  1010,  1011,  1012,   988,   990,  1036,
    1036,   584,  1036,   511,  1036,   174,   440,   517,  1023,   585,
     691,   863,     3,   173,   175,   478,   713,  1028,  1030,   173,
    1031,   582,   912,   959,   960,   781,   532,   528,  1018,   529,
     529,   529,   541,   581,   174,   300,   734,   222,   159,   691,
     749,    31,   133,   790,   790,    60,   790,   164,   169,   241,
     292,   801,   803,   804,   833,   835,   836,   837,   183,   295,
     467,   295,   795,   796,   528,   428,  1044,   174,   511,   226,
     154,   359,   154,    27,    33,   138,   299,   359,   363,   395,
     470,   560,   563,   564,   359,   154,    41,    61,   107,   204,
     255,   266,   278,   310,   359,   365,   390,   395,   411,   545,
     548,   563,   154,   359,   395,   563,   154,   359,   395,   563,
     154,   569,    41,   570,   296,   495,   912,   982,   587,   588,
     586,     3,    31,    38,    43,    47,    50,    56,    60,    82,
      84,    90,   102,   133,   173,   175,   178,   179,   196,   211,
     224,   225,   227,   238,   240,   250,   274,   283,   305,   307,
     328,   370,   389,   400,   420,   429,   450,   461,   476,   478,
     529,   655,   660,   796,   912,   962,   963,  1013,  1019,   912,
     427,   581,   582,   529,   528,   639,   379,   650,   678,   280,
     674,   480,   194,   581,   194,   581,   654,   194,   581,   194,
     581,   194,   581,   194,   582,   677,    90,   722,   154,   494,
      91,   130,   313,   433,   194,   582,   154,   530,  1017,    64,
     366,   532,   698,   154,   532,   698,   154,   295,   703,   704,
     912,  1019,   361,   529,   532,     4,   162,   295,   447,   519,
     520,   547,   550,   584,   708,   710,   711,   714,  1012,   709,
     440,   528,   596,   598,   912,   960,   528,     3,    69,    70,
     110,   111,   114,   115,   191,   192,   258,   259,   260,   261,
     262,   263,   264,   265,   268,   269,   343,   344,   384,   385,
     484,   485,   508,   509,   584,   898,   899,   900,   901,   902,
     903,   904,   905,   906,   907,   908,   909,   910,   965,   966,
     858,   859,   912,   581,   912,   967,   519,   520,   582,   913,
     914,   942,   953,   969,   528,   912,   959,   970,   912,    59,
     174,   236,   441,   912,   960,   973,   912,   529,   583,   528,
     429,   810,   811,   811,   792,   793,   846,   222,   787,   856,
     811,    47,   815,   811,    38,   227,   389,   860,   227,   305,
     861,   846,   861,   227,   860,   528,   227,   861,   150,   202,
     848,   227,   815,   528,   583,   528,   811,   302,   912,  1038,
    1040,   962,     3,    38,    43,    47,    50,    55,    56,    57,
      58,    60,    72,    73,    82,    84,    90,   102,   113,   116,
     167,   173,   175,   179,   196,   211,   218,   219,   221,   224,
     225,   227,   238,   240,   250,   273,   274,   275,   283,   288,
     305,   307,   328,   348,   370,   374,   389,   396,   400,   403,
     420,   429,   438,   439,   450,   456,   461,   474,   478,   655,
     658,   874,   876,   877,   879,   881,   883,   885,   887,   888,
     889,   891,   892,   895,   896,   964,  1015,    41,   239,   582,
     528,   526,   769,   477,   894,   912,   979,   894,   894,   528,
     528,   882,   882,   331,   769,   528,   884,  1006,   536,    72,
      73,   894,   912,   882,   528,   528,   492,   514,   528,   897,
     528,   897,   528,   912,   912,   912,    84,   150,   992,   996,
     912,   960,   961,   769,   912,   959,   588,     9,   583,   943,
     944,   945,    19,   530,   585,   983,   585,   528,   584,   528,
     528,   584,  1012,     3,     8,    11,    15,    16,    17,    18,
      20,    21,    22,    37,    41,    47,    54,    81,   179,   196,
     201,   224,   225,   240,   280,   283,   297,   300,   400,   512,
     515,   516,   517,   519,   520,   521,   522,   523,   524,   951,
     952,   953,   955,   986,   491,   927,   307,   912,   532,   787,
     528,   584,   787,     3,   118,   244,   547,   584,   896,  1039,
     105,  1040,  1040,    41,   582,   529,   532,   707,   532,   529,
     782,  1006,  1007,   467,   783,  1018,   691,   195,   361,   222,
     691,   639,   395,   174,   479,   750,   771,   771,    31,   797,
     798,   912,    60,   771,   791,   166,   277,   821,   229,   278,
     347,   398,   464,     4,     9,    31,   816,   912,   519,   520,
     817,   818,   912,   914,   833,   834,   804,   803,   801,   802,
     169,   836,   290,   838,    60,   777,   778,   779,   849,   913,
     990,   990,   801,   833,   960,   581,   239,   582,   440,   581,
      75,    83,    94,   171,   194,   335,   457,   558,   559,   582,
     619,   646,    83,    94,   767,    94,   767,   528,   440,   316,
     406,   528,   617,   248,   316,   406,   460,   617,    94,   532,
     440,   581,     3,   879,   547,    60,   549,   547,   547,   107,
     255,   266,    60,   440,   490,   514,   546,   271,   379,   546,
     548,   863,    94,   440,   767,   379,   581,   440,   379,   569,
     584,   582,   528,   574,   527,    19,   962,   962,   963,   195,
     364,   794,   532,   795,   796,    13,    14,   224,   224,   440,
     440,   582,   638,   643,   490,   597,   581,   351,   390,   427,
     451,   480,   669,   386,   154,   101,   602,   675,   683,   719,
    1046,   581,   280,   545,   684,   280,   528,   639,    41,   280,
      41,   280,   639,   280,   528,   663,   664,   665,   666,   667,
     668,   670,   280,   201,   679,   194,   582,   633,   723,   588,
     154,   174,   701,   697,   587,   530,  1016,  1006,  1009,  1009,
    1016,   529,   532,    13,   709,   715,     4,  1012,     4,  1012,
     584,   572,   573,   588,    56,   103,   124,   142,   147,   170,
     173,   189,   285,   293,   315,   345,   600,    41,   529,   912,
     529,   174,   532,   529,   324,   968,   529,   913,   913,    11,
      15,    16,    20,    21,    22,   201,   224,   297,   515,   516,
     517,   519,   520,   521,   522,   523,   524,   953,   913,   529,
     865,   866,   924,   169,   174,   971,   972,   532,   529,    41,
     973,   960,   973,   973,   174,   529,    41,   857,   528,  1007,
       4,     9,   582,   805,   806,   808,   809,   917,   990,   988,
     180,   244,   427,   432,   434,   460,   581,   788,   487,   869,
     529,   528,   811,   846,   227,   846,   295,   467,   862,   846,
     227,   990,   846,   287,   287,   528,   846,   811,   583,   870,
     871,   528,   583,   870,   532,   529,   532,   530,   528,   879,
     528,   528,   530,   878,    40,   878,   528,   898,   899,   900,
     901,   902,   903,   904,   905,   906,   907,   908,   909,   910,
     911,   529,   532,   882,   589,   690,   726,   731,   765,   768,
    1024,  1041,   960,   961,   528,   486,   976,   977,   912,   961,
    1012,    19,   912,   946,   947,   948,   949,   894,   894,     8,
      15,    16,    20,    21,    22,   515,   516,   517,   519,   520,
     521,   522,   523,   524,   582,   951,   956,   529,   960,   438,
     438,  1012,  1012,   912,   528,   528,   583,   993,   361,  1000,
     169,   527,   529,   532,    19,   532,   537,   912,   521,   586,
     960,  1012,   912,   911,   911,   876,   912,   912,   912,   912,
     912,   912,   912,   912,     5,   588,  1020,   438,    46,   424,
     987,  1016,   912,   912,   528,   769,   918,   974,   981,   133,
     162,   280,   285,   290,   447,   458,   912,   285,   528,   912,
     440,    54,   179,   196,   201,   240,   400,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,    31,    39,   405,
     950,   526,   530,   985,   183,   165,   928,   374,   528,   942,
     991,   174,   842,   962,   842,   528,   584,   582,   581,  1028,
     566,   581,   912,   532,   529,   229,    41,   467,   693,   581,
     728,   467,   528,   582,   733,   743,   744,   746,   582,   584,
     582,   584,    42,   127,   799,   532,   467,   799,   271,   771,
     374,   375,   519,   520,   818,   820,   914,   398,   229,   296,
     319,   319,   532,   523,     4,   819,  1012,   819,   374,   375,
     820,   581,  1005,   284,   402,   839,   528,  1007,  1008,   532,
     183,   467,   201,   183,   222,   834,   802,   529,   359,   582,
     359,   563,   528,   194,   559,  1009,   229,   280,   229,   467,
     528,   622,   629,   630,   875,   876,   530,   556,   557,  1009,
     582,   194,  1009,   194,   558,    27,   138,   395,   555,   562,
     588,   613,   627,  1009,    60,    60,   588,   621,   642,    60,
      60,  1009,   560,  1009,   359,   395,   545,   563,   547,  1016,
    1009,   547,  1016,  1009,   547,   359,   395,   563,  1009,  1009,
     558,  1009,   359,   395,   563,  1009,  1009,   584,   570,   573,
     520,   912,   982,   795,   795,   795,   287,   287,   529,   476,
     963,   794,   912,   912,   285,   579,   584,   285,   579,   582,
     340,   595,   529,   532,   293,   174,   440,   591,   674,   480,
     581,   581,   654,   581,   581,   581,   677,   581,   300,   650,
     528,   154,   154,   240,   582,   619,   631,   634,   637,   647,
     649,   490,   492,   624,   153,   768,   154,   145,   686,   876,
     154,   490,   724,   154,     3,    43,    47,    50,    56,    82,
      84,    90,   102,   173,   175,   178,   179,   196,   211,   224,
     225,   227,   238,   240,   250,   274,   283,   305,   307,   328,
     370,   400,   420,   429,   450,   461,   478,   529,   655,   671,
     672,  1019,   532,   532,    41,   154,     3,   528,   280,   295,
     582,     3,   698,   587,   698,   295,   698,   703,   912,   596,
     529,   532,   571,   912,    41,   594,   584,   594,   280,   285,
     345,   594,    60,   594,   876,   529,   912,   912,   912,   971,
     876,   913,   913,   913,   913,   913,   913,   133,   280,   290,
     913,   913,   913,   913,   913,   913,   913,   913,   913,   913,
     529,   532,    41,   867,   912,   912,   972,   971,   876,   529,
     529,   529,   960,   876,  1007,   529,   319,   375,   523,   528,
     528,   787,   432,   434,   432,   434,   581,   789,   789,   789,
     912,   183,   822,   439,   479,   813,   814,   862,   846,   912,
     528,   846,   169,   528,   583,   853,   862,   876,   529,   532,
     870,   529,  1038,     3,   964,    40,   878,   582,   873,   873,
       3,   526,   526,  1012,   440,   440,   440,   440,   876,   464,
     529,   527,   960,   912,   140,   977,   978,   529,   529,   529,
     912,    19,   532,   537,   530,   529,   529,   511,   511,   529,
     529,   529,   912,   993,   994,   995,   530,   528,   912,   997,
     359,  1004,  1006,   912,   912,   943,   996,   529,   529,   529,
     511,   913,   913,   147,   960,   174,   133,   162,   285,   290,
     447,   458,   528,   147,   956,   912,   424,   987,   912,   974,
     912,   440,   528,   769,   912,   982,   587,   528,   528,   157,
     929,   843,   844,   869,   795,   869,  1012,   911,  1018,  1018,
     528,   254,   280,   786,   844,   487,   692,    41,    60,   729,
     846,   739,   746,   983,   532,   842,   517,   750,   750,   513,
     800,   798,   297,   951,   954,   800,     4,  1012,   820,   296,
     464,   817,   532,   247,  1007,   777,    60,   990,   528,   583,
      60,   271,   440,   440,   912,   280,   646,   528,   154,   528,
     622,   205,   643,   644,   603,    41,   178,   612,   640,   587,
     557,   603,    27,   138,   363,   365,   395,   552,   553,   554,
     564,   565,   154,   698,   154,   698,   613,   627,   613,   529,
     532,   584,   606,   517,   530,   529,   532,   528,   528,   440,
     379,    94,   440,   767,   379,   440,   440,   440,   379,   570,
     574,   529,    19,    19,   527,   794,   794,   794,   963,   529,
     528,   590,     3,   414,   415,   528,   584,   601,   917,   638,
     595,   581,   684,   528,    41,    41,   639,   666,   668,   679,
     674,   361,   427,   643,   581,   581,   654,   581,   629,   630,
     529,   532,   293,   617,   293,   295,   616,  1009,   490,   653,
     581,   528,   769,   581,   617,    41,   581,   529,   532,   875,
     876,   664,   670,   667,   670,   427,   912,   677,   588,   681,
     682,   154,   581,   701,  1016,   572,   584,   584,   285,   643,
     521,   643,   584,   521,   643,   584,   529,   529,   972,   174,
     133,   290,   528,   868,   865,   528,   529,   529,   529,   582,
     806,   869,   789,   789,   789,   789,   581,   581,   581,    60,
     188,   831,    14,   529,   862,  1007,   528,   850,   851,   852,
     915,   918,  1007,   169,    81,   872,   871,   529,   529,   526,
     876,   529,   532,   529,   527,  1012,  1012,   529,   899,   901,
     902,   903,   902,   903,   903,   529,   436,   912,   144,   912,
     946,   956,   897,   897,   529,   532,   529,   583,   912,   997,
     998,   999,    41,   528,   993,  1001,   201,   529,  1000,   911,
     912,    37,    37,   912,   529,   912,   174,   528,   964,   912,
     529,   147,   913,   913,   147,   147,   912,   912,   527,    19,
     528,   984,   796,   487,   912,   306,   933,   532,   822,   794,
     822,   529,   582,   784,   785,   923,   980,   254,   528,   912,
     367,   737,   582,   271,   327,   118,   309,   528,   727,   768,
     862,   529,   532,   733,   692,   912,   166,   234,   528,   800,
     296,   581,   529,  1008,   183,   769,   770,   990,  1008,  1009,
     582,  1009,   529,   154,   644,   559,   644,   603,   633,   532,
     529,   120,   209,   278,   280,   628,   528,    34,    60,   651,
     640,    75,    81,    94,   118,   120,   209,   280,   285,   335,
     353,   457,   467,   608,   609,   623,   178,   118,   193,   280,
     617,   546,   108,   118,   178,   280,   413,   416,   548,   617,
     395,   554,   451,  1009,   558,   562,     3,    38,    43,    47,
      50,    56,    60,    82,    84,    90,   102,   173,   175,   179,
     196,   211,   224,   225,   227,   238,   240,   250,   274,   279,
     283,   297,   305,   307,   328,   370,   389,   396,   400,   420,
     429,   450,   456,   461,   478,   519,   520,   547,   584,   604,
     645,   655,   661,   876,   954,  1013,   588,   642,   960,   797,
    1009,  1009,  1009,  1009,   558,  1009,  1009,  1009,  1009,  1009,
     574,   982,   982,   529,   529,   529,   795,   108,   379,   530,
     912,   546,   601,   528,   637,   768,   686,   724,   528,   650,
     194,   581,   529,   684,   528,    41,   626,   624,   582,   634,
      87,   705,   108,   278,    41,   584,   687,   688,   639,   768,
     666,   668,   529,   672,    13,    14,    41,    41,   769,   770,
     679,   680,   912,   529,   532,   633,   467,   721,   698,   643,
     913,   174,   528,   964,   870,   529,   532,   529,   822,   581,
     581,   581,   581,    31,   104,   184,   373,   528,   823,   824,
     825,   826,   827,   828,   829,   912,   912,   489,   930,   912,
     529,   914,   957,   958,   201,   183,   847,   851,   529,   853,
     854,   855,  1016,   878,  1012,   878,   582,   878,   527,   527,
     912,   993,   532,   529,   582,  1001,  1002,  1003,    41,   912,
     914,  1004,   912,   912,   912,   964,   529,   912,    37,    37,
     912,   912,   147,   529,   520,   982,   529,   962,   529,   912,
     529,   528,   582,   934,   831,   529,   831,   584,   529,   532,
      41,   765,   989,   473,   426,   466,   738,   582,   732,   742,
     295,   735,   486,   757,   759,   760,   761,   517,   746,   737,
     956,    60,   529,   529,   472,   473,   774,   603,   559,   529,
     529,   490,   636,   121,   197,   207,   120,   469,   912,   118,
      41,   528,  1016,  1009,   913,   121,   197,   120,   285,   229,
     581,   636,    89,   651,   194,   285,   547,   912,   651,   285,
     519,   520,   550,   582,   875,   698,   698,     3,  1013,  1017,
     517,   529,   529,   440,   440,   527,   527,   794,   529,   529,
     582,   529,   596,   467,   592,   593,   643,   529,   653,    41,
     682,   427,   280,   528,   724,   637,   153,   768,   151,   203,
     616,   123,   138,   334,   653,   108,   686,   529,   532,   724,
     490,  1047,   912,   912,   427,   528,   681,   295,   582,   720,
     528,   913,   964,   529,   529,     9,   360,   812,   831,   528,
     397,   528,   529,   532,   582,   931,   932,   342,   832,   532,
     529,   528,   583,    60,   529,   201,   529,   854,   527,   876,
     997,   532,   529,   582,   527,   194,   529,   912,   912,   912,
      19,    19,   527,   529,   529,   582,   935,   930,   584,   930,
     785,   858,   529,   532,   472,   983,   529,   532,    92,   737,
     253,   280,   761,   737,   912,   529,  1008,  1008,   353,   636,
     528,   625,   603,   529,   193,   528,   912,   280,   609,   636,
     639,  1009,    41,   154,   872,  1017,   523,   604,  1009,  1009,
     529,   546,   125,   529,   624,   768,   529,   581,   154,    41,
     529,  1009,   653,    31,    86,    95,   119,   193,   206,   413,
     416,   620,   620,   375,   375,   584,    41,    65,    75,   244,
     769,   682,   581,   528,   582,   736,   745,   924,   529,   529,
     528,   930,   960,   528,   960,   825,    41,   532,   912,   467,
     807,   914,   990,  1007,   858,   528,   858,  1001,   912,   982,
     982,   315,   936,   832,   832,   768,   309,   768,   732,   295,
     528,   730,    37,   752,   253,   581,   603,   588,   632,   635,
     417,   482,   610,   611,   528,   605,   912,   529,   252,   648,
     193,   467,   561,   523,   451,   596,   584,   724,   616,  1047,
     528,   581,   768,   624,   705,   768,    75,   298,    75,   529,
     721,   912,    81,   740,   529,   532,   740,     9,   832,   529,
     824,   529,   934,   932,   377,   529,   990,   527,   527,   527,
      60,   795,   807,   807,   738,    94,   745,   134,   912,   436,
      60,   758,   639,   517,   529,   532,   545,   529,   278,   618,
     175,   314,   401,   295,   614,   615,   641,   605,   912,   451,
      41,   528,  1047,   616,   653,  1047,   298,   298,   528,   529,
    1016,   741,  1016,   724,   736,   741,   529,   807,   529,   809,
     529,   959,   186,   346,   375,   937,   472,  1009,   529,   281,
     464,   123,   134,   146,   215,   464,   755,   407,   431,   752,
     648,   604,   635,   529,   611,   207,   123,   464,   295,   641,
     295,   614,   768,   745,   740,   799,   869,   799,    54,   105,
     453,   912,   938,   939,   938,   938,   529,   768,   869,   395,
     281,   756,   912,   118,   528,   729,   753,   395,   729,   436,
     615,    64,   278,   366,   395,   607,   607,  1047,   529,   741,
     800,   800,   939,   374,   168,   330,   168,   330,   150,   940,
     940,   940,   744,   473,   742,   521,   754,   473,   521,   744,
     755,   603,    26,   118,   285,   724,   799,    37,   105,   183,
     278,   437,   869,   529,   528,   869,   800,   939,   374,   303,
     960,   529
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   538,   539,   540,   540,   541,   541,   541,   541,   541,
     541,   541,   541,   541,   541,   541,   541,   541,   541,   541,
     541,   541,   541,   541,   541,   541,   541,   541,   541,   541,
     541,   541,   541,   541,   541,   541,   541,   541,   541,   541,
     541,   541,   541,   541,   541,   541,   541,   541,   541,   551,
     551,   551,   551,   551,   551,   551,   551,   552,   552,   553,
     553,   554,   554,   554,   554,   555,   555,   556,   556,   557,
     558,   558,   559,   559,   560,   560,   560,   560,   560,   560,
     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
     560,   560,   560,   560,   560,   560,   560,   561,   561,   562,
     562,   562,   562,   563,   563,   564,   565,   565,   565,   689,
     689,   689,   689,   581,   581,   582,   582,   582,   583,   583,
     584,   585,   585,   586,   587,   588,   588,   588,   588,   766,
     766,   766,   766,   766,   766,   766,   766,   766,   766,   766,
     766,   766,   767,   767,   726,   727,   727,   727,   727,   727,
     728,   728,   729,   729,   729,   730,   730,   730,   731,   731,
     732,   733,   733,   734,   734,   734,   735,   735,   735,   736,
     736,   736,   737,   737,   738,   738,   739,   739,   740,   740,
     741,   741,   742,   742,   743,   743,   744,   744,   745,   745,
     746,   685,   685,   685,   686,   686,   686,   687,   687,   688,
     688,   762,   762,   762,   683,   683,   683,   684,   684,   676,
     676,   676,   677,   677,   678,   678,   678,   679,   679,   680,
     681,   682,   682,  1025,   702,   702,   702,   703,   703,   704,
     704,   705,   705,   544,   544,   545,   545,   546,   546,   546,
     547,   547,   547,   547,   548,   548,   548,   548,   548,   548,
     548,   548,   548,   548,   548,   548,   548,   548,   549,   549,
     550,   550,   550,   542,   542,   700,   700,   701,   701,  1021,
    1021,  1021,  1021,  1021,  1021,  1022,  1022,  1022,  1023,  1023,
    1023,  1026,   602,   602,   602,   603,   603,   604,   604,   604,
     604,   604,   604,   605,   605,   606,   607,   607,   607,   607,
     607,   608,   608,   608,   608,   609,   609,   609,   609,   609,
     609,   609,   609,   610,   610,   611,   611,   612,   612,   612,
     613,   614,   615,   615,   615,   615,   615,   616,   616,   616,
     616,   617,   618,   618,   619,   619,   620,   620,   620,   620,
     620,   620,   620,   620,   621,   621,   622,   623,   623,   623,
     623,   624,   624,   624,   624,   625,   626,   626,   626,   627,
     628,   628,   628,   628,   628,   628,   629,   630,   631,   631,
     632,   632,   633,   634,   634,   634,   635,   635,   636,   636,
     637,   637,   637,   638,   639,   639,   640,   640,   641,   642,
     642,   642,   642,   643,   643,   644,   644,   645,   645,   645,
     646,   646,   646,   646,   646,   646,   647,   647,   648,   648,
     648,   648,   649,   650,   650,   650,   650,   650,   650,   650,
     650,   651,   651,   694,   694,   694,   694,   694,   694,   695,
     695,   695,   695,   695,   695,   695,   695,   695,   695,   695,
     695,   695,   695,   695,   695,   695,   695,   696,   696,   696,
     696,   696,   696,   697,   697,   698,   698,   698,   699,   699,
     699,   751,   752,   752,   753,   753,   754,   754,   755,   755,
     755,   755,   755,   755,   755,   755,   755,   756,   756,   757,
     758,   758,   758,   759,   760,   760,   761,   761,   662,   662,
     662,   662,   662,   662,   663,   664,   665,   665,   666,   666,
     667,   668,   668,   669,   669,   670,   670,   670,   671,   671,
     672,   672,   672,  1024,   589,   589,   589,   590,   590,   590,
     591,   591,   592,   592,   593,   593,   594,   594,   595,   595,
     596,   596,   597,   597,   598,   598,   599,   599,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   601,   601,   601,   601,   601,   601,
     601,   768,   768,   769,   769,   769,   770,   770,   770,   770,
     770,   770,   770,   770,   771,   771,   772,   772,   773,   773,
     773,   773,   773,   773,   773,   773,   773,   773,   773,   773,
     773,   773,   773,   773,   773,   773,   773,   774,   774,   775,
     775,   776,   776,   777,   777,   777,   778,   778,   779,   779,
     780,   780,   780,   781,   781,   782,   783,   783,   784,   784,
     785,   785,   785,   786,   786,   786,   787,   787,   788,   788,
     788,   788,   788,   788,   788,   788,   788,   789,   789,   790,
     790,   790,   791,   792,   792,   793,   793,   794,   794,   794,
     795,   795,   796,   796,   797,   797,   798,   798,   799,   799,
     799,   800,   800,   800,   801,   801,   801,   801,   802,   802,
     803,   803,   803,   803,   804,   804,   805,   805,   805,   806,
     806,   806,   806,   807,   807,   808,   808,   809,   809,   809,
     809,   810,   811,   811,   812,   812,   813,   813,   814,   815,
     815,   816,   816,   816,   816,   816,   817,   818,   818,   818,
     819,   819,   820,   820,   821,   821,   822,   822,   822,   823,
     823,   824,   824,   825,   825,   825,   825,   825,   826,   827,
     828,   829,   830,   830,   831,   831,   832,   832,   833,   833,
     834,   834,   835,   835,   836,   837,   837,   837,   837,   838,
     838,   839,   839,   839,   840,   840,   841,   841,   842,   842,
     843,   843,   844,   844,   845,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   846,   847,
     847,   848,   848,   848,   849,   849,   850,   850,   850,   851,
     851,   852,   852,   853,   853,   854,   855,   855,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   856,   856,   857,
     857,   857,   857,   858,   858,   859,   859,   859,   859,   859,
     860,   860,   860,   860,   860,   860,   861,   861,   862,   862,
     863,   863,   863,   863,   864,   864,   865,   866,   866,   867,
     867,   868,   868,   869,   869,   870,   870,   871,   872,   872,
     873,   873,   874,   874,   875,   875,   876,   876,   876,   876,
     876,   876,   876,   876,   876,   876,   877,   877,   878,   878,
     878,   879,   879,   879,   879,   879,   879,   879,   880,   880,
     880,   880,   881,   882,   882,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   884,   884,   885,   885,
     886,   886,   887,   888,   889,   889,   890,   890,   891,   892,
     893,   893,   893,   893,   893,   893,   894,   894,   895,   895,
     895,   895,   896,   897,   897,   897,   898,   898,   899,   899,
     900,   900,   901,   901,   902,   902,   903,   903,   904,   904,
     905,   905,   906,   906,   907,   907,   908,   908,   909,   909,
     910,   910,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   913,   913,   913,
     913,   914,   914,   915,   915,   915,   915,   915,   915,   916,
     916,   916,   917,   917,   917,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   919,   920,   921,   922,   922,
     922,   922,   922,   922,   922,   923,   923,   924,   924,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   926,   926,   927,   927,   928,   928,   928,
     929,   929,   930,   930,   931,   931,   932,   933,   933,   933,
     934,   935,   935,   936,   936,   937,   937,   937,   937,   938,
     938,   939,   939,   939,   939,   939,   940,   940,   940,   940,
     940,   941,   941,   942,   942,   943,   944,   944,   945,   945,
     946,   947,   947,   948,   948,   949,   949,   950,   950,   950,
     951,   951,   952,   952,   952,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   953,   953,   954,   954,
     955,   955,   955,   955,   955,   955,   955,   955,   956,   956,
     957,   957,   958,   958,   959,   959,   960,   960,   961,   961,
     962,   962,   963,   963,   963,   964,   964,   965,   965,   966,
     966,   966,   966,   966,   966,   966,   966,   966,   966,   966,
     966,   966,   966,   966,   967,   967,   968,   969,   969,   970,
     970,   970,   970,   970,   970,   971,   972,   973,   973,   973,
     974,   974,   974,   974,   975,   976,   976,   977,   978,   978,
     979,   979,   980,   981,   981,   586,   586,   586,   586,   982,
     982,   983,   983,   984,   984,   984,   985,   985,   985,   985,
     985,   986,   986,   987,   987,   988,   988,   989,   989,   990,
     990,   991,   991,   991,   991,   992,   992,   993,   993,   994,
     994,   995,   995,   996,   996,   997,   998,   998,   999,   999,
    1000,  1000,  1000,  1001,  1002,  1002,  1003,  1003,  1004,  1004,
    1004,  1005,  1005,  1006,  1006,  1007,  1007,  1008,  1008,  1009,
    1010,  1010,  1011,  1011,  1011,  1011,  1011,  1011,  1011,  1011,
    1011,  1011,  1011,  1011,  1011,  1011,  1012,  1013,  1013,  1013,
    1014,  1014,  1014,  1015,  1015,  1015,  1016,  1016,  1017,  1017,
    1018,  1018,  1019,  1020,  1020,   763,   764,   764,   765,   765,
     765,   765,   765,   765,   673,   673,   673,   674,   674,   675,
     675,   675,   675,   719,   719,   720,   721,   721,   722,   722,
     723,   723,   724,   724,   725,   725,   543,   543,   543,   543,
     543,   543,   576,   576,   577,   577,   578,   578,   579,   579,
     580,   580,   580,   580,   580,   580,   580,   580,   580,   580,
     717,   717,   718,   706,   706,   706,   706,   707,   707,   708,
     708,   708,   709,   709,   709,   709,   709,   709,   709,   709,
     709,   709,   709,   709,   709,   709,   709,   709,   709,   709,
     709,   709,   709,   709,   709,   709,   709,   709,   709,   709,
     709,   709,   709,   709,   710,   710,   710,   711,   711,   712,
     712,   713,   713,   714,   714,   714,   714,   715,   716,   716,
    1035,  1035,  1035,  1035,  1035,  1036,  1036,  1036,  1036,  1037,
    1037,  1038,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1040,
    1040,   747,   747,   747,   747,   748,   748,   749,   749,   750,
     750,   750,  1027,  1027,  1027,  1027,  1027,  1028,  1028,  1028,
    1028,  1028,  1029,  1029,  1030,  1030,  1031,  1031,   690,   690,
     691,   691,   691,   692,   692,   693,   693,   566,   566,   567,
     567,   567,   568,   568,   568,   569,   569,   570,   570,   571,
     571,   572,   573,   573,   574,   574,  1032,  1032,  1032,  1032,
    1032,  1033,  1033,  1034,  1034,  1034,  1041,  1041,  1041,  1041,
    1041,  1041,  1041,  1041,  1041,  1042,  1042,  1043,  1043,  1044,
    1044,  1045,  1045,   575,  1046,  1046,  1046,  1046,  1046,  1047,
    1047,  1047,  1047,   652,   652,   652,   653,   653,   653,   654,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
       6,     4,     6,     4,     6,     4,     6,     1,     2,     3,
       2,     1,     3,     2,     3,     1,     3,     1,     2,     2,
       1,     2,     2,     2,     2,     5,     3,     6,     6,     3,
       6,     3,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       3,     2,     3,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     6,
       6,     8,     6,     8,     6,     8,     6,     8,     8,    10,
       8,    10,     1,     0,     9,     1,     4,     4,     7,     2,
       1,     3,     2,     2,     0,     4,     3,     0,     1,     0,
       2,     3,     5,     2,     2,     0,     8,     5,     0,     5,
       5,     7,     2,     0,     1,     1,     1,     3,     2,     0,
       1,     0,     1,     3,     1,     3,     1,     2,     1,     3,
       2,     6,     9,     8,     2,     4,     1,     1,     0,     1,
       3,     2,     4,     5,     5,     8,     7,     1,     0,     8,
      11,    10,     0,     1,     0,     1,     1,     0,     2,     1,
       2,     1,     3,     4,     3,     9,    12,     1,     3,     1,
       3,     3,     0,     4,     6,     1,     2,     1,     1,     0,
       1,     2,     2,     1,     2,     2,     1,     2,     3,     2,
       2,     2,     2,     3,     3,     3,     1,     3,     1,     0,
       1,     2,     2,     6,     8,     5,     7,     0,     2,     2,
       3,     3,     2,     2,     2,     1,     1,     0,     2,     2,
       0,     2,     9,    12,    11,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       3,     2,     5,     1,     1,     1,     0,     5,     7,     5,
       2,     3,     1,     1,     2,     2,     0,     3,     4,     4,
       0,     3,     2,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     0,     3,     3,     3,     0,     1,
       2,     1,     2,     2,     2,     2,     2,     3,     2,     2,
       1,     3,     1,     1,     1,     1,     3,     1,     2,     0,
       1,     2,     0,     1,     3,     0,     2,     0,     3,     3,
       1,     5,     3,     1,     3,     1,     2,     1,     4,     5,
       5,     6,     3,     7,     4,    11,     1,     3,     2,     2,
       2,     0,     3,     1,     1,     2,     2,     2,     2,     1,
       0,     1,     2,     6,     4,     6,     4,     6,     8,     1,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     1,     2,     2,     1,
       3,     1,     1,     1,     3,     1,     1,     0,     1,     1,
       1,     9,     2,     0,     3,     0,     1,     0,     3,     3,
       2,     1,     6,     3,     3,     2,     2,     1,     0,     5,
       2,     2,     0,     7,     1,     1,     1,     2,     5,     8,
       7,     5,     8,     7,     4,     4,     1,     3,     1,     1,
       3,     1,     3,     1,     1,     2,     4,     3,     1,     3,
       2,     4,     4,     8,    11,     9,     7,     0,     3,     3,
       1,     1,     3,     0,     1,     0,     1,     0,     1,     0,
       1,     3,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     3,     1,     3,
       1,     1,     1,     3,     3,     3,     1,     2,     4,     4,
       2,     3,     5,     5,     1,     1,     3,     0,    11,    11,
      10,    12,     1,     2,     5,     4,     4,     4,     4,     7,
       5,     4,     7,     6,     9,     9,     4,     1,     1,     1,
       1,     1,     1,     1,     5,     1,     1,     3,     1,     2,
       2,     2,     3,     1,     3,     8,     5,     0,     1,     3,
       1,     1,     3,     1,     2,     0,     2,     0,     3,     3,
       4,     4,     4,     4,     3,     2,     1,     1,     0,     1,
       1,     0,     2,     1,     5,     1,     0,     2,     2,     0,
       1,     0,     3,     5,     1,     3,     4,     3,     1,     1,
       0,     2,     2,     0,     2,     2,     1,     1,     1,     0,
       2,     4,     5,     4,     2,     3,     1,     1,     1,     2,
       2,     1,     2,     3,     0,     1,     0,     5,     1,     4,
       6,     2,     1,     0,     4,     0,     1,     1,     3,     4,
       0,     1,     1,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     3,     3,     0,     1,
       3,     1,     2,     1,     1,     1,     1,     1,     2,     4,
       4,     5,     1,     1,     2,     0,     2,     0,     1,     3,
       1,     0,     1,     2,     3,     2,     4,     2,     3,     2,
       0,     1,     2,     0,     4,     5,     1,     2,     2,     0,
       1,     3,     1,     2,     2,     4,     4,     3,     3,     3,
       3,     3,     3,     3,     1,     4,     4,     9,     9,     3,
       0,     2,     2,     0,     5,     3,     1,     1,     3,     5,
       3,     1,     2,     1,     3,     5,     1,     2,     3,     4,
       5,     4,     5,     4,     6,     5,     4,     5,     5,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     2,     5,     5,     5,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     4,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     4,     6,
       1,     4,     4,     5,     4,     6,     1,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
       7,     1,     2,     1,     1,     1,     2,     2,     4,     3,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     4,     2,     3,     3,     4,     3,     5,
       6,     7,     9,     7,     7,     5,     1,     1,     1,     5,
       6,     6,     4,     4,     4,     4,     6,     5,     5,     5,
       4,     6,     4,     7,     9,     5,     0,     5,     4,     0,
       1,     0,     2,     0,     1,     3,     3,     2,     2,     0,
       6,     1,     0,     3,     0,     3,     3,     3,     0,     1,
       4,     2,     2,     2,     2,     2,     3,     2,     2,     3,
       0,     4,     3,     1,     5,     3,     1,     3,     1,     2,
       3,     1,     3,     1,     2,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     4,
       1,     4,     1,     2,     1,     2,     1,     2,     1,     3,
       1,     3,     1,     2,     1,     3,     1,     2,     1,     0,
       1,     3,     1,     3,     3,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     1,     1,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     1,     2,     3,     5,     7,     7,     1,
       0,     0,     2,     0,     2,     3,     3,     3,     5,     7,
       7,     0,     2,     1,     0,     1,     0,     1,     3,     1,
       2,     3,     2,     1,     3,     4,     2,     1,     3,     1,
       3,     1,     2,     1,     0,     3,     1,     3,     1,     2,
       4,     2,     0,     3,     1,     3,     1,     2,     4,     2,
       0,     1,     3,     1,     3,     1,     2,     1,     3,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     1,     1,     4,     7,     6,     2,     0,     1,
       1,     1,     1,    13,    16,     1,     2,     0,     1,     0,
       1,     0,     2,     0,     1,     0,     6,     8,     6,     8,
       6,     8,     3,     2,     1,     0,     6,     6,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       4,     6,     3,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       2,     3,     3,     3,     3,     1,     3,     3,     2,     3,
       3,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       3,     2,     4,     6,     6,     0,     1,     1,     1,     0,
       2,     2,     4,     6,     5,     4,     6,     1,     1,     1,
       1,     1,     1,     0,     1,     3,     1,     0,     7,     3,
       1,     2,     3,     2,     0,     2,     0,     2,     4,     5,
       8,     7,     2,     3,     5,     1,     0,     2,     0,     1,
       0,     2,     1,     3,     3,     0,     2,     3,     3,     3,
       3,     1,     1,     1,     2,     3,     2,     2,     2,     4,
       2,     3,     4,     3,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     2,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 525 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 541 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 20015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 553 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* stmt: %empty  */
#line 605 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 20199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* qualify_list: qualify_el  */
#line 138 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* qualify_list: qualify_list qualify_el  */
#line 139 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].str)); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* qualify_el: '.' attr_name  */
#line 144 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.str) = (yyvsp[0].str);
				}
#line 20235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* qualified_column: ColId  */
#line 150 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 20241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* qualified_column: ColId qualify_list  */
#line 151 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                        { (yyval.list) = list_concat(list_make1((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 20247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* qualifiedColumnDef: qualified_column regularColumnDef  */
#line 157 "third_party/libpg_query/grammar/statements/alter_table.y"
                        {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.list) = list_make2((yyvsp[-1].list), n);
			}
#line 20257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* qualifiedColumnDef: qualified_column generatedColumnDef  */
#line 164 "third_party/libpg_query/grammar/statements/alter_table.y"
                        {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.list) = list_make2((yyvsp[-1].list), n);
			}
#line 20267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ADD_P qualifiedColumnDef  */
#line 174 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ADD_P IF_P NOT EXISTS qualifiedColumnDef  */
#line 183 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ADD_P COLUMN qualifiedColumnDef  */
#line 192 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS qualifiedColumnDef  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def_list = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: SET PARTITIONED BY '(' expr_list_opt_comma ')'  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: RESET PARTITIONED BY  */
#line 218 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: SET SORTED BY '(' sortby_list ')'  */
#line 226 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: RESET SORTED BY  */
#line 234 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 242 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 251 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 259 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 267 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 276 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 285 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 294 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 20441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 303 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 320 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 329 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 338 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: DROP opt_column IF_P EXISTS qualified_column opt_drop_behavior  */
#line 347 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->def_list = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmd: DROP opt_column qualified_column opt_drop_behavior  */
#line 357 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->def_list = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P opt_Typename opt_collate_clause alter_using  */
#line 370 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 20541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 385 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_table_cmd: ADD_P TableConstraint  */
#line 394 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 402 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 417 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 435 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_table_cmd: SET LOGGED  */
#line 445 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* alter_table_cmd: SET UNLOGGED  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* alter_table_cmd: SET reloptions  */
#line 459 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* alter_table_cmd: RESET reloptions  */
#line 467 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* alter_table_cmd: alter_generic_options  */
#line 474 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* alter_using: USING a_expr  */
#line 484 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* alter_using: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* alter_generic_option_elem: generic_option_elem  */
#line 491 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* alter_generic_option_elem: SET generic_option_elem  */
#line 495 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 500 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 20710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* alter_generic_option_elem: DROP generic_option_name  */
#line 505 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 20718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* alter_table_cmds: alter_table_cmd  */
#line 512 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 513 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 518 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* opt_set_data: SET DATA_P  */
#line 522 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 20742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* opt_set_data: SET  */
#line 523 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* opt_set_data: %empty  */
#line 524 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column qualified_column TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->name_list = (yyvsp[-2].list);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column qualified_column TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->name_list = (yyvsp[-2].list);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 21127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 21169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 21179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 21187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 21196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 21202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 21214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 21226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 21238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 21279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 21312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 21328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 21362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 21419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 21431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 21491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 21509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 21515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateTypeStmt: CREATE_P OptTemp TYPE_P qualified_name AS create_type_value  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-4].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateTypeStmt: CREATE_P OptTemp TYPE_P IF_P NOT EXISTS qualified_name AS create_type_value  */
#line 16 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-7].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateTypeStmt: CREATE_P OR REPLACE OptTemp TYPE_P qualified_name AS create_type_value  */
#line 24 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = (PGCreateTypeStmt *) (yyvsp[0].node);
					(yyvsp[-2].range)->relpersistence = (yyvsp[-4].ival);
					n->typeName = (yyvsp[-2].range);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* create_type_value: ENUM_P select_with_parens  */
#line 35 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->kind = PG_NEWTYPE_ENUM;
		n->query = (yyvsp[0].node);
		n->vals = NULL;
		(yyval.node) = (PGNode *)n;
	}
#line 21575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* create_type_value: ENUM_P '(' opt_enum_val_list ')'  */
#line 43 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->kind = PG_NEWTYPE_ENUM;
		n->vals = (yyvsp[-1].list);
		n->query = NULL;
		(yyval.node) = (PGNode *)n;
	}
#line 21587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* create_type_value: Typename  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
        {
		PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
		n->query = NULL;
		auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
		if (name == "enum") {
			n->kind = PG_NEWTYPE_ENUM;
			n->vals = (yyvsp[0].typnam)->typmods;
		} else {
			n->kind = PG_NEWTYPE_ALIAS;
			n->ofType = (yyvsp[0].typnam);
		}
		(yyval.node) = (PGNode *)n;
	}
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_enum_val_list: enum_val_list  */
#line 68 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* opt_enum_val_list: %empty  */
#line 69 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 21617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* enum_val_list: Sconst  */
#line 73 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* enum_val_list: enum_val_list ',' Sconst  */
#line 77 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* create_secret_generic_opt_arg: a_expr  */
#line 57 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* create_secret_generic_opt_elem: ColLabel create_secret_generic_opt_arg  */
#line 62 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* create_secret_generic_opt_list: create_secret_generic_opt_elem  */
#line 69 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* create_secret_generic_opt_list: create_secret_generic_opt_list ',' create_secret_generic_opt_elem  */
#line 73 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 21855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 21955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 22030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 22044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 22108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* AlterDatabaseStmt: ALTER DATABASE ColId RENAME TO ColId  */
#line 8 "third_party/libpg_query/grammar/statements/alter_database.y"
                                {
					PGAlterDatabaseStmt *n = makeNode(PGAlterDatabaseStmt);
					n->dbname = (yyvsp[-3].str);
					n->new_name = (yyvsp[0].str);
					n->alter_type = PG_ALTER_DATABASE_RENAME;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* AlterDatabaseStmt: ALTER DATABASE IF_P EXISTS ColId RENAME TO ColId  */
#line 17 "third_party/libpg_query/grammar/statements/alter_database.y"
                                {
					PGAlterDatabaseStmt *n = makeNode(PGAlterDatabaseStmt);
					n->dbname = (yyvsp[-3].str);
					n->new_name = (yyvsp[0].str);
					n->alter_type = PG_ALTER_DATABASE_RENAME;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 22237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 22266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 22313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 22331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 22343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 22416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 22450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* regularColumnDef: Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
        {
		PGColumnDef *n = makeNode(PGColumnDef);
		n->category = COL_STANDARD;
		n->typeName = (yyvsp[-1].typnam);
		n->inhcount = 0;
		n->is_local = true;
		n->is_not_null = false;
		n->is_from_type = false;
		n->storage = 0;
		n->raw_default = NULL;
		n->cooked_default = NULL;
		n->collOid = InvalidOid;
		SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
						 yyscanner);
		(yyval.node) = (PGNode *) n;
	}
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* generatedColumnDef: opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
        {
		PGColumnDef *n = makeNode(PGColumnDef);
		n->category = COL_GENERATED;
		n->typeName = (yyvsp[-2].typnam);
		n->inhcount = 0;
		n->is_local = true;
		n->is_not_null = false;
		n->is_from_type = false;
		n->storage = 0;
		n->raw_default = NULL;
		n->cooked_default = NULL;
		n->collOid = InvalidOid;
		// merge the constraints with the generated column constraint
		auto constraints = (yyvsp[0].list);
		if (constraints) {
			constraints = lappend(constraints, (yyvsp[-1].node));
		} else {
			constraints = list_make1((yyvsp[-1].node));
		}
		SplitColQualList(constraints, &n->constraints, &n->collClause,
						 yyscanner);
		(yyval.node) = (PGNode *)n;
	}
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnDef: ColId regularColumnDef  */
#line 467 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->colname = (yyvsp[-1].str);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
			}
#line 23119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnDef: ColId generatedColumnDef  */
#line 475 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = (PGColumnDef *) (yyvsp[0].node);
					n->colname = (yyvsp[-1].str);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
			}
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* def_list: def_elem  */
#line 484 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* def_list: def_list ',' def_elem  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* index_name: ColId  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* TableElement: columnDef  */
#line 493 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* TableElement: TableLikeClause  */
#line 494 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* TableElement: TableConstraint  */
#line 495 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* def_elem: ColLabel '=' def_arg  */
#line 500 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* def_elem: ColLabel  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* opt_definition: WITH definition  */
#line 511 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* opt_definition: %empty  */
#line 512 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* OptTableElementList: TableElementList  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* OptTableElementList: TableElementList ','  */
#line 518 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* OptTableElementList: %empty  */
#line 519 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* columnElem: ColId  */
#line 524 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* opt_column_list: '(' columnList ')'  */
#line 531 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* opt_column_list: %empty  */
#line 532 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* ColQualList: ColQualList ColConstraint  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* ColQualList: %empty  */
#line 538 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* key_delete: ON DELETE_P key_action  */
#line 542 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* reloption_elem: ColLabel '=' def_arg  */
#line 548 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* reloption_elem: ColLabel  */
#line 552 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 556 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* reloption_elem: ColLabel '.' ColLabel  */
#line 561 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* columnList: columnElem  */
#line 568 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* columnList: columnList ',' columnElem  */
#line 569 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* columnList_opt_comma: columnList  */
#line 573 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* columnList_opt_comma: columnList ','  */
#line 574 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* func_type: Typename  */
#line 578 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 580 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 586 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 597 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 611 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 639 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 667 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* TableElementList: TableElement  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* TableElementList: TableElementList ',' TableElement  */
#line 693 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* key_match: MATCH FULL  */
#line 700 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 23467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* key_match: MATCH PARTIAL  */
#line 704 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* key_match: MATCH SIMPLE  */
#line 712 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* key_match: %empty  */
#line 716 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 724 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* OptTemp: TEMPORARY  */
#line 733 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* OptTemp: TEMP  */
#line 734 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* OptTemp: LOCAL TEMPORARY  */
#line 735 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* OptTemp: LOCAL TEMP  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* OptTemp: GLOBAL TEMPORARY  */
#line 738 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* OptTemp: GLOBAL TEMP  */
#line 745 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* OptTemp: UNLOGGED  */
#line 751 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* OptTemp: %empty  */
#line 752 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* generated_when: ALWAYS  */
#line 757 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* generated_when: BY DEFAULT  */
#line 758 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* MergeIntoStmt: opt_with_clause MERGE INTO relation_expr_opt_alias USING table_ref join_qual merge_match_list returning_clause  */
#line 13 "third_party/libpg_query/grammar/statements/merge_into.y"
                                {
					PGMergeIntoStmt *n = makeNode(PGMergeIntoStmt);
					n->targetTable = (yyvsp[-5].range);
					n->source = (yyvsp[-3].node);
					if ((yyvsp[-4].keyword) != NULL && IsA((yyvsp[-2].node), PGList))
						n->usingClause = (PGList *) (yyvsp[-2].node); /* USING clause */
					else
						n->joinCondition = (yyvsp[-2].node); /* ON clause */
					n->matchActions = (yyvsp[-1].list);
					n->withClause = (yyvsp[-8].with);
					n->returningList = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_and_clause: AND a_expr  */
#line 29 "third_party/libpg_query/grammar/statements/merge_into.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* opt_and_clause: %empty  */
#line 30 "third_party/libpg_query/grammar/statements/merge_into.y"
                        { (yyval.node) = NULL; }
#line 23882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* opt_insert_column_list: '(' insert_column_list ')'  */
#line 34 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* opt_insert_column_list: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                        { (yyval.list) = NULL; }
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* matched_clause_action: UPDATE SET set_clause_list_opt_comma  */
#line 44 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_UPDATE;
			n->insert_column_order = PG_INSERT_BY_POSITION;
			n->updateTargets = (yyvsp[0].list);
			(yyval.node) = (PGNode *)n;
		}
#line 23906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* matched_clause_action: UPDATE SET '*'  */
#line 52 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_UPDATE;
			n->insert_column_order = PG_INSERT_BY_POSITION;
			(yyval.node) = (PGNode *)n;
		}
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* matched_clause_action: UPDATE opt_by_name_or_position  */
#line 59 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_UPDATE;
			n->insert_column_order = (yyvsp[0].bynameorposition);
			(yyval.node) = (PGNode *)n;
		}
#line 23928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* matched_clause_action: DELETE_P  */
#line 66 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_DELETE;
			(yyval.node) = (PGNode *)n;
		}
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* matched_clause_action: INSERT opt_insert_column_list VALUES '(' expr_list_opt_comma ')'  */
#line 72 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_INSERT;
			n->insert_column_order = PG_INSERT_BY_POSITION;
			n->insertCols = (yyvsp[-4].list);
			n->insertValues = (yyvsp[-1].list);
			(yyval.node) = (PGNode *)n;
		}
#line 23951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* matched_clause_action: INSERT opt_by_name_or_position opt_star_expr  */
#line 81 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_INSERT;
			n->insert_column_order = (yyvsp[-1].bynameorposition);
			(yyval.node) = (PGNode *)n;
		}
#line 23962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* matched_clause_action: INSERT DEFAULT VALUES  */
#line 88 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_INSERT;
			n->insert_column_order = PG_INSERT_BY_POSITION;
			n->defaultValues = true;
			(yyval.node) = (PGNode *)n;
		}
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* matched_clause_action: DO NOTHING  */
#line 96 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_DO_NOTHING;
			(yyval.node) = (PGNode *)n;
		}
#line 23984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* matched_clause_action: ERROR_P opt_error_message  */
#line 102 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = makeNode(PGMatchAction);
			n->actionType = MERGE_ACTION_TYPE_ERROR;
			n->errorMessage = (yyvsp[0].node);
			(yyval.node) = (PGNode *)n;
		}
#line 23995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_error_message: a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 24001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* opt_error_message: %empty  */
#line 112 "third_party/libpg_query/grammar/statements/merge_into.y"
                                        { (yyval.node) = NULL; }
#line 24007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* matched_clause: WHEN MATCHED opt_and_clause THEN matched_clause_action  */
#line 117 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = (PGMatchAction *) (yyvsp[0].node);
			n->when = MERGE_ACTION_WHEN_MATCHED;
			n->andClause = (yyvsp[-2].node);
			(yyval.node) = (PGNode *)n;
		}
#line 24018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* opt_source_or_target: BY SOURCE_P  */
#line 126 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                { (yyval.mergeaction) = MERGE_ACTION_WHEN_NOT_MATCHED_BY_SOURCE; }
#line 24024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* opt_source_or_target: BY TARGET_P  */
#line 127 "third_party/libpg_query/grammar/statements/merge_into.y"
                                        { (yyval.mergeaction) = MERGE_ACTION_WHEN_NOT_MATCHED_BY_TARGET; }
#line 24030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* opt_source_or_target: %empty  */
#line 128 "third_party/libpg_query/grammar/statements/merge_into.y"
                                        { (yyval.mergeaction) = MERGE_ACTION_WHEN_NOT_MATCHED_BY_TARGET; }
#line 24036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* not_matched_clause: WHEN NOT MATCHED opt_source_or_target opt_and_clause THEN matched_clause_action  */
#line 133 "third_party/libpg_query/grammar/statements/merge_into.y"
                {
			PGMatchAction *n = (PGMatchAction *) (yyvsp[0].node);
			n->when = (yyvsp[-3].mergeaction);
			n->andClause = (yyvsp[-2].node);
			(yyval.node) = (PGNode *)n;
		}
#line 24047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* merge_match_list: matched_or_not_matched_clause  */
#line 146 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* merge_match_list: matched_or_not_matched_clause merge_match_list  */
#line 147 "third_party/libpg_query/grammar/statements/merge_into.y"
                                                                { (yyval.list) = list_concat(list_make1((yyvsp[-1].node)), (yyvsp[0].list)); }
#line 24059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 17 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 26 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 35 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->name = (yyvsp[-1].range);
					n->functions = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
			}
#line 24111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 44 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 53 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 65 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 24148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 75 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 24159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* table_macro_list_internal: table_macro_definition_parens  */
#line 85 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 24167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 89 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* table_macro_list: table_macro_definition  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 24183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* macro_definition: param_list AS a_expr  */
#line 104 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 24194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* macro_definition_list: macro_definition  */
#line 114 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 24202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 118 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* param_list: '(' ')'  */
#line 131 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* param_list: '(' MacroParameterList ',' ')'  */
#line 135 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-2].list);
			}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* param_list: '(' MacroParameterList ')'  */
#line 139 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* MacroParameterList: MacroParameter  */
#line 146 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* MacroParameterList: MacroParameterList ',' MacroParameter  */
#line 150 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 24250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* MacroParameter: param_name opt_Typename  */
#line 157 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionParameter *n = makeNode(PGFunctionParameter);
				n->name = (yyvsp[-1].str);
				n->typeName = (yyvsp[0].typnam);
				n->defaultValue = NULL;
				(yyval.node) = (PGNode *) n;
			}
#line 24262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* MacroParameter: param_name opt_Typename COLON_EQUALS a_expr  */
#line 165 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionParameter *n = makeNode(PGFunctionParameter);
				n->name = (yyvsp[-3].str);
				n->typeName = (yyvsp[-2].typnam);
				n->defaultValue = (PGExpr *) (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* MacroParameter: param_name opt_Typename EQUALS_GREATER a_expr  */
#line 173 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionParameter *n = makeNode(PGFunctionParameter);
				n->name = (yyvsp[-3].str);
				n->typeName = (yyvsp[-2].typnam);
				n->defaultValue = (PGExpr *) (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].node);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].node);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* copy_options: '(' generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* opt_oids: WITH OIDS  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", NULL, (yylsp[-1]));
				}
#line 24468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* opt_oids: %empty  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* copy_opt_list: %empty  */
#line 125 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* opt_binary: BINARY  */
#line 131 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeStringConst("binary", (yylsp[0])), (yylsp[0]));
				}
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* opt_binary: %empty  */
#line 134 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* copy_opt_item: BINARY  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeStringConst("binary", (yylsp[0])), (yylsp[0]));
				}
#line 24508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* copy_opt_item: OIDS  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", NULL, (yylsp[0]));
				}
#line 24516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* copy_opt_item: FREEZE  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", NULL, (yylsp[0]));
				}
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeStringConst((yyvsp[0].str), (yylsp[0])), (yylsp[-2]));
				}
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeStringConst((yyvsp[0].str), (yylsp[0])), (yylsp[-2]));
				}
#line 24540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* copy_opt_item: CSV  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeStringConst("csv", (yylsp[0])), (yylsp[0]));
				}
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* copy_opt_item: HEADER_P  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", NULL, (yylsp[0]));
				}
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeStringConst((yyvsp[0].str), (yylsp[0])), (yylsp[-2]));
				}
#line 24564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeStringConst((yyvsp[0].str), (yylsp[0])), (yylsp[-2]));
				}
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* copy_opt_item: FORCE QUOTE columnList  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* copy_opt_item: FORCE QUOTE '*'  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* copy_opt_item: PARTITION BY columnList  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* copy_opt_item: PARTITION BY '*'  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* copy_opt_item: FORCE NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* copy_opt_item: ENCODING Sconst  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeStringConst((yyvsp[0].str), (yylsp[0])), (yylsp[-1]));
				}
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* copy_file_name: Sconst  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* copy_file_name: STDIN  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.node) = makeStringConst("/dev/stdin", (yylsp[0])); }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* copy_file_name: STDOUT  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.node) = makeStringConst("/dev/stdout", (yylsp[0])); }
#line 24646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* copy_file_name: IDENT '.' ColId  */
#line 214 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.node) = makeStringConst(psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)), (yylsp[-2])); }
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* copy_file_name: IDENT  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* copy_file_name: '(' a_expr ')'  */
#line 216 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* copy_file_name: param_expr  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 24690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* simple_select: values_clause_opt_comma  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* simple_select: TABLE relation_expr  */
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* pivot_column_entry: b_expr  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* pivot_column_entry: single_pivot_value  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* pivot_column_list_internal: pivot_column_entry  */
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* pivot_column_list: pivot_column_list_internal  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* pivot_column_list: pivot_column_list_internal ','  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* with_clause: WITH cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* with_clause: WITH_LA cte_list  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* with_clause: WITH RECURSIVE cte_list  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* cte_list: common_table_expr  */
#line 457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* cte_list: cte_list ',' common_table_expr  */
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* common_table_expr: name opt_name_list opt_on_key AS opt_materialized '(' PreparableStmt ')'  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-7].str);
				n->aliascolnames = (yyvsp[-6].list);
				n->using_key_list = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-7]);
				(yyval.node) = (PGNode *) n;
			}
#line 25196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_on_key: USING KEY '(' uk_aggr_list ')'  */
#line 475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* opt_on_key: %empty  */
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = NULL; }
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* uk_aggr_list: uk_aggr_el  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* uk_aggr_list: uk_aggr_list ',' uk_aggr_el  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* uk_aggr_el: columnref  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* uk_aggr_el: func_expr  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* uk_aggr_el: func_expr AS opt_alias_clause  */
#line 493 "third_party/libpg_query/grammar/statements/select.y"
                                {
        				PGFuncCall *n = (PGFuncCall *) (yyvsp[-2].node);
        				n->alias = (yyvsp[0].alias);
        				(yyval.node) = (PGNode *) n;
        			}
#line 25242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_materialized: MATERIALIZED  */
#line 511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 25248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_materialized: NOT MATERIALIZED  */
#line 512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 25254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_materialized: %empty  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 25260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* into_clause: INTO OptTempTableName  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* into_clause: %empty  */
#line 528 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* OptTempTableName: TABLE qualified_name  */
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* OptTempTableName: qualified_name  */
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* opt_table: TABLE  */
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* opt_table: %empty  */
#line 590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* all_or_distinct: ALL  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* all_or_distinct: DISTINCT  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* all_or_distinct: %empty  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* by_name: BY NAME_P  */
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* distinct_clause: DISTINCT  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* opt_all_clause: ALL  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* opt_all_clause: %empty  */
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 25439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* opt_ignore_nulls: %empty  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 25445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* opt_sort_clause: sort_clause  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* opt_sort_clause: %empty  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* sort_clause: ORDER BY sortby_list  */
#line 628 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* sortby_list: sortby  */
#line 645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* sortby_list: sortby_list ',' sortby  */
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* opt_asc_desc: ASC_P  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* opt_asc_desc: DESC_P  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* opt_asc_desc: %empty  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_nulls_order: %empty  */
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* select_limit: limit_clause offset_clause  */
#line 680 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make3((yyvsp[0].node), (yyvsp[-1].node), NULL); }
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* select_limit: offset_clause limit_clause  */
#line 681 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make3((yyvsp[-1].node), (yyvsp[0].node), (yyvsp[-1].node)); }
#line 25566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* select_limit: limit_clause  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL, (yyvsp[0].node), NULL); }
#line 25572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* select_limit: offset_clause  */
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3((yyvsp[0].node), NULL, (yyvsp[0].node)); }
#line 25578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* opt_select_limit: select_limit  */
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* opt_select_limit: %empty  */
#line 688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL,NULL,NULL); }
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* limit_clause: LIMIT select_limit_value  */
#line 693 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 711 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* offset_clause: OFFSET select_offset_value  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* sample_value: FCONST  */
#line 726 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
        }
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* sample_value: ICONST  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
        }
#line 25649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* sample_count: sample_value '%'  */
#line 741 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 25657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* sample_count: sample_value PERCENT  */
#line 745 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 25665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* sample_count: sample_value  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[0].node), false);
		}
#line 25673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* sample_count: sample_value ROWS  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), false);
		}
#line 25681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* sample_clause: %empty  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* opt_sample_func: ColId  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* opt_sample_func: %empty  */
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* tablesample_entry: sample_count  */
#line 782 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_tablesample_clause: tablesample_clause  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* opt_tablesample_clause: %empty  */
#line 805 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 810 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* opt_repeatable_clause: %empty  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* at_unit: TIMESTAMP  */
#line 816 "third_party/libpg_query/grammar/statements/select.y"
                  { (yyval.str) = (char*) "TIMESTAMP"; }
#line 25779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* at_unit: VERSION_P  */
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                    { (yyval.str) = (char*) "VERSION"; }
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* at_specifier: at_unit EQUALS_GREATER a_expr  */
#line 822 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAtClause *n = makeNode(PGAtClause);
				n->unit = (yyvsp[-2].str);
				n->expr = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* opt_at_clause: AT '(' at_specifier ')'  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = (yyvsp[-1].node); }
#line 25802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_at_clause: %empty  */
#line 832 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.node) = NULL; }
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* select_limit_value: a_expr  */
#line 837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* select_limit_value: ALL  */
#line 839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* select_limit_value: a_expr '%'  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* select_limit_value: FCONST PERCENT  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* select_limit_value: ICONST PERCENT  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* select_offset_value: a_expr  */
#line 852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* select_fetch_first_value: c_expr  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* select_fetch_first_value: '+' I_or_F_const  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* select_fetch_first_value: '-' I_or_F_const  */
#line 876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* I_or_F_const: Iconst  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* I_or_F_const: FCONST  */
#line 881 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* row_or_rows: ROW  */
#line 885 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* row_or_rows: ROWS  */
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* first_or_next: FIRST_P  */
#line 889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* first_or_next: NEXT  */
#line 890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* group_clause: GROUP_P BY ALL  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* group_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* group_by_list: group_by_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* group_by_list: group_by_list ',' group_by_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* group_by_list_opt_comma: group_by_list  */
#line 930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* group_by_list_opt_comma: group_by_list ','  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* group_by_item: a_expr  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* group_by_item: empty_grouping_set  */
#line 936 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* group_by_item: cube_clause  */
#line 937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* group_by_item: rollup_clause  */
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* group_by_item: grouping_sets_clause  */
#line 939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* empty_grouping_set: '(' ')'  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* grouping_or_grouping_id: GROUPING  */
#line 977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* grouping_or_grouping_id: GROUPING_ID  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 26020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* having_clause: HAVING a_expr  */
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* having_clause: %empty  */
#line 983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* qualify_clause: QUALIFY a_expr  */
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* qualify_clause: %empty  */
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* for_locking_clause: for_locking_items  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* for_locking_clause: FOR READ_P ONLY  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_for_locking_clause: for_locking_clause  */
#line 997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_for_locking_clause: %empty  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* for_locking_items: for_locking_item  */
#line 1002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* for_locking_items: for_locking_items for_locking_item  */
#line 1003 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* for_locking_strength: FOR UPDATE  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* for_locking_strength: FOR SHARE  */
#line 1020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* for_locking_strength: FOR KEY SHARE  */
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* locked_rels_list: OF qualified_name_list  */
#line 1025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* locked_rels_list: %empty  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* opt_nowait_or_skip: NOWAIT  */
#line 1031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 1032 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* opt_nowait_or_skip: %empty  */
#line 1033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 1049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* values_clause_opt_comma: values_clause  */
#line 1057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* values_clause_opt_comma: values_clause ','  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* from_clause: FROM from_list_opt_comma  */
#line 1071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* from_clause: %empty  */
#line 1072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* from_list: table_ref  */
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* from_list: from_list ',' table_ref  */
#line 1077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* from_list_opt_comma: from_list  */
#line 1081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* from_list_opt_comma: from_list ','  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* alias_prefix_colon_clause: ColIdOrString SINGLE_COLON  */
#line 1087 "third_party/libpg_query/grammar/statements/select.y"
            {
                (yyval.alias) = makeNode(PGAlias);
                (yyval.alias)->aliasname = (yyvsp[-1].str);
            }
#line 26223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* table_ref: relation_expr opt_alias_clause opt_at_clause opt_tablesample_clause  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-3].range)->at_clause = (yyvsp[-1].node);
					(yyvsp[-3].range)->alias = (yyvsp[-2].alias);
					(yyvsp[-3].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-3].range);
				}
#line 26234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* table_ref: alias_prefix_colon_clause relation_expr opt_at_clause opt_tablesample_clause  */
#line 1105 "third_party/libpg_query/grammar/statements/select.y"
                {
					(yyvsp[-2].range)->at_clause = (yyvsp[-1].node);
                    (yyvsp[-2].range)->alias = (yyvsp[-3].alias);
                    (yyvsp[-2].range)->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) (yyvsp[-2].range);
                }
#line 26245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* table_ref: alias_prefix_colon_clause func_table opt_tablesample_clause  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                    {
                        PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
                        n->alias = (yyvsp[-2].alias);
                        n->sample = (yyvsp[0].node);
                        (yyval.node) = (PGNode *) n;
                    }
#line 26268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-2].node);
                    n->alias = (yyvsp[-1].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 26281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* table_ref: alias_prefix_colon_clause select_with_parens opt_tablesample_clause  */
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-1].node);
                    n->alias = (yyvsp[-2].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 26319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* table_ref: joined_table  */
#line 1173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* table_ref: alias_prefix_colon_clause '(' joined_table ')'  */
#line 1182 "third_party/libpg_query/grammar/statements/select.y"
                {
                    (yyvsp[-1].jexpr)->alias = (yyvsp[-3].alias);
                    (yyval.node) = (PGNode *) (yyvsp[-1].jexpr);
                }
#line 26358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 26388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1211 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* opt_pivot_group_by: %empty  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* opt_include_nulls: %empty  */
#line 1217 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* pivot_header: d_expr  */
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* pivot_header: indirection_expr  */
#line 1239 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1252 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* pivot_value_list: pivot_value  */
#line 1261 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* unpivot_header: ColIdOrString  */
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1277 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* unpivot_value_list: unpivot_value  */
#line 1286 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* joined_table: '(' joined_table ')'  */
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1414 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* alias_clause: AS ColIdOrString  */
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* alias_clause: ColId  */
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* opt_alias_clause: alias_clause  */
#line 1484 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* opt_alias_clause: %empty  */
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* func_alias_clause: alias_clause  */
#line 1494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* func_alias_clause: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* join_type: FULL join_outer  */
#line 1519 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* join_type: LEFT join_outer  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* join_type: RIGHT join_outer  */
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* join_type: SEMI  */
#line 1522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* join_type: ANTI  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* join_type: INNER_P  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* join_outer: OUTER_P  */
#line 1528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* join_outer: %empty  */
#line 1529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* join_qual: ON a_expr  */
#line 1542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* relation_expr: qualified_name  */
#line 1548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* relation_expr: qualified_name '*'  */
#line 1555 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* relation_expr: ONLY qualified_name  */
#line 1562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* func_table: func_expr_windowless opt_ordinality  */
#line 1601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* rowsfrom_list: rowsfrom_item  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_col_def_list: %empty  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* opt_ordinality: %empty  */
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* where_clause: WHERE a_expr  */
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* where_clause: %empty  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* TableFuncElementList: TableFuncElement  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_collate_clause: COLLATE any_name  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_collate_clause: %empty  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 27060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* colid_type_list: ColId Typename  */
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 27076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_Typename: Typename  */
#line 1712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_Typename: %empty  */
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 27088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* Typename: SimpleTypename opt_array_bounds  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 27097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 27107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 27116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 27126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* Typename: SimpleTypename ARRAY  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 27135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 27145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* Typename: qualified_typename opt_array_bounds  */
#line 1750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[-1].list));
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 27165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 27176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 27187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* qualified_typename: IDENT '.' IDENT  */
#line 1778 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 27193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1779 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 27199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 27205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_array_bounds: %empty  */
#line 1788 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* SimpleTypename: GenericType  */
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* SimpleTypename: Numeric  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* SimpleTypename: Bit  */
#line 1794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* SimpleTypename: Character  */
#line 1795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* SimpleTypename: ConstDatetime  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* SimpleTypename: ConstInterval opt_interval  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* ConstTypename: Numeric  */
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* ConstTypename: ConstBit  */
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* ConstTypename: ConstCharacter  */
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* ConstTypename: ConstDatetime  */
#line 1825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* GenericType: type_name_token opt_type_modifiers  */
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* opt_type_modifiers: %empty  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* Numeric: INT_P  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* Numeric: INTEGER  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* Numeric: SMALLINT  */
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* Numeric: BIGINT  */
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* Numeric: REAL  */
#line 1878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* Numeric: FLOAT_P opt_float  */
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* Numeric: DOUBLE_P PRECISION  */
#line 1888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* Numeric: DEC opt_type_modifiers  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* Numeric: BOOLEAN_P  */
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* opt_float: '(' Iconst ')'  */
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* opt_float: %empty  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* Bit: BitWithLength  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* Bit: BitWithoutLength  */
#line 1953 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* ConstBit: BitWithLength  */
#line 1961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* ConstBit: BitWithoutLength  */
#line 1965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1973 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* BitWithoutLength: BIT opt_varying  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* Character: CharacterWithLength  */
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* Character: CharacterWithoutLength  */
#line 2010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* ConstCharacter: CharacterWithLength  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* ConstCharacter: CharacterWithoutLength  */
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* CharacterWithLength: character '(' Iconst ')'  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* CharacterWithoutLength: character  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* character: CHARACTER opt_varying  */
#line 2051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* character: CHAR_P opt_varying  */
#line 2053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* character: VARCHAR  */
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* character: NATIONAL CHARACTER opt_varying  */
#line 2057 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* character: NATIONAL CHAR_P opt_varying  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* character: NCHAR opt_varying  */
#line 2061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* opt_varying: VARYING  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* opt_varying: %empty  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* ConstDatetime: TIME opt_timezone  */
#line 2100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* ConstInterval: INTERVAL  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2119 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* opt_timezone: %empty  */
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* opt_interval: year_keyword  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* opt_interval: month_keyword  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* opt_interval: day_keyword  */
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* opt_interval: hour_keyword  */
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* opt_interval: minute_keyword  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* opt_interval: second_keyword  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* opt_interval: millisecond_keyword  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_interval: microsecond_keyword  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* opt_interval: week_keyword  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 27751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* opt_interval: quarter_keyword  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 27757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* opt_interval: decade_keyword  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 27763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* opt_interval: century_keyword  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 27769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* opt_interval: millennium_keyword  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 27775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* opt_interval: year_keyword TO month_keyword  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* opt_interval: day_keyword TO hour_keyword  */
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* opt_interval: day_keyword TO minute_keyword  */
#line 2200 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_interval: day_keyword TO second_keyword  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* opt_interval: hour_keyword TO second_keyword  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* opt_interval: minute_keyword TO second_keyword  */
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* opt_interval: %empty  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* a_expr: c_expr  */
#line 2260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* a_expr: a_expr TYPECAST Typename  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* a_expr: a_expr COLLATE any_name  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* a_expr: '+' a_expr  */
#line 2288 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* a_expr: '-' a_expr  */
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* a_expr: a_expr '+' a_expr  */
#line 2292 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* a_expr: a_expr '-' a_expr  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* a_expr: a_expr '*' a_expr  */
#line 2296 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* a_expr: a_expr '/' a_expr  */
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2300 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* a_expr: a_expr '%' a_expr  */
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* a_expr: a_expr '^' a_expr  */
#line 2304 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* a_expr: a_expr POWER_OF a_expr  */
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* a_expr: a_expr '<' a_expr  */
#line 2308 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* a_expr: a_expr '>' a_expr  */
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: a_expr '=' a_expr  */
#line 2312 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2314 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2316 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: a_expr qual_Op a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: qual_Op a_expr  */
#line 2323 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: a_expr qual_Op  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: a_expr AND a_expr  */
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: a_expr OR a_expr  */
#line 2330 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: NOT a_expr  */
#line 2332 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: NOT_LA a_expr  */
#line 2334 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: a_expr GLOB a_expr  */
#line 2336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: a_expr LIKE a_expr  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2346 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* a_expr: a_expr ILIKE a_expr  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 28098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 28121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 28133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 28145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2414 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 28157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* a_expr: a_expr IS NULL_P  */
#line 2432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* a_expr: a_expr ISNULL  */
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* a_expr: a_expr IS NOT NULL_P  */
#line 2448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* a_expr: a_expr NOT NULL_P  */
#line 2456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* a_expr: a_expr NOTNULL  */
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* a_expr: LAMBDA name_list SINGLE_COLON a_expr  */
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].list);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-2]);
				(yyval.node) = (PGNode *) n;
			}
#line 28229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* a_expr: a_expr SINGLE_ARROW a_expr  */
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGSingleArrowFunction *n = makeNode(PGSingleArrowFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 28241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: row OVERLAPS row  */
#line 2492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr IS TRUE_P  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr IS FALSE_P  */
#line 2524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: a_expr IS UNKNOWN  */
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2564 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr IN_P in_expr  */
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: DEFAULT  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: UNPACK '(' a_expr ')'  */
#line 2686 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((yyvsp[-1].node)), (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 28536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-4]);

					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((PGNode *)star), (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 28550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2701 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-5].str);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-5]);
					(yyval.node) = (PGNode *) star;
				}
#line 28577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* b_expr: c_expr  */
#line 2731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* b_expr: b_expr TYPECAST Typename  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* b_expr: '+' b_expr  */
#line 2735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* b_expr: '-' b_expr  */
#line 2737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* b_expr: b_expr '+' b_expr  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* b_expr: b_expr '-' b_expr  */
#line 2741 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* b_expr: b_expr '*' b_expr  */
#line 2743 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* b_expr: b_expr '/' b_expr  */
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2747 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* b_expr: b_expr '%' b_expr  */
#line 2749 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* b_expr: b_expr '^' b_expr  */
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* b_expr: b_expr POWER_OF b_expr  */
#line 2753 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* b_expr: b_expr '<' b_expr  */
#line 2755 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* b_expr: b_expr '>' b_expr  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* b_expr: b_expr '=' b_expr  */
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2763 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* b_expr: b_expr qual_Op b_expr  */
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* b_expr: qual_Op b_expr  */
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* b_expr: b_expr qual_Op  */
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2781 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2800 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* d_expr: columnref_opt_indirection  */
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* d_expr: AexprConst  */
#line 2814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* d_expr: select_with_parens  */
#line 2816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* d_expr: select_with_parens indirection  */
#line 2827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* d_expr: EXISTS select_with_parens  */
#line 2851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* indirection_expr_or_a_expr: row  */
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* param_expr: '?'  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* param_expr: PARAM  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* param_expr: '$' ColLabel  */
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* indirection_expr: ARRAY select_with_parens  */
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* indirection_expr: '#' ICONST  */
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 28929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 28959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* func_application: func_name '(' ')'  */
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* func_application: func_name '(' sort_clause opt_ignore_nulls ')'  */
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), NIL, (yylsp[-4]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 29001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 29013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 29028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 29040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 29080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* func_expr: func_expr_common_subexpr  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* func_expr_windowless: func_application  */
#line 3081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* func_expr_windowless: func_expr_common_subexpr  */
#line 3082 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 29108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 29120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 3100 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 29180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3151 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 29207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 29215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 29223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 29234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* list_comprehension: '[' a_expr FOR name_list IN_P a_expr ']'  */
#line 3173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].list);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 29247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* list_comprehension: '[' a_expr FOR name_list IN_P c_expr IF_P a_expr ']'  */
#line 3182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].list);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].list);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 29266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3203 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* within_group_clause: %empty  */
#line 3204 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3209 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 29290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* filter_clause: %empty  */
#line 3210 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* export_clause: EXPORT_STATE  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* export_clause: %empty  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* window_clause: WINDOW window_definition_list  */
#line 3222 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* window_clause: %empty  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* window_definition_list: window_definition  */
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* window_definition: ColId AS window_specification  */
#line 3234 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* over_clause: OVER window_specification  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* over_clause: OVER ColId  */
#line 3244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* over_clause: %empty  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* opt_existing_window_name: ColId  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* opt_existing_window_name: %empty  */
#line 3288 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* opt_partition_clause: %empty  */
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 29449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* opt_frame_clause: %empty  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* frame_extent: frame_bound  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* frame_bound: CURRENT_P ROW  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* frame_bound: a_expr PRECEDING  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* frame_bound: a_expr FOLLOWING  */
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3447 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 29603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 29609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 29615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* opt_window_exclusion_clause: %empty  */
#line 3451 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* qualified_row: ROW '(' ')'  */
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* row: qualified_row  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* row: '(' expr_list ',' a_expr ')'  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* dict_arg: ColIdOrString SINGLE_COLON a_expr  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* dict_arguments: dict_arg  */
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3485 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* dict_arguments_opt_comma: dict_arguments  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* map_arg: a_expr SINGLE_COLON a_expr  */
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 29690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* map_arguments: map_arg  */
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* map_arguments: map_arguments ',' map_arg  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* map_arguments_opt_comma: map_arguments  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* map_arguments_opt_comma: map_arguments ','  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_map_arguments_opt_comma: %empty  */
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 29726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* sub_type: ANY  */
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* sub_type: SOME  */
#line 3518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* sub_type: ALL  */
#line 3519 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* all_Op: Op  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* all_Op: MathOp  */
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* MathOp: '+'  */
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* MathOp: '-'  */
#line 3527 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* MathOp: '*'  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* MathOp: '/'  */
#line 3529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* MathOp: INTEGER_DIVISION  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* MathOp: '%'  */
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* MathOp: '^'  */
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* MathOp: POWER_OF  */
#line 3533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* MathOp: '<'  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* MathOp: '>'  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* MathOp: '='  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* MathOp: LESS_EQUALS  */
#line 3537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* MathOp: GREATER_EQUALS  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* MathOp: NOT_EQUALS  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* qual_Op: Op  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* qual_all_Op: all_Op  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* subquery_Op: all_Op  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* subquery_Op: LIKE  */
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* subquery_Op: NOT_LA LIKE  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* subquery_Op: GLOB  */
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* subquery_Op: NOT_LA GLOB  */
#line 3567 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* subquery_Op: ILIKE  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* subquery_Op: NOT_LA ILIKE  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* any_operator: all_Op  */
#line 3585 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* any_operator: ColId '.' any_operator  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* c_expr_list: c_expr  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* c_expr_list_opt_comma: c_expr_list  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* expr_list: a_expr  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* expr_list: expr_list ',' a_expr  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* expr_list_opt_comma: expr_list  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* expr_list_opt_comma: expr_list ','  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* opt_expr_list_opt_comma: %empty  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 30004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* func_arg_list: func_arg_expr  */
#line 3650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 30012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 30020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* func_arg_expr: a_expr  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 30028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 30054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* type_list: Typename  */
#line 3683 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 30060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* type_list: type_list ',' Typename  */
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 30066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* extract_list: extract_arg FROM a_expr  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 30074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* extract_list: %empty  */
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* extract_arg: IDENT  */
#line 3699 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* extract_arg: year_keyword  */
#line 3700 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 30092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* extract_arg: month_keyword  */
#line 3701 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 30098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* extract_arg: day_keyword  */
#line 3702 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 30104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* extract_arg: hour_keyword  */
#line 3703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 30110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* extract_arg: minute_keyword  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 30116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* extract_arg: second_keyword  */
#line 3705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 30122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* extract_arg: millisecond_keyword  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 30128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* extract_arg: microsecond_keyword  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 30134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* extract_arg: week_keyword  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 30140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* extract_arg: quarter_keyword  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 30146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* extract_arg: decade_keyword  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 30152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* extract_arg: century_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 30158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* extract_arg: millennium_keyword  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 30164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* extract_arg: Sconst  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* overlay_placing: PLACING a_expr  */
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 30192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* position_list: b_expr IN_P b_expr  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 30198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* position_list: %empty  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* substr_list: a_expr substr_from substr_for  */
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* substr_list: a_expr substr_for substr_from  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 30221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* substr_list: a_expr substr_from  */
#line 3768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 30229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* substr_list: a_expr substr_for  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 30248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* substr_list: expr_list  */
#line 3787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 30256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* substr_list: %empty  */
#line 3791 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 30262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* substr_from: FROM a_expr  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* substr_for: FOR a_expr  */
#line 3798 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 30280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* trim_list: FROM expr_list_opt_comma  */
#line 3802 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* trim_list: expr_list_opt_comma  */
#line 3803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* in_expr: select_with_parens  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 30303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 30309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* in_expr: indirection_expr  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 30315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3826 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 30329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* when_clause_list: when_clause  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* when_clause_list: when_clause_list when_clause  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 30353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* case_default: ELSE a_expr  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* case_default: %empty  */
#line 3856 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* case_arg: a_expr  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 30371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* case_arg: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* columnref: ColId  */
#line 3869 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 30385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* columnref_opt_indirection: ColId  */
#line 3875 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 30393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* columnref_opt_indirection: ColId indirection  */
#line 3879 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 30401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* indirection_el: '[' a_expr ']'  */
#line 3886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                            {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 30438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* indirection_el: '[' opt_slice_bound SINGLE_COLON '-' SINGLE_COLON opt_slice_bound ']'  */
#line 3909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* opt_slice_bound: a_expr  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_slice_bound: %empty  */
#line 3920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_indirection: %empty  */
#line 3925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_indirection: opt_indirection indirection_el  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_func_arguments: %empty  */
#line 3930 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_func_arguments: '(' ')'  */
#line 3931 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3932 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* extended_indirection_el: '[' a_expr ']'  */
#line 3946 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON opt_slice_bound SINGLE_COLON opt_slice_bound ']'  */
#line 3961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                            {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 30542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* extended_indirection_el: '[' opt_slice_bound SINGLE_COLON '-' SINGLE_COLON opt_slice_bound ']'  */
#line 3970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* opt_extended_indirection: %empty  */
#line 3985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 4002 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_target_list_opt_comma: %empty  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* target_list: target_el  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* target_list: target_list ',' target_el  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* target_list_opt_comma: target_list  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* target_list_opt_comma: target_list ','  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* target_el: a_expr AS ColLabelOrString  */
#line 4017 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* target_el: a_expr IDENT  */
#line 4033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* target_el: a_expr  */
#line 4041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* target_el: ColId SINGLE_COLON a_expr  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-2].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* except_list: EXCLUDE '(' except_name_list_opt_comma ')'  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* except_list: EXCLUDE except_name  */
#line 4059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* except_name: ColIdOrString  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].str));
			}
#line 30670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* except_name: except_name '.' ColIdOrString  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str));
			}
#line 30678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* except_name_list: except_name  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* except_name_list: except_name_list ',' except_name  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* except_name_list_opt_comma: except_name_list  */
#line 4080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* except_name_list_opt_comma: except_name_list ','  */
#line 4081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* opt_except_list: except_list  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* opt_except_list: %empty  */
#line 4086 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* replace_list_el: a_expr AS ColId  */
#line 4089 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* replace_list: replace_list_el  */
#line 4093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* replace_list: replace_list ',' replace_list_el  */
#line 4094 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* replace_list_opt_comma: replace_list  */
#line 4098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* replace_list_opt_comma: replace_list ','  */
#line 4099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 4102 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* opt_replace_list: REPLACE replace_list_el  */
#line 4103 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_replace_list: %empty  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* rename_list_el: except_name AS ColId  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[-2].list), (yyvsp[0].str)); }
#line 30768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* rename_list: rename_list_el  */
#line 4111 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* rename_list: rename_list ',' rename_list_el  */
#line 4112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* rename_list_opt_comma: rename_list  */
#line 4116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* rename_list_opt_comma: rename_list ','  */
#line 4117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_rename_list: RENAME '(' rename_list_opt_comma ')'  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_rename_list: RENAME rename_list_el  */
#line 4120 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_rename_list: %empty  */
#line 4121 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = NULL; }
#line 30810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* qualified_name_list: qualified_name  */
#line 4131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 4132 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* name_list: name  */
#line 4137 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* name_list: name_list ',' name  */
#line 4139 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* name_list_opt_comma: name_list  */
#line 4144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* name_list_opt_comma: name_list ','  */
#line 4145 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 4149 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 4150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* name: ColIdOrString  */
#line 4153 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* func_name: function_name_token  */
#line 4165 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* func_name: ColId indirection  */
#line 4168 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* AexprConst: Iconst  */
#line 4179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* AexprConst: FCONST  */
#line 4183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* AexprConst: Sconst opt_indirection  */
#line 4187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* AexprConst: BCONST  */
#line 4199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* AexprConst: XCONST  */
#line 4203 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* AexprConst: func_name Sconst  */
#line 4212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* AexprConst: ConstTypename Sconst  */
#line 4257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4261 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 31001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4265 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 31009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 31017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* AexprConst: TRUE_P  */
#line 4273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 31025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* AexprConst: FALSE_P  */
#line 4277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 31033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* AexprConst: NULL_P  */
#line 4281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 31041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* Iconst: ICONST  */
#line 4286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* type_function_name: IDENT  */
#line 4303 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* type_function_name: unreserved_keyword  */
#line 4304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* type_function_name: type_func_name_keyword  */
#line 4305 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* function_name_token: IDENT  */
#line 4308 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* function_name_token: unreserved_keyword  */
#line 4309 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* function_name_token: func_name_keyword  */
#line 4310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* type_name_token: IDENT  */
#line 4313 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* type_name_token: unreserved_keyword  */
#line 4314 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* type_name_token: type_name_keyword  */
#line 4315 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* any_name: ColId  */
#line 4318 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* any_name: ColId attrs  */
#line 4319 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 31113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* attrs: '.' attr_name  */
#line 4323 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 31119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* attrs: attrs '.' attr_name  */
#line 4325 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 31125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4329 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 31131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* opt_name_list: %empty  */
#line 4330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 31137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* ColLabelOrString: ColLabel  */
#line 4337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* ColLabelOrString: SCONST  */
#line 4338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 31161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 31167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 31173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 31257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 31263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 31335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 31341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 31359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 31371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 31377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 31383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 31495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 31507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 31519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 31525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 31531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 31537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 31543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 31549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 31555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 31561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 31567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 31573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 31579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 31585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 31591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* NonReservedWord: IDENT  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* NonReservedWord: unreserved_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* NonReservedWord: other_keyword  */
#line 94 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* NonReservedWord_or_Sconst: Sconst  */
#line 100 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* explain_option_list: explain_option_elem  */
#line 106 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* analyze_keyword: ANALYZE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* analyze_keyword: ANALYSE  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_boolean_or_string: TRUE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_boolean_or_string: FALSE_P  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* opt_boolean_or_string: ON  */
#line 125 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 131 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 137 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* explain_option_name: NonReservedWord  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* explain_option_name: analyze_keyword  */
#line 145 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 31860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 32004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 32010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 32024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 32038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 32052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 32066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 32072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 32078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 32096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 32108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 32126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 32160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 32172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 32186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 32192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 32198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 32204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 32210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 32224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 32230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 32236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 32242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 32248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 32254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 32260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 32274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 32288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 32296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 32307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 32318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 32324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 32330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 32336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 32342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 32356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 32370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias opt_attach_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias opt_attach_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* AttachStmt: ATTACH OR REPLACE opt_database Sconst opt_database_alias opt_attach_options  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 32409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* DetachStmt: DETACH ColLabel  */
#line 38 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 45 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 32442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* opt_database: DATABASE  */
#line 60 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 32448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* opt_database: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 32454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* opt_database_alias: AS ColId  */
#line 65 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 32460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* opt_database_alias: %empty  */
#line 66 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 32466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* generic_opt_arg: a_expr  */
#line 77 "third_party/libpg_query/grammar/statements/attach.y"
                                                { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 32472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* generic_opt_arg: %empty  */
#line 78 "third_party/libpg_query/grammar/statements/attach.y"
                                        { (yyval.node) = NULL; }
#line 32478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* generic_opt_elem: ColLabel generic_opt_arg  */
#line 83 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 32486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* generic_opt_list: generic_opt_elem  */
#line 90 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 32494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* generic_opt_list: generic_opt_list ',' generic_opt_elem  */
#line 94 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 32502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1574: /* opt_attach_options: '(' generic_opt_list ')'  */
#line 101 "third_party/libpg_query/grammar/statements/attach.y"
                {
			(yyval.list) = (yyvsp[-1].list);
		}
#line 32510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1575: /* opt_attach_options: %empty  */
#line 105 "third_party/libpg_query/grammar/statements/attach.y"
                {
			(yyval.list) = NULL;
		}
#line 32518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 32527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 32563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 32574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 32584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 32590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 32601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 32612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* VariableShowStmt: SUMMARIZE qualified_name  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 32647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* VariableShowStmt: show_or_describe TABLES FROM qualified_name  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->set = (char*) "__show_tables_from_database";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* VariableShowStmt: show_or_describe qualified_name  */
#line 33 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 40 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 47 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 54 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* VariableShowStmt: show_or_describe  */
#line 61 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 32714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1601: /* var_name: ColId  */
#line 75 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1602: /* var_name: var_name '.' ColId  */
#line 77 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1603: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1604: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1605: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1606: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1607: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1608: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1609: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1610: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1611: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1612: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1613: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1614: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1615: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1616: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1617: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1618: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1619: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32937 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(const char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (char *) str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(const char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGNode *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (limitOffset == isLimitOffsetFirst) {
		stmt->offset_first = true;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
